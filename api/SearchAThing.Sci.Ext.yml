### YamlMime:ManagedReference
items:
- uid: SearchAThing.Sci.Ext
  commentId: T:SearchAThing.Sci.Ext
  id: Ext
  parent: SearchAThing.Sci
  children:
  - SearchAThing.Sci.Ext.Abs(System.Numerics.Vector3)
  - SearchAThing.Sci.Ext.AddEntities(netDxf.DxfObject,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},netDxf.Tables.Layer)
  - SearchAThing.Sci.Ext.AddEntity(netDxf.DxfObject,netDxf.Entities.EntityObject,netDxf.Tables.Layer)
  - SearchAThing.Sci.Ext.Angle(System.Double,System.Double,System.Boolean)
  - SearchAThing.Sci.Ext.AngleInRange(System.Double,System.Double,System.Double,System.Double)
  - SearchAThing.Sci.Ext.AutoIntersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.AutoTrimExtends(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  - SearchAThing.Sci.Ext.AutoZoom(netDxf.DxfDocument,SearchAThing.Sci.BBox3D)
  - SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  - SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},System.Double)
  - SearchAThing.Sci.Ext.BBox(netDxf.Entities.EntityObject,System.Double)
  - SearchAThing.Sci.Ext.BBox3D(netDxf.DxfDocument)
  - SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  - SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.Sci.Ext.Boolean(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},ClipperLib.ClipType,System.Boolean)
  - SearchAThing.Sci.Ext.CS(netDxf.Entities.EntityObject)
  - SearchAThing.Sci.Ext.CadScript(netDxf.Entities.Face3D)
  - SearchAThing.Sci.Ext.CadScriptPoint(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.CadScriptPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.CheckSense(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  - SearchAThing.Sci.Ext.CheckSort(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  - SearchAThing.Sci.Ext.CircleBy3Points(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  - SearchAThing.Sci.Ext.CompareToTol(System.Double,System.Double,System.Double)
  - SearchAThing.Sci.Ext.ContainsPoint(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.LoopContainsPointMode)
  - SearchAThing.Sci.Ext.ConvexHull2D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.CoordTransform(netDxf.DxfDocument,System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.CoordTransform(netDxf.Entities.EntityObject,System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Ext.Debug(System.Numerics.Vector3,System.String)
  - SearchAThing.Sci.Ext.Debug(System.Numerics.Vector4,System.String)
  - SearchAThing.Sci.Ext.Decompose(System.Numerics.Matrix4x4)
  - SearchAThing.Sci.Ext.DetectPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  - SearchAThing.Sci.Ext.DistinctKeepOrder(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  - SearchAThing.Sci.Ext.DrawCube(netDxf.DxfObject,SearchAThing.Sci.Vector3D,System.Double,netDxf.Tables.Layer)
  - SearchAThing.Sci.Ext.DrawCuboid(netDxf.DxfObject,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,netDxf.Tables.Layer)
  - SearchAThing.Sci.Ext.DrawStar(netDxf.DxfObject,SearchAThing.Sci.Vector3D,System.Double,netDxf.Tables.Layer)
  - SearchAThing.Sci.Ext.DrawTimeline(netDxf.DxfObject,System.Collections.Generic.List{System.ValueTuple{System.DateTime,System.DateTime}},System.Double,System.Double,System.Double,System.Double,System.Func{System.DateTime,System.String})
  - SearchAThing.Sci.Ext.Entities(netDxf.DxfDocument)
  - SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Double,System.Double)
  - SearchAThing.Sci.Ext.EqualsTol(System.Numerics.Vector3,System.Double,System.Numerics.Vector3)
  - SearchAThing.Sci.Ext.EqualsTol(netDxf.Vector3,System.Double,netDxf.Vector3)
  - SearchAThing.Sci.Ext.Explode(netDxf.Entities.Insert)
  - SearchAThing.Sci.Ext.Fmt(System.Double,System.Int32,System.Int32)
  - SearchAThing.Sci.Ext.Fmt(System.Numerics.Matrix4x4,System.Int32,System.Int32)
  - SearchAThing.Sci.Ext.Fmt(System.Single,System.Int32,System.Int32)
  - SearchAThing.Sci.Ext.GetItem(System.Numerics.Matrix4x4,System.Int32,System.Int32)
  - SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},SearchAThing.Sci.GeomSegmentMode,SearchAThing.Sci.GeomSegmentMode)
  - SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Line3D,SearchAThing.Sci.GeomSegmentMode)
  - SearchAThing.Sci.Ext.Inverse(System.Numerics.Matrix4x4)
  - SearchAThing.Sci.Ext.IsAClosedPoly(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  - SearchAThing.Sci.Ext.IsLinearIndependent(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.Length(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.MakeVertexToEdges(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  - SearchAThing.Sci.Ext.Mean(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  - SearchAThing.Sci.Ext.MergeColinearSegments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  - SearchAThing.Sci.Ext.MidPoint(netDxf.Entities.Polyline2D)
  - SearchAThing.Sci.Ext.MinDistance(System.Collections.Generic.IEnumerable{System.Double})
  - SearchAThing.Sci.Ext.MinMax(System.Collections.Generic.IEnumerable{System.Double})
  - SearchAThing.Sci.Ext.ModelSpace(netDxf.DxfDocument)
  - SearchAThing.Sci.Ext.NormalizeAngle(System.Double,System.Double,System.Double)
  - SearchAThing.Sci.Ext.Normalized(System.Numerics.Vector3)
  - SearchAThing.Sci.Ext.Normalized(System.Numerics.Vector4)
  - SearchAThing.Sci.Ext.Offset(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  - SearchAThing.Sci.Ext.Offset(netDxf.Entities.Polyline2D,System.Double,SearchAThing.Sci.Vector3D,System.Double)
  - SearchAThing.Sci.Ext.OffsetGeoms(netDxf.Entities.Polyline2D,System.Double,SearchAThing.Sci.Vector3D,System.Double)
  - SearchAThing.Sci.Ext.Points(netDxf.Entities.EntityObject)
  - SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D})
  - SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Boolean)
  - SearchAThing.Sci.Ext.PolygonSegments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Boolean)
  - SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry})
  - SearchAThing.Sci.Ext.QCadScript(netDxf.Entities.Polyline2D,System.Double)
  - SearchAThing.Sci.Ext.RadTol(System.Double,System.Double)
  - SearchAThing.Sci.Ext.RepeatFirstAtEnd(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IList{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.Segments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  - SearchAThing.Sci.Ext.Set(netDxf.Entities.Hatch,SearchAThing.Sci.Ext.HatchSetterDelegate)
  - SearchAThing.Sci.Ext.SetColor(netDxf.Entities.EntityObject,netDxf.AciColor)
  - SearchAThing.Sci.Ext.SetLayer(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},netDxf.Tables.Layer)
  - SearchAThing.Sci.Ext.SetLayer(netDxf.Entities.EntityObject,netDxf.Tables.Layer)
  - SearchAThing.Sci.Ext.SetX(System.Numerics.Vector3,System.Single)
  - SearchAThing.Sci.Ext.SetY(System.Numerics.Vector3,System.Single)
  - SearchAThing.Sci.Ext.SetZ(System.Numerics.Vector3,System.Single)
  - SearchAThing.Sci.Ext.Similarity(System.Double,System.Double)
  - SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.CoordinateSystem3D)
  - SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Ext.SortCCW``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.CoordinateSystem3D)
  - SearchAThing.Sci.Ext.SortCCW``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Ext.Sqrt(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Ext.StatNfos(System.Collections.Generic.IEnumerable{System.Double})
  - SearchAThing.Sci.Ext.StringRepresentation(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.Sum(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.TakeUntilAdjacent(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean)
  - SearchAThing.Sci.Ext.Tessellate(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.Thin(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean,System.Boolean)
  - SearchAThing.Sci.Ext.ToArc3D(netDxf.Entities.Arc,SearchAThing.Sci.Vector3D,System.Double)
  - SearchAThing.Sci.Ext.ToCSV(System.Collections.Generic.IEnumerable{System.Object})
  - SearchAThing.Sci.Ext.ToCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D})
  - SearchAThing.Sci.Ext.ToCircle3D(netDxf.Entities.Circle)
  - SearchAThing.Sci.Ext.ToCoordSequence(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.ToCoordString2D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.ToCoordString3D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.ToDVector3(System.Numerics.Vector3)
  - SearchAThing.Sci.Ext.ToDeg(System.Numerics.Vector3)
  - SearchAThing.Sci.Ext.ToDxfLine(SearchAThing.Sci.Line3D)
  - SearchAThing.Sci.Ext.ToEulerAngles(System.Numerics.Matrix4x4)
  - SearchAThing.Sci.Ext.ToFace(SearchAThing.Sci.Loop)
  - SearchAThing.Sci.Ext.ToFace(System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2D},System.Double)
  - SearchAThing.Sci.Ext.ToGeometries(netDxf.Entities.Polyline2D,System.Double)
  - SearchAThing.Sci.Ext.ToHatch(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},netDxf.Entities.HatchPattern,System.Boolean)
  - SearchAThing.Sci.Ext.ToHatch(netDxf.Entities.Polyline2D,netDxf.Entities.HatchPattern,System.Boolean)
  - SearchAThing.Sci.Ext.ToLine3D(netDxf.Entities.Line)
  - SearchAThing.Sci.Ext.ToLoop(netDxf.Entities.Polyline2D,System.Double)
  - SearchAThing.Sci.Ext.ToLwPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  - SearchAThing.Sci.Ext.ToNVector3(netDxf.Vector3)
  - SearchAThing.Sci.Ext.ToPlane(netDxf.Entities.Polyline2D)
  - SearchAThing.Sci.Ext.ToPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  - SearchAThing.Sci.Ext.ToRad(System.Numerics.Vector3)
  - SearchAThing.Sci.Ext.ToTriangle3D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.Sci.Ext.ToVector2(System.Numerics.Vector4)
  - SearchAThing.Sci.Ext.ToVector3(System.Numerics.Vector4)
  - SearchAThing.Sci.Ext.ToVector3D(System.Numerics.Vector3)
  - SearchAThing.Sci.Ext.ToVector3D(System.Numerics.Vector4)
  - SearchAThing.Sci.Ext.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  - SearchAThing.Sci.Ext.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)
  - SearchAThing.Sci.Ext.Union(System.Collections.Generic.IEnumerable{SearchAThing.Sci.BBox3D})
  - SearchAThing.Sci.Ext.Vector3DCoords(netDxf.Entities.Polyline2D)
  - SearchAThing.Sci.Ext.Vector3DCoords(netDxf.Entities.Polyline3D)
  - SearchAThing.Sci.Ext.Vertexes(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  - SearchAThing.Sci.Ext.WeightedDistribution(System.Collections.Generic.IEnumerable{System.Double},System.Int32)
  - SearchAThing.Sci.Ext.XYArea(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  - SearchAThing.Sci.Ext.XYClosedPolys(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Int32)
  - SearchAThing.Sci.Ext.XYSignedArea(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  - SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  langs:
  - csharp
  - vb
  name: Ext
  nameWithType: Ext
  fullName: SearchAThing.Sci.Ext
  type: Class
  source:
    remote:
      path: src/sci/Vector4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Ext
    path: src/sci/Vector4Ext.cs
    startLine: 2
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: netcore-sci extension methods
  example: []
  syntax:
    content: public static class Ext
    content.vb: Public Module Ext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: SearchAThing.Sci.Ext.RadTol(System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Ext.RadTol(System.Double,System.Double)
  id: RadTol(System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: RadTol(double, double)
  nameWithType: Ext.RadTol(double, double)
  fullName: SearchAThing.Sci.Ext.RadTol(double, double)
  type: Method
  source:
    remote:
      path: src/sci/Arc3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: RadTol
    path: src/sci/Arc3D.cs
    startLine: 1008
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: compute angle rad tolerance by given arc length tolerance as (lenTol / radius)
  example: []
  syntax:
    content: public static double RadTol(this double lenTol, double radius)
    parameters:
    - id: lenTol
      type: System.Double
      description: length tolerance on the arc
    - id: radius
      type: System.Double
      description: radius of the arc
    return:
      type: System.Double
    content.vb: Public Shared Function RadTol(lenTol As Double, radius As Double) As Double
  overload: SearchAThing.Sci.Ext.RadTol*
  nameWithType.vb: Ext.RadTol(Double, Double)
  fullName.vb: SearchAThing.Sci.Ext.RadTol(Double, Double)
  name.vb: RadTol(Double, Double)
- uid: SearchAThing.Sci.Ext.ToArc3D(netDxf.Entities.Arc,SearchAThing.Sci.Vector3D,System.Double)
  commentId: M:SearchAThing.Sci.Ext.ToArc3D(netDxf.Entities.Arc,SearchAThing.Sci.Vector3D,System.Double)
  id: ToArc3D(netDxf.Entities.Arc,SearchAThing.Sci.Vector3D,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToArc3D(Arc, Vector3D?, double)
  nameWithType: Ext.ToArc3D(Arc, Vector3D?, double)
  fullName: SearchAThing.Sci.Ext.ToArc3D(netDxf.Entities.Arc, SearchAThing.Sci.Vector3D?, double)
  type: Method
  source:
    remote:
      path: src/sci/Arc3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToArc3D
    path: src/sci/Arc3D.cs
    startLine: 1016
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: construct arc3 from given dxf arc
  example: []
  syntax:
    content: public static Arc3D ToArc3D(this Arc dxf_arc, Vector3D? start_vertex = null, double start_vertex_tol = 0)
    parameters:
    - id: dxf_arc
      type: netDxf.Entities.Arc
      description: ''
    - id: start_vertex
      type: SearchAThing.Sci.Vector3D
      description: optional start vertex allow to inject edge sense (used when explode from lwpolyline)
    - id: start_vertex_tol
      type: System.Double
      description: when use start_vertex argument this is the tol for equality test
    return:
      type: SearchAThing.Sci.Arc3D
    content.vb: Public Shared Function ToArc3D(dxf_arc As Arc, start_vertex As Vector3D = Nothing, start_vertex_tol As Double = 0) As Arc3D
  overload: SearchAThing.Sci.Ext.ToArc3D*
  nameWithType.vb: Ext.ToArc3D(Arc, Vector3D, Double)
  fullName.vb: SearchAThing.Sci.Ext.ToArc3D(netDxf.Entities.Arc, SearchAThing.Sci.Vector3D, Double)
  name.vb: ToArc3D(Arc, Vector3D, Double)
- uid: SearchAThing.Sci.Ext.AngleInRange(System.Double,System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Ext.AngleInRange(System.Double,System.Double,System.Double,System.Double)
  id: AngleInRange(System.Double,System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: AngleInRange(double, double, double, double)
  nameWithType: Ext.AngleInRange(double, double, double, double)
  fullName: SearchAThing.Sci.Ext.AngleInRange(double, double, double, double)
  type: Method
  source:
    remote:
      path: src/sci/Arc3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: AngleInRange
    path: src/sci/Arc3D.cs
    startLine: 1041
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    states if given angle is contained in from, to angle range;

    multiturn angles are supported because test will normalize to [0,2pi) automatically.
  example: []
  syntax:
    content: public static bool AngleInRange(this double pt_angle, double angle_from, double angle_to, double radTol = 1E-10)
    parameters:
    - id: pt_angle
      type: System.Double
      description: angle(rad) to test
    - id: angle_from
      type: System.Double
      description: angle(rad) from
    - id: angle_to
      type: System.Double
      description: angle(rad) to
    - id: radTol
      type: System.Double
      description: optional rad tolerance
    return:
      type: System.Boolean
    content.vb: Public Shared Function AngleInRange(pt_angle As Double, angle_from As Double, angle_to As Double, radTol As Double = 1E-10) As Boolean
  overload: SearchAThing.Sci.Ext.AngleInRange*
  nameWithType.vb: Ext.AngleInRange(Double, Double, Double, Double)
  fullName.vb: SearchAThing.Sci.Ext.AngleInRange(Double, Double, Double, Double)
  name.vb: AngleInRange(Double, Double, Double, Double)
- uid: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: BBox(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: BBox(IEnumerable<Vector3D>)
  nameWithType: Ext.BBox(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/BBox3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: BBox
    path: src/sci/BBox3D.cs
    startLine: 484
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: construct a bbox from given enumerable set of points
  example: []
  syntax:
    content: public static BBox3D BBox(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: points to build bbox
    return:
      type: SearchAThing.Sci.BBox3D
      description: bbox from given enumerable set of points
    content.vb: Public Shared Function BBox(pts As IEnumerable(Of Vector3D)) As BBox3D
  overload: SearchAThing.Sci.Ext.BBox*
  nameWithType.vb: Ext.BBox(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: BBox(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.BBox(netDxf.Entities.EntityObject,System.Double)
  commentId: M:SearchAThing.Sci.Ext.BBox(netDxf.Entities.EntityObject,System.Double)
  id: BBox(netDxf.Entities.EntityObject,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: BBox(EntityObject, double)
  nameWithType: Ext.BBox(EntityObject, double)
  fullName: SearchAThing.Sci.Ext.BBox(netDxf.Entities.EntityObject, double)
  type: Method
  source:
    remote:
      path: src/sci/BBox3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: BBox
    path: src/sci/BBox3D.cs
    startLine: 497
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: construct a bbox from given dxf EntityObject
  remarks: >-
    Currently Text, MText width not evaluated ( only insertion point is considered ).

    Arc is considered only From, MidPoint, To.

    Circle is considered only 4 points on circumference.
  example: []
  syntax:
    content: public static BBox3D BBox(this EntityObject eo, double tol)
    parameters:
    - id: eo
      type: netDxf.Entities.EntityObject
      description: dxf entity object
    - id: tol
      type: System.Double
      description: tolerance for comparision length tests
    return:
      type: SearchAThing.Sci.BBox3D
      description: new bbox that contains given dxf entity object
    content.vb: Public Shared Function BBox(eo As EntityObject, tol As Double) As BBox3D
  overload: SearchAThing.Sci.Ext.BBox*
  nameWithType.vb: Ext.BBox(EntityObject, Double)
  fullName.vb: SearchAThing.Sci.Ext.BBox(netDxf.Entities.EntityObject, Double)
  name.vb: BBox(EntityObject, Double)
- uid: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},System.Double)
  commentId: M:SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},System.Double)
  id: BBox(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: BBox(IEnumerable<EntityObject>, double)
  nameWithType: Ext.BBox(IEnumerable<EntityObject>, double)
  fullName: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable<netDxf.Entities.EntityObject>, double)
  type: Method
  source:
    remote:
      path: src/sci/BBox3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: BBox
    path: src/sci/BBox3D.cs
    startLine: 542
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: construct a bbox from given set of dxf entity objects
  example: []
  syntax:
    content: public static BBox3D BBox(this IEnumerable<EntityObject> ents, double tol)
    parameters:
    - id: ents
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
      description: enumerable of dxf entity object
    - id: tol
      type: System.Double
      description: tolerance for comparision length tests
    return:
      type: SearchAThing.Sci.BBox3D
      description: new bbox containing given set of dxf entity objects
    content.vb: Public Shared Function BBox(ents As IEnumerable(Of EntityObject), tol As Double) As BBox3D
  overload: SearchAThing.Sci.Ext.BBox*
  nameWithType.vb: Ext.BBox(IEnumerable(Of EntityObject), Double)
  fullName.vb: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable(Of netDxf.Entities.EntityObject), Double)
  name.vb: BBox(IEnumerable(Of EntityObject), Double)
- uid: SearchAThing.Sci.Ext.Points(netDxf.Entities.EntityObject)
  commentId: M:SearchAThing.Sci.Ext.Points(netDxf.Entities.EntityObject)
  id: Points(netDxf.Entities.EntityObject)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Points(EntityObject)
  nameWithType: Ext.Points(EntityObject)
  fullName: SearchAThing.Sci.Ext.Points(netDxf.Entities.EntityObject)
  type: Method
  source:
    remote:
      path: src/sci/BBox3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Points
    path: src/sci/BBox3D.cs
    startLine: 554
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static IEnumerable<Vector3D> Points(this EntityObject eo)
    parameters:
    - id: eo
      type: netDxf.Entities.EntityObject
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Points(eo As EntityObject) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.Points*
- uid: SearchAThing.Sci.Ext.Union(System.Collections.Generic.IEnumerable{SearchAThing.Sci.BBox3D})
  commentId: M:SearchAThing.Sci.Ext.Union(System.Collections.Generic.IEnumerable{SearchAThing.Sci.BBox3D})
  id: Union(System.Collections.Generic.IEnumerable{SearchAThing.Sci.BBox3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Union(IEnumerable<BBox3D>)
  nameWithType: Ext.Union(IEnumerable<BBox3D>)
  fullName: SearchAThing.Sci.Ext.Union(System.Collections.Generic.IEnumerable<SearchAThing.Sci.BBox3D>)
  type: Method
  source:
    remote:
      path: src/sci/BBox3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Union
    path: src/sci/BBox3D.cs
    startLine: 652
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: union of bboxes
  example: []
  syntax:
    content: public static BBox3D Union(this IEnumerable<BBox3D> bboxes)
    parameters:
    - id: bboxes
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.BBox3D}
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: Public Shared Function Union(bboxes As IEnumerable(Of BBox3D)) As BBox3D
  overload: SearchAThing.Sci.Ext.Union*
  nameWithType.vb: Ext.Union(IEnumerable(Of BBox3D))
  fullName.vb: SearchAThing.Sci.Ext.Union(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.BBox3D))
  name.vb: Union(IEnumerable(Of BBox3D))
- uid: SearchAThing.Sci.Ext.CircleBy3Points(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.CircleBy3Points(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: CircleBy3Points(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CircleBy3Points(IEnumerable<Vector3D>)
  nameWithType: Ext.CircleBy3Points(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.CircleBy3Points(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Circle3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CircleBy3Points
    path: src/sci/Circle3D.cs
    startLine: 266
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: build circle3d by given set of 3 points
  example: []
  syntax:
    content: public static Circle3D CircleBy3Points(this IEnumerable<Vector3D> _pts)
    parameters:
    - id: _pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: SearchAThing.Sci.Circle3D
    content.vb: Public Shared Function CircleBy3Points(_pts As IEnumerable(Of Vector3D)) As Circle3D
  overload: SearchAThing.Sci.Ext.CircleBy3Points*
  nameWithType.vb: Ext.CircleBy3Points(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.CircleBy3Points(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: CircleBy3Points(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.ToCircle3D(netDxf.Entities.Circle)
  commentId: M:SearchAThing.Sci.Ext.ToCircle3D(netDxf.Entities.Circle)
  id: ToCircle3D(netDxf.Entities.Circle)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToCircle3D(Circle)
  nameWithType: Ext.ToCircle3D(Circle)
  fullName: SearchAThing.Sci.Ext.ToCircle3D(netDxf.Entities.Circle)
  type: Method
  source:
    remote:
      path: src/sci/Circle3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToCircle3D
    path: src/sci/Circle3D.cs
    startLine: 277
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: build circle3d by provided dxf circle
  example: []
  syntax:
    content: public static Circle3D ToCircle3D(this Circle dxf_circle)
    parameters:
    - id: dxf_circle
      type: netDxf.Entities.Circle
    return:
      type: SearchAThing.Sci.Circle3D
    content.vb: Public Shared Function ToCircle3D(dxf_circle As Circle) As Circle3D
  overload: SearchAThing.Sci.Ext.ToCircle3D*
- uid: SearchAThing.Sci.Ext.EqualsTol(netDxf.Vector3,System.Double,netDxf.Vector3)
  commentId: M:SearchAThing.Sci.Ext.EqualsTol(netDxf.Vector3,System.Double,netDxf.Vector3)
  id: EqualsTol(netDxf.Vector3,System.Double,netDxf.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: EqualsTol(Vector3, double, Vector3)
  nameWithType: Ext.EqualsTol(Vector3, double, Vector3)
  fullName: SearchAThing.Sci.Ext.EqualsTol(netDxf.Vector3, double, netDxf.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: EqualsTol
    path: src/sci/DxfKit.cs
    startLine: 101
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static bool EqualsTol(this Vector3 v, double tol, Vector3 other)
    parameters:
    - id: v
      type: netDxf.Vector3
    - id: tol
      type: System.Double
    - id: other
      type: netDxf.Vector3
    return:
      type: System.Boolean
    content.vb: Public Shared Function EqualsTol(v As Vector3, tol As Double, other As Vector3) As Boolean
  overload: SearchAThing.Sci.Ext.EqualsTol*
  nameWithType.vb: Ext.EqualsTol(Vector3, Double, Vector3)
  fullName.vb: SearchAThing.Sci.Ext.EqualsTol(netDxf.Vector3, Double, netDxf.Vector3)
  name.vb: EqualsTol(Vector3, Double, Vector3)
- uid: SearchAThing.Sci.Ext.SetLayer(netDxf.Entities.EntityObject,netDxf.Tables.Layer)
  commentId: M:SearchAThing.Sci.Ext.SetLayer(netDxf.Entities.EntityObject,netDxf.Tables.Layer)
  id: SetLayer(netDxf.Entities.EntityObject,netDxf.Tables.Layer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SetLayer(EntityObject, Layer)
  nameWithType: Ext.SetLayer(EntityObject, Layer)
  fullName: SearchAThing.Sci.Ext.SetLayer(netDxf.Entities.EntityObject, netDxf.Tables.Layer)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SetLayer
    path: src/sci/DxfKit.cs
    startLine: 106
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static EntityObject SetLayer(this EntityObject eo, Layer layer)
    parameters:
    - id: eo
      type: netDxf.Entities.EntityObject
    - id: layer
      type: netDxf.Tables.Layer
    return:
      type: netDxf.Entities.EntityObject
    content.vb: Public Shared Function SetLayer(eo As EntityObject, layer As Layer) As EntityObject
  overload: SearchAThing.Sci.Ext.SetLayer*
- uid: SearchAThing.Sci.Ext.MidPoint(netDxf.Entities.Polyline2D)
  commentId: M:SearchAThing.Sci.Ext.MidPoint(netDxf.Entities.Polyline2D)
  id: MidPoint(netDxf.Entities.Polyline2D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: MidPoint(Polyline2D)
  nameWithType: Ext.MidPoint(Polyline2D)
  fullName: SearchAThing.Sci.Ext.MidPoint(netDxf.Entities.Polyline2D)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: MidPoint
    path: src/sci/DxfKit.cs
    startLine: 116
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    get the midpoint of the 3d polyline

    distance is computed over all segments
  example: []
  syntax:
    content: public static Vector3D? MidPoint(this Polyline2D poly)
    parameters:
    - id: poly
      type: netDxf.Entities.Polyline2D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Function MidPoint(poly As Polyline2D) As Vector3D
  overload: SearchAThing.Sci.Ext.MidPoint*
- uid: SearchAThing.Sci.Ext.Explode(netDxf.Entities.Insert)
  commentId: M:SearchAThing.Sci.Ext.Explode(netDxf.Entities.Insert)
  id: Explode(netDxf.Entities.Insert)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Explode(Insert)
  nameWithType: Ext.Explode(Insert)
  fullName: SearchAThing.Sci.Ext.Explode(netDxf.Entities.Insert)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Explode
    path: src/sci/DxfKit.cs
    startLine: 142
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static IEnumerable<EntityObject> Explode(this Insert ins)
    parameters:
    - id: ins
      type: netDxf.Entities.Insert
    return:
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    content.vb: Public Shared Function Explode(ins As Insert) As IEnumerable(Of EntityObject)
  overload: SearchAThing.Sci.Ext.Explode*
- uid: SearchAThing.Sci.Ext.Vector3DCoords(netDxf.Entities.Polyline3D)
  commentId: M:SearchAThing.Sci.Ext.Vector3DCoords(netDxf.Entities.Polyline3D)
  id: Vector3DCoords(netDxf.Entities.Polyline3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Vector3DCoords(Polyline3D)
  nameWithType: Ext.Vector3DCoords(Polyline3D)
  fullName: SearchAThing.Sci.Ext.Vector3DCoords(netDxf.Entities.Polyline3D)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Vector3DCoords
    path: src/sci/DxfKit.cs
    startLine: 174
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: enumerate as Vector3D given dxf polyline vertexes
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Vector3DCoords(this Polyline3D pl)
    parameters:
    - id: pl
      type: netDxf.Entities.Polyline3D
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Vector3DCoords(pl As Polyline3D) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.Vector3DCoords*
- uid: SearchAThing.Sci.Ext.Vector3DCoords(netDxf.Entities.Polyline2D)
  commentId: M:SearchAThing.Sci.Ext.Vector3DCoords(netDxf.Entities.Polyline2D)
  id: Vector3DCoords(netDxf.Entities.Polyline2D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Vector3DCoords(Polyline2D)
  nameWithType: Ext.Vector3DCoords(Polyline2D)
  fullName: SearchAThing.Sci.Ext.Vector3DCoords(netDxf.Entities.Polyline2D)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Vector3DCoords
    path: src/sci/DxfKit.cs
    startLine: 180
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: enumerate as Vector3D given dxf lwpolyline vertexes
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Vector3DCoords(this Polyline2D lwp)
    parameters:
    - id: lwp
      type: netDxf.Entities.Polyline2D
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Vector3DCoords(lwp As Polyline2D) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.Vector3DCoords*
- uid: SearchAThing.Sci.Ext.RepeatFirstAtEnd(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.RepeatFirstAtEnd(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: RepeatFirstAtEnd(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: RepeatFirstAtEnd(IEnumerable<Vector3D>, double)
  nameWithType: Ext.RepeatFirstAtEnd(IEnumerable<Vector3D>, double)
  fullName: SearchAThing.Sci.Ext.RepeatFirstAtEnd(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: RepeatFirstAtEnd
    path: src/sci/DxfKit.cs
    startLine: 197
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    given points a,b,c it will return a,b,c,a ( first is repeated at end )

    it avoid to repeat first at end when latest point already equals the first one
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> RepeatFirstAtEnd(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function RepeatFirstAtEnd(pts As IEnumerable(Of Vector3D), tol As Double) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.RepeatFirstAtEnd*
  nameWithType.vb: Ext.RepeatFirstAtEnd(IEnumerable(Of Vector3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.RepeatFirstAtEnd(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double)
  name.vb: RepeatFirstAtEnd(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.Sci.Ext.CoordTransform(netDxf.DxfDocument,System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.CoordTransform(netDxf.DxfDocument,System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D})
  id: CoordTransform(netDxf.DxfDocument,System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CoordTransform(DxfDocument, Func<Vector3D, Vector3D>)
  nameWithType: Ext.CoordTransform(DxfDocument, Func<Vector3D, Vector3D>)
  fullName: SearchAThing.Sci.Ext.CoordTransform(netDxf.DxfDocument, System.Func<SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CoordTransform
    path: src/sci/DxfKit.cs
    startLine: 213
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static IEnumerable<EntityObject> CoordTransform(this DxfDocument dxf, Func<Vector3D, Vector3D> transform)
    parameters:
    - id: dxf
      type: netDxf.DxfDocument
    - id: transform
      type: System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D}
    return:
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    content.vb: Public Shared Function CoordTransform(dxf As DxfDocument, transform As Func(Of Vector3D, Vector3D)) As IEnumerable(Of EntityObject)
  overload: SearchAThing.Sci.Ext.CoordTransform*
  nameWithType.vb: Ext.CoordTransform(DxfDocument, Func(Of Vector3D, Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.CoordTransform(netDxf.DxfDocument, System.Func(Of SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D))
  name.vb: CoordTransform(DxfDocument, Func(Of Vector3D, Vector3D))
- uid: SearchAThing.Sci.Ext.CoordTransform(netDxf.Entities.EntityObject,System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Ext.CoordTransform(netDxf.Entities.EntityObject,System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  id: CoordTransform(netDxf.Entities.EntityObject,System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CoordTransform(EntityObject, Func<Vector3D, Vector3D>, Vector3D?)
  nameWithType: Ext.CoordTransform(EntityObject, Func<Vector3D, Vector3D>, Vector3D?)
  fullName: SearchAThing.Sci.Ext.CoordTransform(netDxf.Entities.EntityObject, System.Func<SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D>, SearchAThing.Sci.Vector3D?)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CoordTransform
    path: src/sci/DxfKit.cs
    startLine: 250
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: build a clone of the given entity with coord transformed accordingly given function.
  example: []
  syntax:
    content: public static EntityObject CoordTransform(this EntityObject eo, Func<Vector3D, Vector3D> transform, Vector3D? origin = null)
    parameters:
    - id: eo
      type: netDxf.Entities.EntityObject
    - id: transform
      type: System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D}
    - id: origin
      type: SearchAThing.Sci.Vector3D
    return:
      type: netDxf.Entities.EntityObject
    content.vb: Public Shared Function CoordTransform(eo As EntityObject, transform As Func(Of Vector3D, Vector3D), origin As Vector3D = Nothing) As EntityObject
  overload: SearchAThing.Sci.Ext.CoordTransform*
  nameWithType.vb: Ext.CoordTransform(EntityObject, Func(Of Vector3D, Vector3D), Vector3D)
  fullName.vb: SearchAThing.Sci.Ext.CoordTransform(netDxf.Entities.EntityObject, System.Func(Of SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D), SearchAThing.Sci.Vector3D)
  name.vb: CoordTransform(EntityObject, Func(Of Vector3D, Vector3D), Vector3D)
- uid: SearchAThing.Sci.Ext.AddEntity(netDxf.DxfObject,netDxf.Entities.EntityObject,netDxf.Tables.Layer)
  commentId: M:SearchAThing.Sci.Ext.AddEntity(netDxf.DxfObject,netDxf.Entities.EntityObject,netDxf.Tables.Layer)
  id: AddEntity(netDxf.DxfObject,netDxf.Entities.EntityObject,netDxf.Tables.Layer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: AddEntity(DxfObject, EntityObject, Layer?)
  nameWithType: Ext.AddEntity(DxfObject, EntityObject, Layer?)
  fullName: SearchAThing.Sci.Ext.AddEntity(netDxf.DxfObject, netDxf.Entities.EntityObject, netDxf.Tables.Layer?)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: AddEntity
    path: src/sci/DxfKit.cs
    startLine: 324
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    add entity to the given dxf object ( it can be Dxfdocument or Block )

    optionally set layer
  example: []
  syntax:
    content: public static EntityObject AddEntity(this DxfObject dxfObj, EntityObject eo, Layer? layer = null)
    parameters:
    - id: dxfObj
      type: netDxf.DxfObject
    - id: eo
      type: netDxf.Entities.EntityObject
    - id: layer
      type: netDxf.Tables.Layer
    return:
      type: netDxf.Entities.EntityObject
    content.vb: Public Shared Function AddEntity(dxfObj As DxfObject, eo As EntityObject, layer As Layer = Nothing) As EntityObject
  overload: SearchAThing.Sci.Ext.AddEntity*
  nameWithType.vb: Ext.AddEntity(DxfObject, EntityObject, Layer)
  fullName.vb: SearchAThing.Sci.Ext.AddEntity(netDxf.DxfObject, netDxf.Entities.EntityObject, netDxf.Tables.Layer)
  name.vb: AddEntity(DxfObject, EntityObject, Layer)
- uid: SearchAThing.Sci.Ext.AddEntities(netDxf.DxfObject,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},netDxf.Tables.Layer)
  commentId: M:SearchAThing.Sci.Ext.AddEntities(netDxf.DxfObject,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},netDxf.Tables.Layer)
  id: AddEntities(netDxf.DxfObject,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},netDxf.Tables.Layer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: AddEntities(DxfObject, IEnumerable<EntityObject>, Layer?)
  nameWithType: Ext.AddEntities(DxfObject, IEnumerable<EntityObject>, Layer?)
  fullName: SearchAThing.Sci.Ext.AddEntities(netDxf.DxfObject, System.Collections.Generic.IEnumerable<netDxf.Entities.EntityObject>, netDxf.Tables.Layer?)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: AddEntities
    path: src/sci/DxfKit.cs
    startLine: 340
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    add entity to the given dxf object ( it can be Dxfdocument or Block )

    optionally set layer
  example: []
  syntax:
    content: public static void AddEntities(this DxfObject dxfObj, IEnumerable<EntityObject> ents, Layer? layer = null)
    parameters:
    - id: dxfObj
      type: netDxf.DxfObject
    - id: ents
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    - id: layer
      type: netDxf.Tables.Layer
    content.vb: Public Shared Sub AddEntities(dxfObj As DxfObject, ents As IEnumerable(Of EntityObject), layer As Layer = Nothing)
  overload: SearchAThing.Sci.Ext.AddEntities*
  nameWithType.vb: Ext.AddEntities(DxfObject, IEnumerable(Of EntityObject), Layer)
  fullName.vb: SearchAThing.Sci.Ext.AddEntities(netDxf.DxfObject, System.Collections.Generic.IEnumerable(Of netDxf.Entities.EntityObject), netDxf.Tables.Layer)
  name.vb: AddEntities(DxfObject, IEnumerable(Of EntityObject), Layer)
- uid: SearchAThing.Sci.Ext.SetLayer(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},netDxf.Tables.Layer)
  commentId: M:SearchAThing.Sci.Ext.SetLayer(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},netDxf.Tables.Layer)
  id: SetLayer(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},netDxf.Tables.Layer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SetLayer(IEnumerable<EntityObject>, Layer)
  nameWithType: Ext.SetLayer(IEnumerable<EntityObject>, Layer)
  fullName: SearchAThing.Sci.Ext.SetLayer(System.Collections.Generic.IEnumerable<netDxf.Entities.EntityObject>, netDxf.Tables.Layer)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SetLayer
    path: src/sci/DxfKit.cs
    startLine: 348
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: Set layer of given set of dxf entities
  example: []
  syntax:
    content: public static IEnumerable<EntityObject> SetLayer(this IEnumerable<EntityObject> ents, Layer layer)
    parameters:
    - id: ents
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    - id: layer
      type: netDxf.Tables.Layer
    return:
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    content.vb: Public Shared Function SetLayer(ents As IEnumerable(Of EntityObject), layer As Layer) As IEnumerable(Of EntityObject)
  overload: SearchAThing.Sci.Ext.SetLayer*
  nameWithType.vb: Ext.SetLayer(IEnumerable(Of EntityObject), Layer)
  fullName.vb: SearchAThing.Sci.Ext.SetLayer(System.Collections.Generic.IEnumerable(Of netDxf.Entities.EntityObject), netDxf.Tables.Layer)
  name.vb: SetLayer(IEnumerable(Of EntityObject), Layer)
- uid: SearchAThing.Sci.Ext.DrawStar(netDxf.DxfObject,SearchAThing.Sci.Vector3D,System.Double,netDxf.Tables.Layer)
  commentId: M:SearchAThing.Sci.Ext.DrawStar(netDxf.DxfObject,SearchAThing.Sci.Vector3D,System.Double,netDxf.Tables.Layer)
  id: DrawStar(netDxf.DxfObject,SearchAThing.Sci.Vector3D,System.Double,netDxf.Tables.Layer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: DrawStar(DxfObject, Vector3D, double, Layer?)
  nameWithType: Ext.DrawStar(DxfObject, Vector3D, double, Layer?)
  fullName: SearchAThing.Sci.Ext.DrawStar(netDxf.DxfObject, SearchAThing.Sci.Vector3D, double, netDxf.Tables.Layer?)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: DrawStar
    path: src/sci/DxfKit.cs
    startLine: 357
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: Creates and add dxf entities for a 3 axis of given length centered in given center point.
  example: []
  syntax:
    content: public static IEnumerable<EntityObject> DrawStar(this DxfObject dxfObj, Vector3D center, double L, Layer? layer = null)
    parameters:
    - id: dxfObj
      type: netDxf.DxfObject
    - id: center
      type: SearchAThing.Sci.Vector3D
    - id: L
      type: System.Double
    - id: layer
      type: netDxf.Tables.Layer
    return:
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    content.vb: Public Shared Function DrawStar(dxfObj As DxfObject, center As Vector3D, L As Double, layer As Layer = Nothing) As IEnumerable(Of EntityObject)
  overload: SearchAThing.Sci.Ext.DrawStar*
  nameWithType.vb: Ext.DrawStar(DxfObject, Vector3D, Double, Layer)
  fullName.vb: SearchAThing.Sci.Ext.DrawStar(netDxf.DxfObject, SearchAThing.Sci.Vector3D, Double, netDxf.Tables.Layer)
  name.vb: DrawStar(DxfObject, Vector3D, Double, Layer)
- uid: SearchAThing.Sci.Ext.DrawCube(netDxf.DxfObject,SearchAThing.Sci.Vector3D,System.Double,netDxf.Tables.Layer)
  commentId: M:SearchAThing.Sci.Ext.DrawCube(netDxf.DxfObject,SearchAThing.Sci.Vector3D,System.Double,netDxf.Tables.Layer)
  id: DrawCube(netDxf.DxfObject,SearchAThing.Sci.Vector3D,System.Double,netDxf.Tables.Layer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: DrawCube(DxfObject, Vector3D, double, Layer?)
  nameWithType: Ext.DrawCube(DxfObject, Vector3D, double, Layer?)
  fullName: SearchAThing.Sci.Ext.DrawCube(netDxf.DxfObject, SearchAThing.Sci.Vector3D, double, netDxf.Tables.Layer?)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: DrawCube
    path: src/sci/DxfKit.cs
    startLine: 369
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: Creates and add dxf entities for a 6 faces of a cube
  example: []
  syntax:
    content: public static IEnumerable<EntityObject> DrawCube(this DxfObject dxfObj, Vector3D center, double L, Layer? layer = null)
    parameters:
    - id: dxfObj
      type: netDxf.DxfObject
    - id: center
      type: SearchAThing.Sci.Vector3D
    - id: L
      type: System.Double
    - id: layer
      type: netDxf.Tables.Layer
    return:
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    content.vb: Public Shared Function DrawCube(dxfObj As DxfObject, center As Vector3D, L As Double, layer As Layer = Nothing) As IEnumerable(Of EntityObject)
  overload: SearchAThing.Sci.Ext.DrawCube*
  nameWithType.vb: Ext.DrawCube(DxfObject, Vector3D, Double, Layer)
  fullName.vb: SearchAThing.Sci.Ext.DrawCube(netDxf.DxfObject, SearchAThing.Sci.Vector3D, Double, netDxf.Tables.Layer)
  name.vb: DrawCube(DxfObject, Vector3D, Double, Layer)
- uid: SearchAThing.Sci.Ext.DrawCuboid(netDxf.DxfObject,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,netDxf.Tables.Layer)
  commentId: M:SearchAThing.Sci.Ext.DrawCuboid(netDxf.DxfObject,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,netDxf.Tables.Layer)
  id: DrawCuboid(netDxf.DxfObject,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,netDxf.Tables.Layer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: DrawCuboid(DxfObject, Vector3D, Vector3D, Layer?)
  nameWithType: Ext.DrawCuboid(DxfObject, Vector3D, Vector3D, Layer?)
  fullName: SearchAThing.Sci.Ext.DrawCuboid(netDxf.DxfObject, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D, netDxf.Tables.Layer?)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: DrawCuboid
    path: src/sci/DxfKit.cs
    startLine: 381
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: Creates and add dxf entities for 6 faces of a cuboid
  example: []
  syntax:
    content: public static IEnumerable<EntityObject> DrawCuboid(this DxfObject dxfObj, Vector3D center, Vector3D size, Layer? layer = null)
    parameters:
    - id: dxfObj
      type: netDxf.DxfObject
    - id: center
      type: SearchAThing.Sci.Vector3D
    - id: size
      type: SearchAThing.Sci.Vector3D
    - id: layer
      type: netDxf.Tables.Layer
    return:
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    content.vb: Public Shared Function DrawCuboid(dxfObj As DxfObject, center As Vector3D, size As Vector3D, layer As Layer = Nothing) As IEnumerable(Of EntityObject)
  overload: SearchAThing.Sci.Ext.DrawCuboid*
  nameWithType.vb: Ext.DrawCuboid(DxfObject, Vector3D, Vector3D, Layer)
  fullName.vb: SearchAThing.Sci.Ext.DrawCuboid(netDxf.DxfObject, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D, netDxf.Tables.Layer)
  name.vb: DrawCuboid(DxfObject, Vector3D, Vector3D, Layer)
- uid: SearchAThing.Sci.Ext.CadScript(netDxf.Entities.Face3D)
  commentId: M:SearchAThing.Sci.Ext.CadScript(netDxf.Entities.Face3D)
  id: CadScript(netDxf.Entities.Face3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CadScript(Face3D)
  nameWithType: Ext.CadScript(Face3D)
  fullName: SearchAThing.Sci.Ext.CadScript(netDxf.Entities.Face3D)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CadScript
    path: src/sci/DxfKit.cs
    startLine: 390
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static string CadScript(this Face3D face)
    parameters:
    - id: face
      type: netDxf.Entities.Face3D
    return:
      type: System.String
    content.vb: Public Shared Function CadScript(face As Face3D) As String
  overload: SearchAThing.Sci.Ext.CadScript*
- uid: SearchAThing.Sci.Ext.AutoZoom(netDxf.DxfDocument,SearchAThing.Sci.BBox3D)
  commentId: M:SearchAThing.Sci.Ext.AutoZoom(netDxf.DxfDocument,SearchAThing.Sci.BBox3D)
  id: AutoZoom(netDxf.DxfDocument,SearchAThing.Sci.BBox3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: AutoZoom(DxfDocument, BBox3D)
  nameWithType: Ext.AutoZoom(DxfDocument, BBox3D)
  fullName: SearchAThing.Sci.Ext.AutoZoom(netDxf.DxfDocument, SearchAThing.Sci.BBox3D)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: AutoZoom
    path: src/sci/DxfKit.cs
    startLine: 411
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: tries to zoom dxf viewport on the given bbox
  example: []
  syntax:
    content: public static void AutoZoom(this DxfDocument dxf, BBox3D bbox)
    parameters:
    - id: dxf
      type: netDxf.DxfDocument
    - id: bbox
      type: SearchAThing.Sci.BBox3D
    content.vb: Public Shared Sub AutoZoom(dxf As DxfDocument, bbox As BBox3D)
  overload: SearchAThing.Sci.Ext.AutoZoom*
- uid: SearchAThing.Sci.Ext.SetColor(netDxf.Entities.EntityObject,netDxf.AciColor)
  commentId: M:SearchAThing.Sci.Ext.SetColor(netDxf.Entities.EntityObject,netDxf.AciColor)
  id: SetColor(netDxf.Entities.EntityObject,netDxf.AciColor)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SetColor(EntityObject, AciColor)
  nameWithType: Ext.SetColor(EntityObject, AciColor)
  fullName: SearchAThing.Sci.Ext.SetColor(netDxf.Entities.EntityObject, netDxf.AciColor)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SetColor
    path: src/sci/DxfKit.cs
    startLine: 419
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static EntityObject SetColor(this EntityObject eo, AciColor color)
    parameters:
    - id: eo
      type: netDxf.Entities.EntityObject
    - id: color
      type: netDxf.AciColor
    return:
      type: netDxf.Entities.EntityObject
    content.vb: Public Shared Function SetColor(eo As EntityObject, color As AciColor) As EntityObject
  overload: SearchAThing.Sci.Ext.SetColor*
- uid: SearchAThing.Sci.Ext.DrawTimeline(netDxf.DxfObject,System.Collections.Generic.List{System.ValueTuple{System.DateTime,System.DateTime}},System.Double,System.Double,System.Double,System.Double,System.Func{System.DateTime,System.String})
  commentId: M:SearchAThing.Sci.Ext.DrawTimeline(netDxf.DxfObject,System.Collections.Generic.List{System.ValueTuple{System.DateTime,System.DateTime}},System.Double,System.Double,System.Double,System.Double,System.Func{System.DateTime,System.String})
  id: DrawTimeline(netDxf.DxfObject,System.Collections.Generic.List{System.ValueTuple{System.DateTime,System.DateTime}},System.Double,System.Double,System.Double,System.Double,System.Func{System.DateTime,System.String})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: DrawTimeline(DxfObject, List<(DateTime from, DateTime to)>, double, double, double, double, Func<DateTime, string>?)
  nameWithType: Ext.DrawTimeline(DxfObject, List<(DateTime from, DateTime to)>, double, double, double, double, Func<DateTime, string>?)
  fullName: SearchAThing.Sci.Ext.DrawTimeline(netDxf.DxfObject, System.Collections.Generic.List<(System.DateTime from, System.DateTime to)>, double, double, double, double, System.Func<System.DateTime, string>?)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: DrawTimeline
    path: src/sci/DxfKit.cs
    startLine: 477
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static IEnumerable<EntityObject> DrawTimeline(this DxfObject dxf, List<(DateTime from, DateTime to)> timeline, double textHeight = 2, double circleRadius = 1.5, double maxWidth = 180, double stopDays = 60, Func<DateTime, string>? dtStr = null)
    parameters:
    - id: dxf
      type: netDxf.DxfObject
    - id: timeline
      type: System.Collections.Generic.List{System.ValueTuple{System.DateTime,System.DateTime}}
    - id: textHeight
      type: System.Double
    - id: circleRadius
      type: System.Double
    - id: maxWidth
      type: System.Double
    - id: stopDays
      type: System.Double
    - id: dtStr
      type: System.Func{System.DateTime,System.String}
    return:
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    content.vb: Public Shared Function DrawTimeline(dxf As DxfObject, timeline As List(Of (from As Date, [to] As Date)), textHeight As Double = 2, circleRadius As Double = 1.5, maxWidth As Double = 180, stopDays As Double = 60, dtStr As Func(Of Date, String) = Nothing) As IEnumerable(Of EntityObject)
  overload: SearchAThing.Sci.Ext.DrawTimeline*
  nameWithType.vb: Ext.DrawTimeline(DxfObject, List(Of (from As Date, to As Date)), Double, Double, Double, Double, Func(Of Date, String))
  fullName.vb: SearchAThing.Sci.Ext.DrawTimeline(netDxf.DxfObject, System.Collections.Generic.List(Of (from As Date, to As Date)), Double, Double, Double, Double, System.Func(Of Date, String))
  name.vb: DrawTimeline(DxfObject, List(Of (from As Date, to As Date)), Double, Double, Double, Double, Func(Of Date, String))
- uid: SearchAThing.Sci.Ext.Set(netDxf.Entities.Hatch,SearchAThing.Sci.Ext.HatchSetterDelegate)
  commentId: M:SearchAThing.Sci.Ext.Set(netDxf.Entities.Hatch,SearchAThing.Sci.Ext.HatchSetterDelegate)
  id: Set(netDxf.Entities.Hatch,SearchAThing.Sci.Ext.HatchSetterDelegate)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Set(Hatch, HatchSetterDelegate)
  nameWithType: Ext.Set(Hatch, Ext.HatchSetterDelegate)
  fullName: SearchAThing.Sci.Ext.Set(netDxf.Entities.Hatch, SearchAThing.Sci.Ext.HatchSetterDelegate)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Set
    path: src/sci/DxfKit.cs
    startLine: 550
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: set hatch and boundary entities with given action
  example: []
  syntax:
    content: public static Hatch Set(this Hatch hatch, Ext.HatchSetterDelegate setter)
    parameters:
    - id: hatch
      type: netDxf.Entities.Hatch
    - id: setter
      type: SearchAThing.Sci.Ext.HatchSetterDelegate
    return:
      type: netDxf.Entities.Hatch
    content.vb: Public Shared Function [Set](hatch As Hatch, setter As Ext.HatchSetterDelegate) As Hatch
  overload: SearchAThing.Sci.Ext.Set*
- uid: SearchAThing.Sci.Ext.BBox3D(netDxf.DxfDocument)
  commentId: M:SearchAThing.Sci.Ext.BBox3D(netDxf.DxfDocument)
  id: BBox3D(netDxf.DxfDocument)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: BBox3D(DxfDocument)
  nameWithType: Ext.BBox3D(DxfDocument)
  fullName: SearchAThing.Sci.Ext.BBox3D(netDxf.DxfDocument)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: BBox3D
    path: src/sci/DxfKit.cs
    startLine: 561
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static BBox3D BBox3D(this DxfDocument dxf)
    parameters:
    - id: dxf
      type: netDxf.DxfDocument
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: Public Shared Function BBox3D(dxf As DxfDocument) As BBox3D
  overload: SearchAThing.Sci.Ext.BBox3D*
- uid: SearchAThing.Sci.Ext.ModelSpace(netDxf.DxfDocument)
  commentId: M:SearchAThing.Sci.Ext.ModelSpace(netDxf.DxfDocument)
  id: ModelSpace(netDxf.DxfDocument)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ModelSpace(DxfDocument)
  nameWithType: Ext.ModelSpace(DxfDocument)
  fullName: SearchAThing.Sci.Ext.ModelSpace(netDxf.DxfDocument)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ModelSpace
    path: src/sci/DxfKit.cs
    startLine: 564
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Block ModelSpace(this DxfDocument dxf)
    parameters:
    - id: dxf
      type: netDxf.DxfDocument
    return:
      type: netDxf.Blocks.Block
    content.vb: Public Shared Function ModelSpace(dxf As DxfDocument) As Block
  overload: SearchAThing.Sci.Ext.ModelSpace*
- uid: SearchAThing.Sci.Ext.Entities(netDxf.DxfDocument)
  commentId: M:SearchAThing.Sci.Ext.Entities(netDxf.DxfDocument)
  id: Entities(netDxf.DxfDocument)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Entities(DxfDocument)
  nameWithType: Ext.Entities(DxfDocument)
  fullName: SearchAThing.Sci.Ext.Entities(netDxf.DxfDocument)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Entities
    path: src/sci/DxfKit.cs
    startLine: 566
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static IEnumerable<EntityObject> Entities(this DxfDocument dxf)
    parameters:
    - id: dxf
      type: netDxf.DxfDocument
    return:
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
    content.vb: Public Shared Function Entities(dxf As DxfDocument) As IEnumerable(Of EntityObject)
  overload: SearchAThing.Sci.Ext.Entities*
- uid: SearchAThing.Sci.Ext.CS(netDxf.Entities.EntityObject)
  commentId: M:SearchAThing.Sci.Ext.CS(netDxf.Entities.EntityObject)
  id: CS(netDxf.Entities.EntityObject)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CS(EntityObject)
  nameWithType: Ext.CS(EntityObject)
  fullName: SearchAThing.Sci.Ext.CS(netDxf.Entities.EntityObject)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CS
    path: src/sci/DxfKit.cs
    startLine: 573
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static CoordinateSystem3D CS(this EntityObject eo)
    parameters:
    - id: eo
      type: netDxf.Entities.EntityObject
    return:
      type: SearchAThing.Sci.CoordinateSystem3D
    content.vb: Public Shared Function CS(eo As EntityObject) As CoordinateSystem3D
  overload: SearchAThing.Sci.Ext.CS*
- uid: SearchAThing.Sci.Ext.OffsetGeoms(netDxf.Entities.Polyline2D,System.Double,SearchAThing.Sci.Vector3D,System.Double)
  commentId: M:SearchAThing.Sci.Ext.OffsetGeoms(netDxf.Entities.Polyline2D,System.Double,SearchAThing.Sci.Vector3D,System.Double)
  id: OffsetGeoms(netDxf.Entities.Polyline2D,System.Double,SearchAThing.Sci.Vector3D,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: OffsetGeoms(Polyline2D, double, Vector3D, double)
  nameWithType: Ext.OffsetGeoms(Polyline2D, double, Vector3D, double)
  fullName: SearchAThing.Sci.Ext.OffsetGeoms(netDxf.Entities.Polyline2D, double, SearchAThing.Sci.Vector3D, double)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: OffsetGeoms
    path: src/sci/DxfKit.cs
    startLine: 603
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: create offseted polygon from this one by offset of given offset amount toward given sideRefPt.
  example: []
  syntax:
    content: public static IEnumerable<Edge> OffsetGeoms(this Polyline2D lwp, double tol, Vector3D sideRefPt, double offset)
    parameters:
    - id: lwp
      type: netDxf.Entities.Polyline2D
      description: this polyline
    - id: tol
      type: System.Double
      description: length tolerance
    - id: sideRefPt
      type: SearchAThing.Sci.Vector3D
      description: offseted polygon will the one on the side nearest to this ref pt. The offseted polygon doesn't need to contains this point, its only used to disambiguate the side choose.
    - id: offset
      type: System.Double
      description: offset amount from this actual polyline toward offseted one.
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
      description: offseted polygon
    content.vb: Public Shared Function OffsetGeoms(lwp As Polyline2D, tol As Double, sideRefPt As Vector3D, offset As Double) As IEnumerable(Of Edge)
  overload: SearchAThing.Sci.Ext.OffsetGeoms*
  nameWithType.vb: Ext.OffsetGeoms(Polyline2D, Double, Vector3D, Double)
  fullName.vb: SearchAThing.Sci.Ext.OffsetGeoms(netDxf.Entities.Polyline2D, Double, SearchAThing.Sci.Vector3D, Double)
  name.vb: OffsetGeoms(Polyline2D, Double, Vector3D, Double)
- uid: SearchAThing.Sci.Ext.Offset(netDxf.Entities.Polyline2D,System.Double,SearchAThing.Sci.Vector3D,System.Double)
  commentId: M:SearchAThing.Sci.Ext.Offset(netDxf.Entities.Polyline2D,System.Double,SearchAThing.Sci.Vector3D,System.Double)
  id: Offset(netDxf.Entities.Polyline2D,System.Double,SearchAThing.Sci.Vector3D,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Offset(Polyline2D, double, Vector3D, double)
  nameWithType: Ext.Offset(Polyline2D, double, Vector3D, double)
  fullName: SearchAThing.Sci.Ext.Offset(netDxf.Entities.Polyline2D, double, SearchAThing.Sci.Vector3D, double)
  type: Method
  source:
    remote:
      path: src/sci/DxfKit.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Offset
    path: src/sci/DxfKit.cs
    startLine: 685
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Polyline2D Offset(this Polyline2D lwp, double tol, Vector3D sideRefPt, double amount)
    parameters:
    - id: lwp
      type: netDxf.Entities.Polyline2D
    - id: tol
      type: System.Double
    - id: sideRefPt
      type: SearchAThing.Sci.Vector3D
    - id: amount
      type: System.Double
    return:
      type: netDxf.Entities.Polyline2D
    content.vb: Public Shared Function Offset(lwp As Polyline2D, tol As Double, sideRefPt As Vector3D, amount As Double) As Polyline2D
  overload: SearchAThing.Sci.Ext.Offset*
  nameWithType.vb: Ext.Offset(Polyline2D, Double, Vector3D, Double)
  fullName.vb: SearchAThing.Sci.Ext.Offset(netDxf.Entities.Polyline2D, Double, SearchAThing.Sci.Vector3D, Double)
  name.vb: Offset(Polyline2D, Double, Vector3D, Double)
- uid: SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Boolean)
  id: QCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: QCadScript(IEnumerable<Edge>, bool)
  nameWithType: Ext.QCadScript(IEnumerable<Edge>, bool)
  fullName: SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Edge>, bool)
  type: Method
  source:
    remote:
      path: src/sci/Edge.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: QCadScript
    path: src/sci/Edge.cs
    startLine: 129
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: qcad script from edge enumerable
  example: []
  syntax:
    content: public static string QCadScript(this IEnumerable<Edge> edges, bool final = true)
    parameters:
    - id: edges
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
      description: ''
    - id: final
      type: System.Boolean
      description: if true adds QQ
    return:
      type: System.String
    content.vb: Public Shared Function QCadScript(edges As IEnumerable(Of Edge), final As Boolean = True) As String
  overload: SearchAThing.Sci.Ext.QCadScript*
  nameWithType.vb: Ext.QCadScript(IEnumerable(Of Edge), Boolean)
  fullName.vb: SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Edge), Boolean)
  name.vb: QCadScript(IEnumerable(Of Edge), Boolean)
- uid: SearchAThing.Sci.Ext.CheckSort(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  commentId: M:SearchAThing.Sci.Ext.CheckSort(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  id: CheckSort(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CheckSort(IEnumerable<Edge>, double)
  nameWithType: Ext.CheckSort(IEnumerable<Edge>, double)
  fullName: SearchAThing.Sci.Ext.CheckSort(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Edge>, double)
  type: Method
  source:
    remote:
      path: src/sci/Edge.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CheckSort
    path: src/sci/Edge.cs
    startLine: 150
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    Allow to sort edges when a not consequential set is given to allow subsequent CheckSense.

    It can raise exception if there isn't a possible sequence continuity between given edges.
  example: []
  syntax:
    content: public static IEnumerable<Edge> CheckSort(this IEnumerable<Edge> edges, double tol)
    parameters:
    - id: edges
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
      description: input edges list
    - id: tol
      type: System.Double
      description: length tolerance
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
      description: edges in sequence ( sense not yet checked )
    content.vb: Public Shared Function CheckSort(edges As IEnumerable(Of Edge), tol As Double) As IEnumerable(Of Edge)
  overload: SearchAThing.Sci.Ext.CheckSort*
  nameWithType.vb: Ext.CheckSort(IEnumerable(Of Edge), Double)
  fullName.vb: SearchAThing.Sci.Ext.CheckSort(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Edge), Double)
  name.vb: CheckSort(IEnumerable(Of Edge), Double)
- uid: SearchAThing.Sci.Ext.CheckSense(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  commentId: M:SearchAThing.Sci.Ext.CheckSense(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  id: CheckSense(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CheckSense(IEnumerable<Edge>, double)
  nameWithType: Ext.CheckSense(IEnumerable<Edge>, double)
  fullName: SearchAThing.Sci.Ext.CheckSense(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Edge>, double)
  type: Method
  source:
    remote:
      path: src/sci/Edge.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CheckSense
    path: src/sci/Edge.cs
    startLine: 203
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    From given set of edges returns the same set eventually toggling sense of edges to make them glue so that

    SGeomTo of previous equals SGeomFrom of current.

    It can raise exception if there isn't availability to glue edges regardless toggling their sense.

    first element will toggled to match second one, then other elements will follow the sense matching established.
  example: []
  syntax:
    content: public static IEnumerable<Edge> CheckSense(this IEnumerable<Edge> edges, double tol)
    parameters:
    - id: edges
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
      description: input edges list
    - id: tol
      type: System.Double
      description: length tolerance
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
    content.vb: Public Shared Function CheckSense(edges As IEnumerable(Of Edge), tol As Double) As IEnumerable(Of Edge)
  overload: SearchAThing.Sci.Ext.CheckSense*
  nameWithType.vb: Ext.CheckSense(IEnumerable(Of Edge), Double)
  fullName.vb: SearchAThing.Sci.Ext.CheckSense(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Edge), Double)
  name.vb: CheckSense(IEnumerable(Of Edge), Double)
- uid: SearchAThing.Sci.Ext.MakeVertexToEdges(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  commentId: M:SearchAThing.Sci.Ext.MakeVertexToEdges(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  id: MakeVertexToEdges(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: MakeVertexToEdges(IEnumerable<Edge>, double)
  nameWithType: Ext.MakeVertexToEdges(IEnumerable<Edge>, double)
  fullName: SearchAThing.Sci.Ext.MakeVertexToEdges(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Edge>, double)
  type: Method
  source:
    remote:
      path: src/sci/Edge.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: MakeVertexToEdges
    path: src/sci/Edge.cs
    startLine: 245
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Dictionary<Vector3D, List<Edge>> MakeVertexToEdges(this IEnumerable<Edge> edges, double tol)
    parameters:
    - id: edges
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
    - id: tol
      type: System.Double
    return:
      type: System.Collections.Generic.Dictionary{SearchAThing.Sci.Vector3D,System.Collections.Generic.List{SearchAThing.Sci.Edge}}
    content.vb: Public Shared Function MakeVertexToEdges(edges As IEnumerable(Of Edge), tol As Double) As Dictionary(Of Vector3D, List(Of Edge))
  overload: SearchAThing.Sci.Ext.MakeVertexToEdges*
  nameWithType.vb: Ext.MakeVertexToEdges(IEnumerable(Of Edge), Double)
  fullName.vb: SearchAThing.Sci.Ext.MakeVertexToEdges(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Edge), Double)
  name.vb: MakeVertexToEdges(IEnumerable(Of Edge), Double)
- uid: SearchAThing.Sci.Ext.AutoTrimExtends(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  commentId: M:SearchAThing.Sci.Ext.AutoTrimExtends(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  id: AutoTrimExtends(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: AutoTrimExtends(IEnumerable<Edge>, double)
  nameWithType: Ext.AutoTrimExtends(IEnumerable<Edge>, double)
  fullName: SearchAThing.Sci.Ext.AutoTrimExtends(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Edge>, double)
  type: Method
  source:
    remote:
      path: src/sci/Edge.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: AutoTrimExtends
    path: src/sci/Edge.cs
    startLine: 273
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: automatically trim or extends consecutive edges intersections
  example: []
  syntax:
    content: public static IEnumerable<Edge> AutoTrimExtends(this IEnumerable<Edge> edges, double tol)
    parameters:
    - id: edges
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
    - id: tol
      type: System.Double
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
    content.vb: Public Shared Function AutoTrimExtends(edges As IEnumerable(Of Edge), tol As Double) As IEnumerable(Of Edge)
  overload: SearchAThing.Sci.Ext.AutoTrimExtends*
  nameWithType.vb: Ext.AutoTrimExtends(IEnumerable(Of Edge), Double)
  fullName.vb: SearchAThing.Sci.Ext.AutoTrimExtends(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Edge), Double)
  name.vb: AutoTrimExtends(IEnumerable(Of Edge), Double)
- uid: SearchAThing.Sci.Ext.ToFace(System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.ToFace(System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2D},System.Double)
  id: ToFace(System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToFace(IEnumerable<Polyline2D>, double)
  nameWithType: Ext.ToFace(IEnumerable<Polyline2D>, double)
  fullName: SearchAThing.Sci.Ext.ToFace(System.Collections.Generic.IEnumerable<netDxf.Entities.Polyline2D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Face.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToFace
    path: src/sci/Face.cs
    startLine: 1145
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    build planar face with given loops ( first is the outer );

    input loop can be unordered ( loop with greather area will be considered as outer loop );

    precondition: loops must lie on same plane
  example: []
  syntax:
    content: public static Face ToFace(this IEnumerable<Polyline2D> lwpolyline, double tol)
    parameters:
    - id: lwpolyline
      type: System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2D}
    - id: tol
      type: System.Double
    return:
      type: SearchAThing.Sci.Face
    content.vb: Public Shared Function ToFace(lwpolyline As IEnumerable(Of Polyline2D), tol As Double) As Face
  overload: SearchAThing.Sci.Ext.ToFace*
  nameWithType.vb: Ext.ToFace(IEnumerable(Of Polyline2D), Double)
  fullName.vb: SearchAThing.Sci.Ext.ToFace(System.Collections.Generic.IEnumerable(Of netDxf.Entities.Polyline2D), Double)
  name.vb: ToFace(IEnumerable(Of Polyline2D), Double)
- uid: SearchAThing.Sci.Ext.ToFace(SearchAThing.Sci.Loop)
  commentId: M:SearchAThing.Sci.Ext.ToFace(SearchAThing.Sci.Loop)
  id: ToFace(SearchAThing.Sci.Loop)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToFace(Loop)
  nameWithType: Ext.ToFace(Loop)
  fullName: SearchAThing.Sci.Ext.ToFace(SearchAThing.Sci.Loop)
  type: Method
  source:
    remote:
      path: src/sci/Face.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToFace
    path: src/sci/Face.cs
    startLine: 1168
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: build face with given outer loop
  example: []
  syntax:
    content: public static Face ToFace(this Loop loop)
    parameters:
    - id: loop
      type: SearchAThing.Sci.Loop
    return:
      type: SearchAThing.Sci.Face
    content.vb: Public Shared Function ToFace([loop] As [Loop]) As Face
  overload: SearchAThing.Sci.Ext.ToFace*
- uid: SearchAThing.Sci.Ext.MinDistance(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:SearchAThing.Sci.Ext.MinDistance(System.Collections.Generic.IEnumerable{System.Double})
  id: MinDistance(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: MinDistance(IEnumerable<double>)
  nameWithType: Ext.MinDistance(IEnumerable<double>)
  fullName: SearchAThing.Sci.Ext.MinDistance(System.Collections.Generic.IEnumerable<double>)
  type: Method
  source:
    remote:
      path: src/sci/Fluent.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: MinDistance
    path: src/sci/Fluent.cs
    startLine: 10
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    Return the min distance between two adiacent number

    given from all of the given ordered set of numbers.
  example: []
  syntax:
    content: public static double MinDistance(this IEnumerable<double> orderedNumbers)
    parameters:
    - id: orderedNumbers
      type: System.Collections.Generic.IEnumerable{System.Double}
    return:
      type: System.Double
      description: 0 if empty set or 1 element. min distance otherwise.
    content.vb: Public Shared Function MinDistance(orderedNumbers As IEnumerable(Of Double)) As Double
  overload: SearchAThing.Sci.Ext.MinDistance*
  nameWithType.vb: Ext.MinDistance(IEnumerable(Of Double))
  fullName.vb: SearchAThing.Sci.Ext.MinDistance(System.Collections.Generic.IEnumerable(Of Double))
  name.vb: MinDistance(IEnumerable(Of Double))
- uid: SearchAThing.Sci.Ext.ToPlane(netDxf.Entities.Polyline2D)
  commentId: M:SearchAThing.Sci.Ext.ToPlane(netDxf.Entities.Polyline2D)
  id: ToPlane(netDxf.Entities.Polyline2D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToPlane(Polyline2D)
  nameWithType: Ext.ToPlane(Polyline2D)
  fullName: SearchAThing.Sci.Ext.ToPlane(netDxf.Entities.Polyline2D)
  type: Method
  source:
    remote:
      path: src/sci/Geometry.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToPlane
    path: src/sci/Geometry.cs
    startLine: 132
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Plane3D ToPlane(this Polyline2D lwpolyline)
    parameters:
    - id: lwpolyline
      type: netDxf.Entities.Polyline2D
    return:
      type: SearchAThing.Sci.Plane3D
    content.vb: Public Shared Function ToPlane(lwpolyline As Polyline2D) As Plane3D
  overload: SearchAThing.Sci.Ext.ToPlane*
- uid: SearchAThing.Sci.Ext.ToGeometries(netDxf.Entities.Polyline2D,System.Double)
  commentId: M:SearchAThing.Sci.Ext.ToGeometries(netDxf.Entities.Polyline2D,System.Double)
  id: ToGeometries(netDxf.Entities.Polyline2D,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToGeometries(Polyline2D, double)
  nameWithType: Ext.ToGeometries(Polyline2D, double)
  fullName: SearchAThing.Sci.Ext.ToGeometries(netDxf.Entities.Polyline2D, double)
  type: Method
  source:
    remote:
      path: src/sci/Geometry.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToGeometries
    path: src/sci/Geometry.cs
    startLine: 143
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: extracs Arc3D, Line3D from given lwpolyline
  example: []
  syntax:
    content: public static IEnumerable<Geometry> ToGeometries(this Polyline2D lwpolyline, double tol)
    parameters:
    - id: lwpolyline
      type: netDxf.Entities.Polyline2D
      description: ''
    - id: tol
      type: System.Double
      description: length tolerance
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
    content.vb: Public Shared Function ToGeometries(lwpolyline As Polyline2D, tol As Double) As IEnumerable(Of Geometry)
  overload: SearchAThing.Sci.Ext.ToGeometries*
  nameWithType.vb: Ext.ToGeometries(Polyline2D, Double)
  fullName.vb: SearchAThing.Sci.Ext.ToGeometries(netDxf.Entities.Polyline2D, Double)
  name.vb: ToGeometries(Polyline2D, Double)
- uid: SearchAThing.Sci.Ext.Segments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  commentId: M:SearchAThing.Sci.Ext.Segments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  id: Segments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Segments(IEnumerable<Geometry>, double)
  nameWithType: Ext.Segments(IEnumerable<Geometry>, double)
  fullName: SearchAThing.Sci.Ext.Segments(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>, double)
  type: Method
  source:
    remote:
      path: src/sci/Geometry.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Segments
    path: src/sci/Geometry.cs
    startLine: 180
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    segments representation of given geometries

    if arc found a segment between endpoints returns
  example: []
  syntax:
    content: public static IEnumerable<Line3D> Segments(this IEnumerable<Geometry> geometry_block, double tol)
    parameters:
    - id: geometry_block
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
      description: ''
    - id: tol
      type: System.Double
      description: length tolerance
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: Public Shared Function Segments(geometry_block As IEnumerable(Of Geometry), tol As Double) As IEnumerable(Of Line3D)
  overload: SearchAThing.Sci.Ext.Segments*
  nameWithType.vb: Ext.Segments(IEnumerable(Of Geometry), Double)
  fullName.vb: SearchAThing.Sci.Ext.Segments(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry), Double)
  name.vb: Segments(IEnumerable(Of Geometry), Double)
- uid: SearchAThing.Sci.Ext.Vertexes(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  commentId: M:SearchAThing.Sci.Ext.Vertexes(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  id: Vertexes(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Vertexes(IEnumerable<Geometry>, double)
  nameWithType: Ext.Vertexes(IEnumerable<Geometry>, double)
  fullName: SearchAThing.Sci.Ext.Vertexes(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>, double)
  type: Method
  source:
    remote:
      path: src/sci/Geometry.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Vertexes
    path: src/sci/Geometry.cs
    startLine: 258
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: vertexes from given set of geometries
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Vertexes(this IEnumerable<Geometry> _geometry_block, double tol)
    parameters:
    - id: _geometry_block
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
      description: ''
    - id: tol
      type: System.Double
      description: length tolerance
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Vertexes(_geometry_block As IEnumerable(Of Geometry), tol As Double) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.Vertexes*
  nameWithType.vb: Ext.Vertexes(IEnumerable(Of Geometry), Double)
  fullName.vb: SearchAThing.Sci.Ext.Vertexes(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry), Double)
  name.vb: Vertexes(IEnumerable(Of Geometry), Double)
- uid: SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},SearchAThing.Sci.GeomSegmentMode,SearchAThing.Sci.GeomSegmentMode)
  commentId: M:SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},SearchAThing.Sci.GeomSegmentMode,SearchAThing.Sci.GeomSegmentMode)
  id: Intersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},SearchAThing.Sci.GeomSegmentMode,SearchAThing.Sci.GeomSegmentMode)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Intersect(IEnumerable<Geometry>, double, IEnumerable<Geometry>, GeomSegmentMode, GeomSegmentMode)
  nameWithType: Ext.Intersect(IEnumerable<Geometry>, double, IEnumerable<Geometry>, GeomSegmentMode, GeomSegmentMode)
  fullName: SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>, double, System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>, SearchAThing.Sci.GeomSegmentMode, SearchAThing.Sci.GeomSegmentMode)
  type: Method
  source:
    remote:
      path: src/sci/Geometry.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Intersect
    path: src/sci/Geometry.cs
    startLine: 347
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: find intersection geometries resulting from all this geometries with all given geom2
  example: []
  syntax:
    content: public static IEnumerable<(Geometry intersectGeom, Geometry g1, Geometry g2)> Intersect(this IEnumerable<Geometry> _geom1, double tol, IEnumerable<Geometry> _geom2, GeomSegmentMode geom1SegmentMode = GeomSegmentMode.FromTo, GeomSegmentMode geom2SegmentMode = GeomSegmentMode.FromTo)
    parameters:
    - id: _geom1
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
      description: ''
    - id: tol
      type: System.Double
      description: length tolerance
    - id: _geom2
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
      description: ''
    - id: geom1SegmentMode
      type: SearchAThing.Sci.GeomSegmentMode
      description: if geom1 item is Line3D specifies how to consider it
    - id: geom2SegmentMode
      type: SearchAThing.Sci.GeomSegmentMode
      description: if geom2 item is Line3D specifies how to consider it
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}}
    content.vb: Public Shared Function Intersect(_geom1 As IEnumerable(Of Geometry), tol As Double, _geom2 As IEnumerable(Of Geometry), geom1SegmentMode As GeomSegmentMode = GeomSegmentMode.FromTo, geom2SegmentMode As GeomSegmentMode = GeomSegmentMode.FromTo) As IEnumerable(Of (intersectGeom As Geometry, g1 As Geometry, g2 As Geometry))
  overload: SearchAThing.Sci.Ext.Intersect*
  nameWithType.vb: Ext.Intersect(IEnumerable(Of Geometry), Double, IEnumerable(Of Geometry), GeomSegmentMode, GeomSegmentMode)
  fullName.vb: SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry), Double, System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry), SearchAThing.Sci.GeomSegmentMode, SearchAThing.Sci.GeomSegmentMode)
  name.vb: Intersect(IEnumerable(Of Geometry), Double, IEnumerable(Of Geometry), GeomSegmentMode, GeomSegmentMode)
- uid: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  commentId: M:SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  id: BBox(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: BBox(IEnumerable<Geometry>, double)
  nameWithType: Ext.BBox(IEnumerable<Geometry>, double)
  fullName: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>, double)
  type: Method
  source:
    remote:
      path: src/sci/Geometry.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: BBox
    path: src/sci/Geometry.cs
    startLine: 372
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: bbox that cover all given geometries
  example: []
  syntax:
    content: public static BBox3D BBox(this IEnumerable<Geometry> geometry_block, double tol)
    parameters:
    - id: geometry_block
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
      description: ''
    - id: tol
      type: System.Double
      description: length tolerance
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: Public Shared Function BBox(geometry_block As IEnumerable(Of Geometry), tol As Double) As BBox3D
  overload: SearchAThing.Sci.Ext.BBox*
  nameWithType.vb: Ext.BBox(IEnumerable(Of Geometry), Double)
  fullName.vb: SearchAThing.Sci.Ext.BBox(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry), Double)
  name.vb: BBox(IEnumerable(Of Geometry), Double)
- uid: SearchAThing.Sci.Ext.ToDxfLine(SearchAThing.Sci.Line3D)
  commentId: M:SearchAThing.Sci.Ext.ToDxfLine(SearchAThing.Sci.Line3D)
  id: ToDxfLine(SearchAThing.Sci.Line3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToDxfLine(Line3D)
  nameWithType: Ext.ToDxfLine(Line3D)
  fullName: SearchAThing.Sci.Ext.ToDxfLine(SearchAThing.Sci.Line3D)
  type: Method
  source:
    remote:
      path: src/sci/Line3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToDxfLine
    path: src/sci/Line3D.cs
    startLine: 959
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Line ToDxfLine(this Line3D line)
    parameters:
    - id: line
      type: SearchAThing.Sci.Line3D
    return:
      type: netDxf.Entities.Line
    content.vb: Public Shared Function ToDxfLine(line As Line3D) As Line
  overload: SearchAThing.Sci.Ext.ToDxfLine*
- uid: SearchAThing.Sci.Ext.ToCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D})
  commentId: M:SearchAThing.Sci.Ext.ToCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D})
  id: ToCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToCadScript(IEnumerable<Line3D>)
  nameWithType: Ext.ToCadScript(IEnumerable<Line3D>)
  fullName: SearchAThing.Sci.Ext.ToCadScript(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>)
  type: Method
  source:
    remote:
      path: src/sci/Line3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToCadScript
    path: src/sci/Line3D.cs
    startLine: 961
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static string ToCadScript(this IEnumerable<Line3D> lines)
    parameters:
    - id: lines
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    return:
      type: System.String
    content.vb: Public Shared Function ToCadScript(lines As IEnumerable(Of Line3D)) As String
  overload: SearchAThing.Sci.Ext.ToCadScript*
  nameWithType.vb: Ext.ToCadScript(IEnumerable(Of Line3D))
  fullName.vb: SearchAThing.Sci.Ext.ToCadScript(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D))
  name.vb: ToCadScript(IEnumerable(Of Line3D))
- uid: SearchAThing.Sci.Ext.ToLine3D(netDxf.Entities.Line)
  commentId: M:SearchAThing.Sci.Ext.ToLine3D(netDxf.Entities.Line)
  id: ToLine3D(netDxf.Entities.Line)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToLine3D(Line)
  nameWithType: Ext.ToLine3D(Line)
  fullName: SearchAThing.Sci.Ext.ToLine3D(netDxf.Entities.Line)
  type: Method
  source:
    remote:
      path: src/sci/Line3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToLine3D
    path: src/sci/Line3D.cs
    startLine: 973
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Line3D ToLine3D(this Line line)
    parameters:
    - id: line
      type: netDxf.Entities.Line
    return:
      type: SearchAThing.Sci.Line3D
    content.vb: Public Shared Function ToLine3D(line As Line) As Line3D
  overload: SearchAThing.Sci.Ext.ToLine3D*
- uid: SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D})
  commentId: M:SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D})
  id: PolyPoints(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: PolyPoints(IEnumerable<Line3D>)
  nameWithType: Ext.PolyPoints(IEnumerable<Line3D>)
  fullName: SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>)
  type: Method
  source:
    remote:
      path: src/sci/Line3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: PolyPoints
    path: src/sci/Line3D.cs
    startLine: 978
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: retrieve s[0].from, s[1].from, ... s[n-1].from, s[n-1].to points
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> PolyPoints(this IEnumerable<Line3D> segs)
    parameters:
    - id: segs
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function PolyPoints(segs As IEnumerable(Of Line3D)) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.PolyPoints*
  nameWithType.vb: Ext.PolyPoints(IEnumerable(Of Line3D))
  fullName.vb: SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D))
  name.vb: PolyPoints(IEnumerable(Of Line3D))
- uid: SearchAThing.Sci.Ext.MergeColinearSegments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.MergeColinearSegments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  id: MergeColinearSegments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: MergeColinearSegments(IEnumerable<Line3D>, double)
  nameWithType: Ext.MergeColinearSegments(IEnumerable<Line3D>, double)
  fullName: SearchAThing.Sci.Ext.MergeColinearSegments(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Line3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: MergeColinearSegments
    path: src/sci/Line3D.cs
    startLine: 1000
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    merge colinear overlapped segments into single

    result segments direction and order is not ensured

    pre: segs must colinear
  example: []
  syntax:
    content: public static IEnumerable<Line3D> MergeColinearSegments(this IEnumerable<Line3D> _segs, double tol)
    parameters:
    - id: _segs
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: Public Shared Function MergeColinearSegments(_segs As IEnumerable(Of Line3D), tol As Double) As IEnumerable(Of Line3D)
  overload: SearchAThing.Sci.Ext.MergeColinearSegments*
  nameWithType.vb: Ext.MergeColinearSegments(IEnumerable(Of Line3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.MergeColinearSegments(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D), Double)
  name.vb: MergeColinearSegments(IEnumerable(Of Line3D), Double)
- uid: SearchAThing.Sci.Ext.AutoIntersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.AutoIntersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: AutoIntersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: AutoIntersect(IEnumerable<Line3D>, double, bool, IEnumerable<Vector3D>?)
  nameWithType: Ext.AutoIntersect(IEnumerable<Line3D>, double, bool, IEnumerable<Vector3D>?)
  fullName: SearchAThing.Sci.Ext.AutoIntersect(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>, double, bool, System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>?)
  type: Method
  source:
    remote:
      path: src/sci/Line3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: AutoIntersect
    path: src/sci/Line3D.cs
    startLine: 1074
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    autointersect given list of segments

    ( duplicates and overlapping are removed )


    TODO: dummy function, optimize
  example: []
  syntax:
    content: public static IReadOnlyList<Line3D> AutoIntersect(this IEnumerable<Line3D> _segs, double tol, bool mergeColinearSegments = true, IEnumerable<Vector3D>? addictionalSplitPoints = null)
    parameters:
    - id: _segs
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    - id: mergeColinearSegments
      type: System.Boolean
    - id: addictionalSplitPoints
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Collections.Generic.IReadOnlyList{SearchAThing.Sci.Line3D}
    content.vb: Public Shared Function AutoIntersect(_segs As IEnumerable(Of Line3D), tol As Double, mergeColinearSegments As Boolean = True, addictionalSplitPoints As IEnumerable(Of Vector3D) = Nothing) As IReadOnlyList(Of Line3D)
  overload: SearchAThing.Sci.Ext.AutoIntersect*
  nameWithType.vb: Ext.AutoIntersect(IEnumerable(Of Line3D), Double, Boolean, IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.AutoIntersect(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D), Double, Boolean, System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: AutoIntersect(IEnumerable(Of Line3D), Double, Boolean, IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  id: BestFittingPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: BestFittingPlane(IEnumerable<Line3D>, double)
  nameWithType: Ext.BestFittingPlane(IEnumerable<Line3D>, double)
  fullName: SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Line3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: BestFittingPlane
    path: src/sci/Line3D.cs
    startLine: 1169
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    detect best fitting plane from the set of given lines.

    precondition: lines must coplanar
  example: []
  syntax:
    content: public static Plane3D BestFittingPlane(this IEnumerable<Line3D> lines, double tol)
    parameters:
    - id: lines
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    return:
      type: SearchAThing.Sci.Plane3D
    content.vb: Public Shared Function BestFittingPlane(lines As IEnumerable(Of Line3D), tol As Double) As Plane3D
  overload: SearchAThing.Sci.Ext.BestFittingPlane*
  nameWithType.vb: Ext.BestFittingPlane(IEnumerable(Of Line3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D), Double)
  name.vb: BestFittingPlane(IEnumerable(Of Line3D), Double)
- uid: SearchAThing.Sci.Ext.ToLoop(netDxf.Entities.Polyline2D,System.Double)
  commentId: M:SearchAThing.Sci.Ext.ToLoop(netDxf.Entities.Polyline2D,System.Double)
  id: ToLoop(netDxf.Entities.Polyline2D,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToLoop(Polyline2D, double)
  nameWithType: Ext.ToLoop(Polyline2D, double)
  fullName: SearchAThing.Sci.Ext.ToLoop(netDxf.Entities.Polyline2D, double)
  type: Method
  source:
    remote:
      path: src/sci/Loop.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToLoop
    path: src/sci/Loop.cs
    startLine: 461
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Loop ToLoop(this Polyline2D lwpolyline, double tol)
    parameters:
    - id: lwpolyline
      type: netDxf.Entities.Polyline2D
    - id: tol
      type: System.Double
    return:
      type: SearchAThing.Sci.Loop
    content.vb: Public Shared Function ToLoop(lwpolyline As Polyline2D, tol As Double) As [Loop]
  overload: SearchAThing.Sci.Ext.ToLoop*
  nameWithType.vb: Ext.ToLoop(Polyline2D, Double)
  fullName.vb: SearchAThing.Sci.Ext.ToLoop(netDxf.Entities.Polyline2D, Double)
  name.vb: ToLoop(Polyline2D, Double)
- uid: SearchAThing.Sci.Ext.DetectPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  commentId: M:SearchAThing.Sci.Ext.DetectPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  id: DetectPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: DetectPlane(IEnumerable<Edge>, double)
  nameWithType: Ext.DetectPlane(IEnumerable<Edge>, double)
  fullName: SearchAThing.Sci.Ext.DetectPlane(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Edge>, double)
  type: Method
  source:
    remote:
      path: src/sci/Loop.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: DetectPlane
    path: src/sci/Loop.cs
    startLine: 464
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Plane3D DetectPlane(this IEnumerable<Edge> edges, double tol)
    parameters:
    - id: edges
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
    - id: tol
      type: System.Double
    return:
      type: SearchAThing.Sci.Plane3D
    content.vb: Public Shared Function DetectPlane(edges As IEnumerable(Of Edge), tol As Double) As Plane3D
  overload: SearchAThing.Sci.Ext.DetectPlane*
  nameWithType.vb: Ext.DetectPlane(IEnumerable(Of Edge), Double)
  fullName.vb: SearchAThing.Sci.Ext.DetectPlane(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Edge), Double)
  name.vb: DetectPlane(IEnumerable(Of Edge), Double)
- uid: SearchAThing.Sci.Ext.Inverse(System.Numerics.Matrix4x4)
  commentId: M:SearchAThing.Sci.Ext.Inverse(System.Numerics.Matrix4x4)
  id: Inverse(System.Numerics.Matrix4x4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Inverse(Matrix4x4)
  nameWithType: Ext.Inverse(Matrix4x4)
  fullName: SearchAThing.Sci.Ext.Inverse(System.Numerics.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/sci/Matrix4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Inverse
    path: src/sci/Matrix4Ext.cs
    startLine: 71
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: retrieve inverse of given matrix
  remarks: can gen exception
  example: []
  syntax:
    content: public static Matrix4x4 Inverse(this Matrix4x4 m)
    parameters:
    - id: m
      type: System.Numerics.Matrix4x4
      description: 4x4 matrix
    return:
      type: System.Numerics.Matrix4x4
      description: inverse of given matrix
    content.vb: Public Shared Function Inverse(m As Matrix4x4) As Matrix4x4
  overload: SearchAThing.Sci.Ext.Inverse*
- uid: SearchAThing.Sci.Ext.Fmt(System.Numerics.Matrix4x4,System.Int32,System.Int32)
  commentId: M:SearchAThing.Sci.Ext.Fmt(System.Numerics.Matrix4x4,System.Int32,System.Int32)
  id: Fmt(System.Numerics.Matrix4x4,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Fmt(Matrix4x4, int, int)
  nameWithType: Ext.Fmt(Matrix4x4, int, int)
  fullName: SearchAThing.Sci.Ext.Fmt(System.Numerics.Matrix4x4, int, int)
  type: Method
  source:
    remote:
      path: src/sci/Matrix4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Fmt
    path: src/sci/Matrix4Ext.cs
    startLine: 86
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: matrix4x4 formatted print suitable for monospace font or terminal display
  example: []
  syntax:
    content: public static string Fmt(this Matrix4x4 m, int dec, int width = 10)
    parameters:
    - id: m
      type: System.Numerics.Matrix4x4
      description: matrix
    - id: dec
      type: System.Int32
      description: decimal to display
    - id: width
      type: System.Int32
      description: column width
    return:
      type: System.String
      description: formatted text representation of given matrix
    content.vb: Public Shared Function Fmt(m As Matrix4x4, dec As Integer, width As Integer = 10) As String
  overload: SearchAThing.Sci.Ext.Fmt*
  nameWithType.vb: Ext.Fmt(Matrix4x4, Integer, Integer)
  fullName.vb: SearchAThing.Sci.Ext.Fmt(System.Numerics.Matrix4x4, Integer, Integer)
  name.vb: Fmt(Matrix4x4, Integer, Integer)
- uid: SearchAThing.Sci.Ext.ToEulerAngles(System.Numerics.Matrix4x4)
  commentId: M:SearchAThing.Sci.Ext.ToEulerAngles(System.Numerics.Matrix4x4)
  id: ToEulerAngles(System.Numerics.Matrix4x4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToEulerAngles(Matrix4x4)
  nameWithType: Ext.ToEulerAngles(Matrix4x4)
  fullName: SearchAThing.Sci.Ext.ToEulerAngles(System.Numerics.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/sci/Matrix4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToEulerAngles
    path: src/sci/Matrix4Ext.cs
    startLine: 124
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    extract xyz rotation angles from given rotation matrix.

    Reference: [Extracting Euler Angles from a Rotation Matrix](https://pdfs.semanticscholar.org/6681/37fa4b875d890f446e689eea1e334bcf6bf6.pdf) by Mike Day
  remarks: '[unit test](https://github.com/devel0/netcore-sci/tree/master/src/test/Matrix4x4/Matrix4x4Test_0001.cs)'
  example: []
  syntax:
    content: public static Vector3 ToEulerAngles(this Matrix4x4 rotation)
    parameters:
    - id: rotation
      type: System.Numerics.Matrix4x4
      description: rotation matrix
    return:
      type: System.Numerics.Vector3
      description: Vector3 with rotation angles(rad) around wcs xyz axes
    content.vb: Public Shared Function ToEulerAngles(rotation As Matrix4x4) As Vector3
  overload: SearchAThing.Sci.Ext.ToEulerAngles*
- uid: SearchAThing.Sci.Ext.Decompose(System.Numerics.Matrix4x4)
  commentId: M:SearchAThing.Sci.Ext.Decompose(System.Numerics.Matrix4x4)
  id: Decompose(System.Numerics.Matrix4x4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Decompose(Matrix4x4)
  nameWithType: Ext.Decompose(Matrix4x4)
  fullName: SearchAThing.Sci.Ext.Decompose(System.Numerics.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/sci/Matrix4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Decompose
    path: src/sci/Matrix4Ext.cs
    startLine: 146
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: decompose given 4x4 matrix into scale, rotation, translation
  example: []
  syntax:
    content: public static (Vector3 translation, Quaternion rotation, Vector3 scale, bool success) Decompose(this Matrix4x4 m)
    parameters:
    - id: m
      type: System.Numerics.Matrix4x4
    return:
      type: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}
    content.vb: Public Shared Function Decompose(m As Matrix4x4) As (translation As Vector3, rotation As Quaternion, scale As Vector3, success As Boolean)
  overload: SearchAThing.Sci.Ext.Decompose*
- uid: SearchAThing.Sci.Ext.GetItem(System.Numerics.Matrix4x4,System.Int32,System.Int32)
  commentId: M:SearchAThing.Sci.Ext.GetItem(System.Numerics.Matrix4x4,System.Int32,System.Int32)
  id: GetItem(System.Numerics.Matrix4x4,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: GetItem(Matrix4x4, int, int)
  nameWithType: Ext.GetItem(Matrix4x4, int, int)
  fullName: SearchAThing.Sci.Ext.GetItem(System.Numerics.Matrix4x4, int, int)
  type: Method
  source:
    remote:
      path: src/sci/Matrix4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: GetItem
    path: src/sci/Matrix4Ext.cs
    startLine: 165
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: retrieve item at given row(0..3), col(0..3) of the matrix4x4
  example: []
  syntax:
    content: public static float GetItem(this Matrix4x4 m, int rowIdx, int colIdx)
    parameters:
    - id: m
      type: System.Numerics.Matrix4x4
      description: matrix
    - id: rowIdx
      type: System.Int32
      description: row (0 based index)
    - id: colIdx
      type: System.Int32
      description: col (0 based index)
    return:
      type: System.Single
      description: matrix item
    content.vb: Public Shared Function GetItem(m As Matrix4x4, rowIdx As Integer, colIdx As Integer) As Single
  overload: SearchAThing.Sci.Ext.GetItem*
  nameWithType.vb: Ext.GetItem(Matrix4x4, Integer, Integer)
  fullName.vb: SearchAThing.Sci.Ext.GetItem(System.Numerics.Matrix4x4, Integer, Integer)
  name.vb: GetItem(Matrix4x4, Integer, Integer)
- uid: SearchAThing.Sci.Ext.Fmt(System.Single,System.Int32,System.Int32)
  commentId: M:SearchAThing.Sci.Ext.Fmt(System.Single,System.Int32,System.Int32)
  id: Fmt(System.Single,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Fmt(float, int, int)
  nameWithType: Ext.Fmt(float, int, int)
  fullName: SearchAThing.Sci.Ext.Fmt(float, int, int)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Fmt
    path: src/sci/Number.cs
    startLine: 47
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: format number with given decimals and total length aligning right
  example: []
  syntax:
    content: public static string Fmt(this float n, int dec, int size)
    parameters:
    - id: n
      type: System.Single
      description: number to format
    - id: dec
      type: System.Int32
      description: decimals round
    - id: size
      type: System.Int32
      description: string size
    return:
      type: System.String
      description: string representing given number formatted with given decimals and total length aligning right
    content.vb: Public Shared Function Fmt(n As Single, dec As Integer, size As Integer) As String
  overload: SearchAThing.Sci.Ext.Fmt*
  nameWithType.vb: Ext.Fmt(Single, Integer, Integer)
  fullName.vb: SearchAThing.Sci.Ext.Fmt(Single, Integer, Integer)
  name.vb: Fmt(Single, Integer, Integer)
- uid: SearchAThing.Sci.Ext.Fmt(System.Double,System.Int32,System.Int32)
  commentId: M:SearchAThing.Sci.Ext.Fmt(System.Double,System.Int32,System.Int32)
  id: Fmt(System.Double,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Fmt(double, int, int)
  nameWithType: Ext.Fmt(double, int, int)
  fullName: SearchAThing.Sci.Ext.Fmt(double, int, int)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Fmt
    path: src/sci/Number.cs
    startLine: 57
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: format number with given decimals and total length aligning right
  example: []
  syntax:
    content: public static string Fmt(this double n, int dec, int size)
    parameters:
    - id: n
      type: System.Double
      description: number to format
    - id: dec
      type: System.Int32
      description: decimals round
    - id: size
      type: System.Int32
      description: string size
    return:
      type: System.String
      description: string representing given number formatted with given decimals and total length aligning right
    content.vb: Public Shared Function Fmt(n As Double, dec As Integer, size As Integer) As String
  overload: SearchAThing.Sci.Ext.Fmt*
  nameWithType.vb: Ext.Fmt(Double, Integer, Integer)
  fullName.vb: SearchAThing.Sci.Ext.Fmt(Double, Integer, Integer)
  name.vb: Fmt(Double, Integer, Integer)
- uid: SearchAThing.Sci.Ext.Angle(System.Double,System.Double,System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.Angle(System.Double,System.Double,System.Boolean)
  id: Angle(System.Double,System.Double,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Angle(double, double, bool)
  nameWithType: Ext.Angle(double, double, bool)
  fullName: SearchAThing.Sci.Ext.Angle(double, double, bool)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Angle
    path: src/sci/Number.cs
    startLine: 67
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    retrieve angle between from and to given;

    angles will subjected to normalization [0,2pi) and angle from can be greather than to
  example: []
  syntax:
    content: public static double Angle(this double angleFrom, double angleTo, bool normalizeAngles = true)
    parameters:
    - id: angleFrom
      type: System.Double
      description: angle from
    - id: angleTo
      type: System.Double
      description: angle to
    - id: normalizeAngles
      type: System.Boolean
      description: actuate [0,2PI) angle normalization
    return:
      type: System.Double
    content.vb: Public Shared Function Angle(angleFrom As Double, angleTo As Double, normalizeAngles As Boolean = True) As Double
  overload: SearchAThing.Sci.Ext.Angle*
  nameWithType.vb: Ext.Angle(Double, Double, Boolean)
  fullName.vb: SearchAThing.Sci.Ext.Angle(Double, Double, Boolean)
  name.vb: Angle(Double, Double, Boolean)
- uid: SearchAThing.Sci.Ext.NormalizeAngle(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Ext.NormalizeAngle(System.Double,System.Double,System.Double)
  id: NormalizeAngle(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: NormalizeAngle(double, double, double)
  nameWithType: Ext.NormalizeAngle(double, double, double)
  fullName: SearchAThing.Sci.Ext.NormalizeAngle(double, double, double)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: NormalizeAngle
    path: src/sci/Number.cs
    startLine: 91
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: Normalize given angle(rad) into [maxRad-2PI,maxRad) range.
  remarks: '[unit test](https://github.com/devel0/netcore-sci/tree/master/src/test/Number/NumberTest_0003.cs)'
  example: []
  syntax:
    content: public static double NormalizeAngle(this double angle_rad, double maxRadExcluded = 6.283185307179586, double radTol = 1E-10)
    parameters:
    - id: angle_rad
      type: System.Double
      description: angle(rad) to normalize
    - id: maxRadExcluded
      type: System.Double
      description: normalization range (excluded) max value ( minimum will computed as max-2PI )
    - id: radTol
      type: System.Double
      description: override rad tolerance
    return:
      type: System.Double
      description: angle normalized
    content.vb: Public Shared Function NormalizeAngle(angle_rad As Double, maxRadExcluded As Double = 6.283185307179586, radTol As Double = 1E-10) As Double
  overload: SearchAThing.Sci.Ext.NormalizeAngle*
  nameWithType.vb: Ext.NormalizeAngle(Double, Double, Double)
  fullName.vb: SearchAThing.Sci.Ext.NormalizeAngle(Double, Double, Double)
  name.vb: NormalizeAngle(Double, Double, Double)
- uid: SearchAThing.Sci.Ext.CompareToTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Ext.CompareToTol(System.Double,System.Double,System.Double)
  id: CompareToTol(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CompareToTol(double, double, double)
  nameWithType: Ext.CompareToTol(double, double, double)
  fullName: SearchAThing.Sci.Ext.CompareToTol(double, double, double)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CompareToTol
    path: src/sci/Number.cs
    startLine: 117
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: compare a, b using given tol
  example: []
  syntax:
    content: public static int CompareToTol(this double a, double tol, double b)
    parameters:
    - id: a
      type: System.Double
      description: first term
    - id: tol
      type: System.Double
      description: equals tolerance
    - id: b
      type: System.Double
      description: second term
    return:
      type: System.Int32
      description: -1 if a less than b ; 0 if a equals tol b ; +1 if a greather than b
    content.vb: Public Shared Function CompareToTol(a As Double, tol As Double, b As Double) As Integer
  overload: SearchAThing.Sci.Ext.CompareToTol*
  nameWithType.vb: Ext.CompareToTol(Double, Double, Double)
  fullName.vb: SearchAThing.Sci.Ext.CompareToTol(Double, Double, Double)
  name.vb: CompareToTol(Double, Double, Double)
- uid: SearchAThing.Sci.Ext.MinMax(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:SearchAThing.Sci.Ext.MinMax(System.Collections.Generic.IEnumerable{System.Double})
  id: MinMax(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: MinMax(IEnumerable<double>)
  nameWithType: Ext.MinMax(IEnumerable<double>)
  fullName: SearchAThing.Sci.Ext.MinMax(System.Collections.Generic.IEnumerable<double>)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: MinMax
    path: src/sci/Number.cs
    startLine: 130
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: retrieve min,max w/single sweep
  example: []
  syntax:
    content: public static (double min, double max) MinMax(this IEnumerable<double> input)
    parameters:
    - id: input
      type: System.Collections.Generic.IEnumerable{System.Double}
    return:
      type: System.ValueTuple{System.Double,System.Double}
    content.vb: Public Shared Function MinMax(input As IEnumerable(Of Double)) As (min As Double, max As Double)
  overload: SearchAThing.Sci.Ext.MinMax*
  nameWithType.vb: Ext.MinMax(IEnumerable(Of Double))
  fullName.vb: SearchAThing.Sci.Ext.MinMax(System.Collections.Generic.IEnumerable(Of Double))
  name.vb: MinMax(IEnumerable(Of Double))
- uid: SearchAThing.Sci.Ext.Thin(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean,System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.Thin(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean,System.Boolean)
  id: Thin(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Thin(IEnumerable<double>, double, bool, bool)
  nameWithType: Ext.Thin(IEnumerable<double>, double, bool, bool)
  fullName: SearchAThing.Sci.Ext.Thin(System.Collections.Generic.IEnumerable<double>, double, bool, bool)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Thin
    path: src/sci/Number.cs
    startLine: 151
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    retrieve given input set ordered with only distinct values after comparing through tolerance

    in this case result set contains only values from the input set (default) or rounding to given tol if maintain_original_values is false;

    if keep_ends true (default) min and max already exists at begin/end of returned sequence
  example: []
  syntax:
    content: public static List<double> Thin(this IEnumerable<double> input, double tol, bool keep_ends = true, bool maintain_original_values = true)
    parameters:
    - id: input
      type: System.Collections.Generic.IEnumerable{System.Double}
    - id: tol
      type: System.Double
    - id: keep_ends
      type: System.Boolean
    - id: maintain_original_values
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{System.Double}
    content.vb: Public Shared Function Thin(input As IEnumerable(Of Double), tol As Double, keep_ends As Boolean = True, maintain_original_values As Boolean = True) As List(Of Double)
  overload: SearchAThing.Sci.Ext.Thin*
  nameWithType.vb: Ext.Thin(IEnumerable(Of Double), Double, Boolean, Boolean)
  fullName.vb: SearchAThing.Sci.Ext.Thin(System.Collections.Generic.IEnumerable(Of Double), Double, Boolean, Boolean)
  name.vb: Thin(IEnumerable(Of Double), Double, Boolean, Boolean)
- uid: SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Double,System.Double)
  id: EqualsTol(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: EqualsTol(IEnumerable<(double, double)>, IEnumerable<(double, double)>, double, double)
  nameWithType: Ext.EqualsTol(IEnumerable<(double, double)>, IEnumerable<(double, double)>, double, double)
  fullName: SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable<(double, double)>, System.Collections.Generic.IEnumerable<(double, double)>, double, double)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: EqualsTol
    path: src/sci/Number.cs
    startLine: 173
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: compares two list tuples
  example: []
  syntax:
    content: public static bool EqualsTol(this IEnumerable<(double, double)> tuple_list1, IEnumerable<(double, double)> tuple_list2, double tol1, double tol2)
    parameters:
    - id: tuple_list1
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}}
    - id: tuple_list2
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}}
    - id: tol1
      type: System.Double
    - id: tol2
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function EqualsTol(tuple_list1 As IEnumerable(Of (Double, Double)), tuple_list2 As IEnumerable(Of (Double, Double)), tol1 As Double, tol2 As Double) As Boolean
  overload: SearchAThing.Sci.Ext.EqualsTol*
  nameWithType.vb: Ext.EqualsTol(IEnumerable(Of (Double, Double)), IEnumerable(Of (Double, Double)), Double, Double)
  fullName.vb: SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable(Of (Double, Double)), System.Collections.Generic.IEnumerable(Of (Double, Double)), Double, Double)
  name.vb: EqualsTol(IEnumerable(Of (Double, Double)), IEnumerable(Of (Double, Double)), Double, Double)
- uid: SearchAThing.Sci.Ext.WeightedDistribution(System.Collections.Generic.IEnumerable{System.Double},System.Int32)
  commentId: M:SearchAThing.Sci.Ext.WeightedDistribution(System.Collections.Generic.IEnumerable{System.Double},System.Int32)
  id: WeightedDistribution(System.Collections.Generic.IEnumerable{System.Double},System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: WeightedDistribution(IEnumerable<double>, int)
  nameWithType: Ext.WeightedDistribution(IEnumerable<double>, int)
  fullName: SearchAThing.Sci.Ext.WeightedDistribution(System.Collections.Generic.IEnumerable<double>, int)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: WeightedDistribution
    path: src/sci/Number.cs
    startLine: 208
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    retrieve a list of N pairs (value,presence)

    with value between min and max of inputs and presence between 0..1 that represents the percent of presence of the value


    examples:


    inputs = ( 1, 2, 3 ), N = 3

    results: ( (1, .33), (2, .33), (3, .33) )


    inputs = ( 1, 2.49, 3), N = 3

    results: ( (1, .33), (2, .169), (3, .497) )


    inputs = ( 1, 2, 3), N = 4

    results: ( (1, .33), (1.6, .16), (2.3, .16), (3, .33) )
  example: []
  syntax:
    content: public static (double off, double weight)[] WeightedDistribution(this IEnumerable<double> inputs, int N)
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Double}
    - id: N
      type: System.Int32
    return:
      type: System.ValueTuple{System.Double,System.Double}[]
    content.vb: Public Shared Function WeightedDistribution(inputs As IEnumerable(Of Double), N As Integer) As (off As Double, weight As Double)()
  overload: SearchAThing.Sci.Ext.WeightedDistribution*
  nameWithType.vb: Ext.WeightedDistribution(IEnumerable(Of Double), Integer)
  fullName.vb: SearchAThing.Sci.Ext.WeightedDistribution(System.Collections.Generic.IEnumerable(Of Double), Integer)
  name.vb: WeightedDistribution(IEnumerable(Of Double), Integer)
- uid: SearchAThing.Sci.Ext.Similarity(System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Ext.Similarity(System.Double,System.Double)
  id: Similarity(System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Similarity(double, double)
  nameWithType: Ext.Similarity(double, double)
  fullName: SearchAThing.Sci.Ext.Similarity(double, double)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Similarity
    path: src/sci/Number.cs
    startLine: 267
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    Test two numbers for similarity; the factor

    of similarity f = (max(x,y)-min(x,y)) / min(abs(x), abs(y)).

    Special cases:

    - if x=y=0 returns 0

    - if x=0 xor y=0 returns max(abs(x),abs(y)))/2

    - if sign(x) != sign(y) returns StDevP(x,y)
  example: []
  syntax:
    content: public static double Similarity(this double x, double y)
    parameters:
    - id: x
      type: System.Double
      description: first number
    - id: y
      type: System.Double
      description: second number
    return:
      type: System.Double
      description: similarity factor
    content.vb: Public Shared Function Similarity(x As Double, y As Double) As Double
  overload: SearchAThing.Sci.Ext.Similarity*
  nameWithType.vb: Ext.Similarity(Double, Double)
  fullName.vb: SearchAThing.Sci.Ext.Similarity(Double, Double)
  name.vb: Similarity(Double, Double)
- uid: SearchAThing.Sci.Ext.StatNfos(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:SearchAThing.Sci.Ext.StatNfos(System.Collections.Generic.IEnumerable{System.Double})
  id: StatNfos(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: StatNfos(IEnumerable<double>)
  nameWithType: Ext.StatNfos(IEnumerable<double>)
  fullName: SearchAThing.Sci.Ext.StatNfos(System.Collections.Generic.IEnumerable<double>)
  type: Method
  source:
    remote:
      path: src/sci/Number.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: StatNfos
    path: src/sci/Number.cs
    startLine: 286
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: Compute some stat info about given number set using [LinqStatistics](https://github.com/dkackman/LinqStatistics)
  example: []
  syntax:
    content: public static NumbersStatNfo StatNfos(this IEnumerable<double> numbers)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{System.Double}
    return:
      type: SearchAThing.Sci.NumbersStatNfo
      description: a tuple containing stat informations about given number set
    content.vb: Public Shared Function StatNfos(numbers As IEnumerable(Of Double)) As NumbersStatNfo
  overload: SearchAThing.Sci.Ext.StatNfos*
  nameWithType.vb: Ext.StatNfos(IEnumerable(Of Double))
  fullName.vb: SearchAThing.Sci.Ext.StatNfos(System.Collections.Generic.IEnumerable(Of Double))
  name.vb: StatNfos(IEnumerable(Of Double))
- uid: SearchAThing.Sci.Ext.XYSignedArea(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.XYSignedArea(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: XYSignedArea(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: XYSignedArea(IEnumerable<Vector3D>, double)
  nameWithType: Ext.XYSignedArea(IEnumerable<Vector3D>, double)
  fullName: SearchAThing.Sci.Ext.XYSignedArea(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: XYSignedArea
    path: src/sci/Polygon.cs
    startLine: 10
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    (signed) Area of a polygon (does not consider z);

    note: points must ccw ordered.

    https://en.wikipedia.org/wiki/Centroid
  example: []
  syntax:
    content: public static double XYSignedArea(this IEnumerable<Vector3D> _pts, double tol)
    parameters:
    - id: _pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function XYSignedArea(_pts As IEnumerable(Of Vector3D), tol As Double) As Double
  overload: SearchAThing.Sci.Ext.XYSignedArea*
  nameWithType.vb: Ext.XYSignedArea(IEnumerable(Of Vector3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.XYSignedArea(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double)
  name.vb: XYSignedArea(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.Sci.Ext.XYArea(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.XYArea(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: XYArea(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: XYArea(IEnumerable<Vector3D>, double)
  nameWithType: Ext.XYArea(IEnumerable<Vector3D>, double)
  fullName: SearchAThing.Sci.Ext.XYArea(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: XYArea
    path: src/sci/Polygon.cs
    startLine: 31
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    (abs) Area of a polygon (does not consider z).

    note: points must ccw ordered.

    https://en.wikipedia.org/wiki/Centroid
  example: []
  syntax:
    content: public static double XYArea(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function XYArea(pts As IEnumerable(Of Vector3D), tol As Double) As Double
  overload: SearchAThing.Sci.Ext.XYArea*
  nameWithType.vb: Ext.XYArea(IEnumerable(Of Vector3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.XYArea(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double)
  name.vb: XYArea(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: XYCentroid(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: XYCentroid(IEnumerable<Vector3D>, double)
  nameWithType: Ext.XYCentroid(IEnumerable<Vector3D>, double)
  fullName: SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: XYCentroid
    path: src/sci/Polygon.cs
    startLine: 40
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    Centroid of a polygon (does not consider z).

    note: points must ccw ordered.

    use overloaded method if signed area already computed.

    https://en.wikipedia.org/wiki/Centroid
  example: []
  syntax:
    content: public static Vector3D XYCentroid(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Function XYCentroid(pts As IEnumerable(Of Vector3D), tol As Double) As Vector3D
  overload: SearchAThing.Sci.Ext.XYCentroid*
  nameWithType.vb: Ext.XYCentroid(IEnumerable(Of Vector3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double)
  name.vb: XYCentroid(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  id: XYCentroid(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: XYCentroid(IEnumerable<Vector3D>, double, double)
  nameWithType: Ext.XYCentroid(IEnumerable<Vector3D>, double, double)
  fullName: SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double, double)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: XYCentroid
    path: src/sci/Polygon.cs
    startLine: 51
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    Centroid of a polygon (does not consider z).

    note: points must ccw ordered.

    https://en.wikipedia.org/wiki/Centroid
  example: []
  syntax:
    content: public static Vector3D XYCentroid(this IEnumerable<Vector3D> _pts, double tol, double signed_area)
    parameters:
    - id: _pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: signed_area
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Function XYCentroid(_pts As IEnumerable(Of Vector3D), tol As Double, signed_area As Double) As Vector3D
  overload: SearchAThing.Sci.Ext.XYCentroid*
  nameWithType.vb: Ext.XYCentroid(IEnumerable(Of Vector3D), Double, Double)
  fullName.vb: SearchAThing.Sci.Ext.XYCentroid(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double, Double)
  name.vb: XYCentroid(IEnumerable(Of Vector3D), Double, Double)
- uid: SearchAThing.Sci.Ext.Offset(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Ext.Offset(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  id: Offset(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Offset(IEnumerable<Vector3D>, double, double)
  nameWithType: Ext.Offset(IEnumerable<Vector3D>, double, double)
  fullName: SearchAThing.Sci.Ext.Offset(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double, double)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Offset
    path: src/sci/Polygon.cs
    startLine: 78
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    increase of decrease polygon points offseting

    ( this implementation uses Int64Map and clipper library )
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Offset(this IEnumerable<Vector3D> pts, double tol, double offset)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: offset
      type: System.Double
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Offset(pts As IEnumerable(Of Vector3D), tol As Double, offset As Double) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.Offset*
  nameWithType.vb: Ext.Offset(IEnumerable(Of Vector3D), Double, Double)
  fullName.vb: SearchAThing.Sci.Ext.Offset(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double, Double)
  name.vb: Offset(IEnumerable(Of Vector3D), Double, Double)
- uid: SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Boolean)
  id: PolyPoints(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: PolyPoints(IEnumerable<Vector3D>, double, bool)
  nameWithType: Ext.PolyPoints(IEnumerable<Vector3D>, double, bool)
  fullName: SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double, bool)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: PolyPoints
    path: src/sci/Polygon.cs
    startLine: 103
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    given a set of polygon pts, returns the enumeation of all pts

    so that the last not attach to the first ( if makeClosed = false ).

    Elsewhere it returns a last point equals the first ( makeClosed = true ).
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> PolyPoints(this IEnumerable<Vector3D> pts, double tol, bool makeClosed = false)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: makeClosed
      type: System.Boolean
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function PolyPoints(pts As IEnumerable(Of Vector3D), tol As Double, makeClosed As Boolean = False) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.PolyPoints*
  nameWithType.vb: Ext.PolyPoints(IEnumerable(Of Vector3D), Double, Boolean)
  fullName.vb: SearchAThing.Sci.Ext.PolyPoints(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double, Boolean)
  name.vb: PolyPoints(IEnumerable(Of Vector3D), Double, Boolean)
- uid: SearchAThing.Sci.Ext.PolygonSegments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.PolygonSegments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: PolygonSegments(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: PolygonSegments(IEnumerable<Vector3D>, double)
  nameWithType: Ext.PolygonSegments(IEnumerable<Vector3D>, double)
  fullName: SearchAThing.Sci.Ext.PolygonSegments(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: PolygonSegments
    path: src/sci/Polygon.cs
    startLine: 135
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    yields an ienumerable of polygon segments corresponding to the given polygon pts ( z is not considered )

    works even last point not equals the first one
  example: []
  syntax:
    content: public static IEnumerable<Line3D> PolygonSegments(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: Public Shared Function PolygonSegments(pts As IEnumerable(Of Vector3D), tol As Double) As IEnumerable(Of Line3D)
  overload: SearchAThing.Sci.Ext.PolygonSegments*
  nameWithType.vb: Ext.PolygonSegments(IEnumerable(Of Vector3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.PolygonSegments(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double)
  name.vb: PolygonSegments(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.Sci.Ext.ContainsPoint(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.LoopContainsPointMode)
  commentId: M:SearchAThing.Sci.Ext.ContainsPoint(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.LoopContainsPointMode)
  id: ContainsPoint(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.LoopContainsPointMode)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ContainsPoint(IEnumerable<Vector3D>, double, Vector3D, LoopContainsPointMode)
  nameWithType: Ext.ContainsPoint(IEnumerable<Vector3D>, double, Vector3D, LoopContainsPointMode)
  fullName: SearchAThing.Sci.Ext.ContainsPoint(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double, SearchAThing.Sci.Vector3D, SearchAThing.Sci.LoopContainsPointMode)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ContainsPoint
    path: src/sci/Polygon.cs
    startLine: 168
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: states if given point is in polygon
  example: []
  syntax:
    content: public static bool ContainsPoint(this IEnumerable<Vector3D> _pts, double tol, Vector3D pt, LoopContainsPointMode mode = LoopContainsPointMode.InsideOrPerimeter)
    parameters:
    - id: _pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: polygon point ( must ordered )
    - id: tol
      type: System.Double
      description: length tolerance
    - id: pt
      type: SearchAThing.Sci.Vector3D
      description: point to test
    - id: mode
      type: SearchAThing.Sci.LoopContainsPointMode
      description: allow to specify contains test type
    return:
      type: System.Boolean
    content.vb: Public Shared Function ContainsPoint(_pts As IEnumerable(Of Vector3D), tol As Double, pt As Vector3D, mode As LoopContainsPointMode = LoopContainsPointMode.InsideOrPerimeter) As Boolean
  overload: SearchAThing.Sci.Ext.ContainsPoint*
  nameWithType.vb: Ext.ContainsPoint(IEnumerable(Of Vector3D), Double, Vector3D, LoopContainsPointMode)
  fullName.vb: SearchAThing.Sci.Ext.ContainsPoint(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double, SearchAThing.Sci.Vector3D, SearchAThing.Sci.LoopContainsPointMode)
  name.vb: ContainsPoint(IEnumerable(Of Vector3D), Double, Vector3D, LoopContainsPointMode)
- uid: SearchAThing.Sci.Ext.SortCCW``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.CoordinateSystem3D)
  commentId: M:SearchAThing.Sci.Ext.SortCCW``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.CoordinateSystem3D)
  id: SortCCW``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.CoordinateSystem3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SortCCW<T>(IEnumerable<T>, double, Func<T, Vector3D>, CoordinateSystem3D)
  nameWithType: Ext.SortCCW<T>(IEnumerable<T>, double, Func<T, Vector3D>, CoordinateSystem3D)
  fullName: SearchAThing.Sci.Ext.SortCCW<T>(System.Collections.Generic.IEnumerable<T>, double, System.Func<T, SearchAThing.Sci.Vector3D>, SearchAThing.Sci.CoordinateSystem3D)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SortCCW
    path: src/sci/Polygon.cs
    startLine: 182
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    sort the set of templated points in ccw order;        

    note that first returned point could not match the first point in the sequence ( for that use RouteFirst() ext )
  example: []
  syntax:
    content: public static IEnumerable<T> SortCCW<T>(this IEnumerable<T> _tpts, double tol, Func<T, Vector3D> getPoint, CoordinateSystem3D cs)
    parameters:
    - id: _tpts
      type: System.Collections.Generic.IEnumerable{{T}}
      description: templated points
    - id: tol
      type: System.Double
      description: length tolerance
    - id: getPoint
      type: System.Func{{T},SearchAThing.Sci.Vector3D}
      description: function to extract Vector3D point from templated point
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
      description: CS used with origin as rotation center to sort ccw points and BaseZ used as reference rotation axis ( points plane normal right-hand rotate around )
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: input set of templated points ccw sorted
    content.vb: Public Shared Function SortCCW(Of T)(_tpts As IEnumerable(Of T), tol As Double, getPoint As Func(Of T, Vector3D), cs As CoordinateSystem3D) As IEnumerable(Of T)
  overload: SearchAThing.Sci.Ext.SortCCW*
  nameWithType.vb: Ext.SortCCW(Of T)(IEnumerable(Of T), Double, Func(Of T, Vector3D), CoordinateSystem3D)
  fullName.vb: SearchAThing.Sci.Ext.SortCCW(Of T)(System.Collections.Generic.IEnumerable(Of T), Double, System.Func(Of T, SearchAThing.Sci.Vector3D), SearchAThing.Sci.CoordinateSystem3D)
  name.vb: SortCCW(Of T)(IEnumerable(Of T), Double, Func(Of T, Vector3D), CoordinateSystem3D)
- uid: SearchAThing.Sci.Ext.SortCCW``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Ext.SortCCW``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: SortCCW``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SortCCW<T>(IEnumerable<T>, double, Func<T, Vector3D>, Vector3D, Vector3D)
  nameWithType: Ext.SortCCW<T>(IEnumerable<T>, double, Func<T, Vector3D>, Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Ext.SortCCW<T>(System.Collections.Generic.IEnumerable<T>, double, System.Func<T, SearchAThing.Sci.Vector3D>, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SortCCW
    path: src/sci/Polygon.cs
    startLine: 202
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    sort the set of templated points in ccw order;        

    note that first returned point could not match the first point in the sequence ( for that use RouteFirst() ext )
  example: []
  syntax:
    content: public static IEnumerable<T> SortCCW<T>(this IEnumerable<T> tpts, double tol, Func<T, Vector3D> getPoint, Vector3D center, Vector3D refAxis)
    parameters:
    - id: tpts
      type: System.Collections.Generic.IEnumerable{{T}}
      description: templated points
    - id: tol
      type: System.Double
      description: length tolerance
    - id: getPoint
      type: System.Func{{T},SearchAThing.Sci.Vector3D}
      description: function to extract Vector3D point from templated point
    - id: center
      type: SearchAThing.Sci.Vector3D
      description: rotation center to sort ccw points ( can use Mean() or Centroid() ext for closed polygon )
    - id: refAxis
      type: SearchAThing.Sci.Vector3D
      description: reference rotation axis ( points plane normal right-hand rotate around )
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: input set of templated points ccw sorted
    content.vb: Public Shared Function SortCCW(Of T)(tpts As IEnumerable(Of T), tol As Double, getPoint As Func(Of T, Vector3D), center As Vector3D, refAxis As Vector3D) As IEnumerable(Of T)
  overload: SearchAThing.Sci.Ext.SortCCW*
  nameWithType.vb: Ext.SortCCW(Of T)(IEnumerable(Of T), Double, Func(Of T, Vector3D), Vector3D, Vector3D)
  fullName.vb: SearchAThing.Sci.Ext.SortCCW(Of T)(System.Collections.Generic.IEnumerable(Of T), Double, System.Func(Of T, SearchAThing.Sci.Vector3D), SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  name.vb: SortCCW(Of T)(IEnumerable(Of T), Double, Func(Of T, Vector3D), Vector3D, Vector3D)
- uid: SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.CoordinateSystem3D)
  commentId: M:SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.CoordinateSystem3D)
  id: SortCCW(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.CoordinateSystem3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SortCCW(IEnumerable<Vector3D>, double, CoordinateSystem3D)
  nameWithType: Ext.SortCCW(IEnumerable<Vector3D>, double, CoordinateSystem3D)
  fullName: SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double, SearchAThing.Sci.CoordinateSystem3D)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SortCCW
    path: src/sci/Polygon.cs
    startLine: 214
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    sort the set of points in ccw order;        

    note that first returned point could not match the first point in the sequence ( for that use RouteFirst() ext )
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> SortCCW(this IEnumerable<Vector3D> pts, double tol, CoordinateSystem3D cs)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: points
    - id: tol
      type: System.Double
      description: length tolerance
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
      description: CS used with origin as rotation center to sort ccw points and BaseZ used as reference rotation axis ( points plane normal right-hand rotate around )
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: input set of points ccw sorted
    content.vb: Public Shared Function SortCCW(pts As IEnumerable(Of Vector3D), tol As Double, cs As CoordinateSystem3D) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.SortCCW*
  nameWithType.vb: Ext.SortCCW(IEnumerable(Of Vector3D), Double, CoordinateSystem3D)
  fullName.vb: SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double, SearchAThing.Sci.CoordinateSystem3D)
  name.vb: SortCCW(IEnumerable(Of Vector3D), Double, CoordinateSystem3D)
- uid: SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: SortCCW(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SortCCW(IEnumerable<Vector3D>, double, Vector3D, Vector3D)
  nameWithType: Ext.SortCCW(IEnumerable<Vector3D>, double, Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SortCCW
    path: src/sci/Polygon.cs
    startLine: 226
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    sort the set of points in ccw order;        

    note that first returned point could not match the first point in the sequence ( for that use RouteFirst() ext )
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> SortCCW(this IEnumerable<Vector3D> pts, double tol, Vector3D center, Vector3D refAxis)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: points
    - id: tol
      type: System.Double
      description: length tolerance
    - id: center
      type: SearchAThing.Sci.Vector3D
      description: rotation center to sort ccw points ( can use Mean() or Centroid() ext for closed polygon )
    - id: refAxis
      type: SearchAThing.Sci.Vector3D
      description: reference rotation axis ( points plane normal right-hand rotate around )
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: input set of points ccw sorted
    content.vb: Public Shared Function SortCCW(pts As IEnumerable(Of Vector3D), tol As Double, center As Vector3D, refAxis As Vector3D) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.SortCCW*
  nameWithType.vb: Ext.SortCCW(IEnumerable(Of Vector3D), Double, Vector3D, Vector3D)
  fullName.vb: SearchAThing.Sci.Ext.SortCCW(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  name.vb: SortCCW(IEnumerable(Of Vector3D), Double, Vector3D, Vector3D)
- uid: SearchAThing.Sci.Ext.TakeUntilAdjacent(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.TakeUntilAdjacent(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean)
  id: TakeUntilAdjacent(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: TakeUntilAdjacent(IEnumerable<Line3D>, double, bool)
  nameWithType: Ext.TakeUntilAdjacent(IEnumerable<Line3D>, double, bool)
  fullName: SearchAThing.Sci.Ext.TakeUntilAdjacent(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>, double, bool)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: TakeUntilAdjacent
    path: src/sci/Polygon.cs
    startLine: 234
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    Return the input set of segments until an adjacency between one and next is found.

    It can rectify the versus of line (by default) if needed.

    Note: returned set references can be different if rectifyVersus==true
  example: []
  syntax:
    content: public static IEnumerable<Line3D> TakeUntilAdjacent(this IEnumerable<Line3D> segs, double tol, bool rectifyVersus = true)
    parameters:
    - id: segs
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    - id: rectifyVersus
      type: System.Boolean
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: Public Shared Function TakeUntilAdjacent(segs As IEnumerable(Of Line3D), tol As Double, rectifyVersus As Boolean = True) As IEnumerable(Of Line3D)
  overload: SearchAThing.Sci.Ext.TakeUntilAdjacent*
  nameWithType.vb: Ext.TakeUntilAdjacent(IEnumerable(Of Line3D), Double, Boolean)
  fullName.vb: SearchAThing.Sci.Ext.TakeUntilAdjacent(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D), Double, Boolean)
  name.vb: TakeUntilAdjacent(IEnumerable(Of Line3D), Double, Boolean)
- uid: SearchAThing.Sci.Ext.IsAClosedPoly(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.IsAClosedPoly(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  id: IsAClosedPoly(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: IsAClosedPoly(IEnumerable<Line3D>, double)
  nameWithType: Ext.IsAClosedPoly(IEnumerable<Line3D>, double)
  fullName: SearchAThing.Sci.Ext.IsAClosedPoly(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: IsAClosedPoly
    path: src/sci/Polygon.cs
    startLine: 288
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    Preprocess segs with SortPoly if needed.

    Return the ordered segments poly or null if not a closed poly.
  example: []
  syntax:
    content: public static IEnumerable<Line3D>? IsAClosedPoly(this IEnumerable<Line3D> segs, double tol)
    parameters:
    - id: segs
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: Public Shared Function IsAClosedPoly(segs As IEnumerable(Of Line3D), tol As Double) As IEnumerable(Of Line3D)
  overload: SearchAThing.Sci.Ext.IsAClosedPoly*
  nameWithType.vb: Ext.IsAClosedPoly(IEnumerable(Of Line3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.IsAClosedPoly(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D), Double)
  name.vb: IsAClosedPoly(IEnumerable(Of Line3D), Double)
- uid: SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Line3D,SearchAThing.Sci.GeomSegmentMode)
  commentId: M:SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Line3D,SearchAThing.Sci.GeomSegmentMode)
  id: Intersect(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Line3D,SearchAThing.Sci.GeomSegmentMode)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Intersect(IEnumerable<Line3D>, double, Line3D, GeomSegmentMode)
  nameWithType: Ext.Intersect(IEnumerable<Line3D>, double, Line3D, GeomSegmentMode)
  fullName: SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>, double, SearchAThing.Sci.Line3D, SearchAThing.Sci.GeomSegmentMode)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Intersect
    path: src/sci/Polygon.cs
    startLine: 309
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    Find intersection points (0,1,2) of the given line with the given polygon

    TODO unit test
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Intersect(this IEnumerable<Line3D> polygonSegments, double tol, Line3D line, GeomSegmentMode segmentMode)
    parameters:
    - id: polygonSegments
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    - id: line
      type: SearchAThing.Sci.Line3D
    - id: segmentMode
      type: SearchAThing.Sci.GeomSegmentMode
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Intersect(polygonSegments As IEnumerable(Of Line3D), tol As Double, line As Line3D, segmentMode As GeomSegmentMode) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.Intersect*
  nameWithType.vb: Ext.Intersect(IEnumerable(Of Line3D), Double, Line3D, GeomSegmentMode)
  fullName.vb: SearchAThing.Sci.Ext.Intersect(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D), Double, SearchAThing.Sci.Line3D, SearchAThing.Sci.GeomSegmentMode)
  name.vb: Intersect(IEnumerable(Of Line3D), Double, Line3D, GeomSegmentMode)
- uid: SearchAThing.Sci.Ext.ToHatch(netDxf.Entities.Polyline2D,netDxf.Entities.HatchPattern,System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.ToHatch(netDxf.Entities.Polyline2D,netDxf.Entities.HatchPattern,System.Boolean)
  id: ToHatch(netDxf.Entities.Polyline2D,netDxf.Entities.HatchPattern,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToHatch(Polyline2D, HatchPattern, bool)
  nameWithType: Ext.ToHatch(Polyline2D, HatchPattern, bool)
  fullName: SearchAThing.Sci.Ext.ToHatch(netDxf.Entities.Polyline2D, netDxf.Entities.HatchPattern, bool)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToHatch
    path: src/sci/Polygon.cs
    startLine: 329
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Hatch ToHatch(this Polyline2D lw, HatchPattern pattern, bool associative = true)
    parameters:
    - id: lw
      type: netDxf.Entities.Polyline2D
    - id: pattern
      type: netDxf.Entities.HatchPattern
    - id: associative
      type: System.Boolean
    return:
      type: netDxf.Entities.Hatch
    content.vb: Public Shared Function ToHatch(lw As Polyline2D, pattern As HatchPattern, associative As Boolean = True) As Hatch
  overload: SearchAThing.Sci.Ext.ToHatch*
  nameWithType.vb: Ext.ToHatch(Polyline2D, HatchPattern, Boolean)
  fullName.vb: SearchAThing.Sci.Ext.ToHatch(netDxf.Entities.Polyline2D, netDxf.Entities.HatchPattern, Boolean)
  name.vb: ToHatch(Polyline2D, HatchPattern, Boolean)
- uid: SearchAThing.Sci.Ext.ToHatch(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},netDxf.Entities.HatchPattern,System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.ToHatch(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},netDxf.Entities.HatchPattern,System.Boolean)
  id: ToHatch(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},netDxf.Entities.HatchPattern,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToHatch(IEnumerable<Geometry>, HatchPattern, bool)
  nameWithType: Ext.ToHatch(IEnumerable<Geometry>, HatchPattern, bool)
  fullName: SearchAThing.Sci.Ext.ToHatch(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>, netDxf.Entities.HatchPattern, bool)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToHatch
    path: src/sci/Polygon.cs
    startLine: 338
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Hatch ToHatch(this IEnumerable<Geometry> _geom, HatchPattern pattern, bool associative = true)
    parameters:
    - id: _geom
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
    - id: pattern
      type: netDxf.Entities.HatchPattern
    - id: associative
      type: System.Boolean
    return:
      type: netDxf.Entities.Hatch
    content.vb: Public Shared Function ToHatch(_geom As IEnumerable(Of Geometry), pattern As HatchPattern, associative As Boolean = True) As Hatch
  overload: SearchAThing.Sci.Ext.ToHatch*
  nameWithType.vb: Ext.ToHatch(IEnumerable(Of Geometry), HatchPattern, Boolean)
  fullName.vb: SearchAThing.Sci.Ext.ToHatch(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry), netDxf.Entities.HatchPattern, Boolean)
  name.vb: ToHatch(IEnumerable(Of Geometry), HatchPattern, Boolean)
- uid: SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry})
  commentId: M:SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry})
  id: QCadScript(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: QCadScript(IEnumerable<Geometry>)
  nameWithType: Ext.QCadScript(IEnumerable<Geometry>)
  fullName: SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: QCadScript
    path: src/sci/Polygon.cs
    startLine: 345
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: qcad script from geoms
  example: []
  syntax:
    content: public static string QCadScript(this IEnumerable<Geometry> geoms)
    parameters:
    - id: geoms
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
    return:
      type: System.String
    content.vb: Public Shared Function QCadScript(geoms As IEnumerable(Of Geometry)) As String
  overload: SearchAThing.Sci.Ext.QCadScript*
  nameWithType.vb: Ext.QCadScript(IEnumerable(Of Geometry))
  fullName.vb: SearchAThing.Sci.Ext.QCadScript(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry))
  name.vb: QCadScript(IEnumerable(Of Geometry))
- uid: SearchAThing.Sci.Ext.QCadScript(netDxf.Entities.Polyline2D,System.Double)
  commentId: M:SearchAThing.Sci.Ext.QCadScript(netDxf.Entities.Polyline2D,System.Double)
  id: QCadScript(netDxf.Entities.Polyline2D,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: QCadScript(Polyline2D, double)
  nameWithType: Ext.QCadScript(Polyline2D, double)
  fullName: SearchAThing.Sci.Ext.QCadScript(netDxf.Entities.Polyline2D, double)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: QCadScript
    path: src/sci/Polygon.cs
    startLine: 383
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: qcad script from lwp
  example: []
  syntax:
    content: public static string QCadScript(this Polyline2D lwp, double tol)
    parameters:
    - id: lwp
      type: netDxf.Entities.Polyline2D
    - id: tol
      type: System.Double
    return:
      type: System.String
    content.vb: Public Shared Function QCadScript(lwp As Polyline2D, tol As Double) As String
  overload: SearchAThing.Sci.Ext.QCadScript*
  nameWithType.vb: Ext.QCadScript(Polyline2D, Double)
  fullName.vb: SearchAThing.Sci.Ext.QCadScript(netDxf.Entities.Polyline2D, Double)
  name.vb: QCadScript(Polyline2D, Double)
- uid: SearchAThing.Sci.Ext.ToLwPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.ToLwPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  id: ToLwPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry},System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToLwPolyline(IEnumerable<Geometry>, double, CoordinateSystem3D, bool)
  nameWithType: Ext.ToLwPolyline(IEnumerable<Geometry>, double, CoordinateSystem3D, bool)
  fullName: SearchAThing.Sci.Ext.ToLwPolyline(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>, double, SearchAThing.Sci.CoordinateSystem3D, bool)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToLwPolyline
    path: src/sci/Polygon.cs
    startLine: 396
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    build 2d dxf polyline.

    precondition: geom vertex must lie on the same plane

    note: use RepeatFirstAtEnd extension to build a closed polyline
  example: []
  syntax:
    content: public static Polyline2D ToLwPolyline(this IEnumerable<Geometry> _geom, double tol, CoordinateSystem3D cs, bool closed)
    parameters:
    - id: _geom
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
      description: ''
    - id: tol
      type: System.Double
      description: length tolerance
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
      description: lw CS
    - id: closed
      type: System.Boolean
      description: ''
    return:
      type: netDxf.Entities.Polyline2D
      description: ''
    content.vb: Public Shared Function ToLwPolyline(_geom As IEnumerable(Of Geometry), tol As Double, cs As CoordinateSystem3D, closed As Boolean) As Polyline2D
  overload: SearchAThing.Sci.Ext.ToLwPolyline*
  nameWithType.vb: Ext.ToLwPolyline(IEnumerable(Of Geometry), Double, CoordinateSystem3D, Boolean)
  fullName.vb: SearchAThing.Sci.Ext.ToLwPolyline(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry), Double, SearchAThing.Sci.CoordinateSystem3D, Boolean)
  name.vb: ToLwPolyline(IEnumerable(Of Geometry), Double, CoordinateSystem3D, Boolean)
- uid: SearchAThing.Sci.Ext.ToPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.ToPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  id: ToPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToPolyline(IEnumerable<Vector3D>, bool)
  nameWithType: Ext.ToPolyline(IEnumerable<Vector3D>, bool)
  fullName: SearchAThing.Sci.Ext.ToPolyline(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, bool)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToPolyline
    path: src/sci/Polygon.cs
    startLine: 516
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    build 3d dxf polyline

    note: use RepeatFirstAtEnd extension to build a closed polyline
  example: []
  syntax:
    content: public static Polyline3D ToPolyline(this IEnumerable<Vector3D> pts, bool isClosed = true)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: isClosed
      type: System.Boolean
    return:
      type: netDxf.Entities.Polyline3D
    content.vb: Public Shared Function ToPolyline(pts As IEnumerable(Of Vector3D), isClosed As Boolean = True) As Polyline3D
  overload: SearchAThing.Sci.Ext.ToPolyline*
  nameWithType.vb: Ext.ToPolyline(IEnumerable(Of Vector3D), Boolean)
  fullName.vb: SearchAThing.Sci.Ext.ToPolyline(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Boolean)
  name.vb: ToPolyline(IEnumerable(Of Vector3D), Boolean)
- uid: SearchAThing.Sci.Ext.Boolean(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},ClipperLib.ClipType,System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.Boolean(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},ClipperLib.ClipType,System.Boolean)
  id: Boolean(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},ClipperLib.ClipType,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Boolean(IEnumerable<Vector3D>, double, IEnumerable<Vector3D>, ClipType, bool)
  nameWithType: Ext.Boolean(IEnumerable<Vector3D>, double, IEnumerable<Vector3D>, ClipType, bool)
  fullName: SearchAThing.Sci.Ext.Boolean(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double, System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, ClipperLib.ClipType, bool)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Boolean
    path: src/sci/Polygon.cs
    startLine: 526
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    can generate a Int64MapExceptionRange exception if double values can't fit into a In64 representation.

    In that case try with tolerances not too small.

    It is suggested to use a lenTol/10 to avoid lost of precision during domain conversions.

    Altenatively use Loop to find exact intersection between planar poly supporting lines and arcs.

    ( this implementation uses Int64Map and clipper library )
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<Vector3D>> Boolean(this IEnumerable<Vector3D> polyA, double tol, IEnumerable<Vector3D> polyB, ClipType type, bool selfCheckInt64MapTolerance = true)
    parameters:
    - id: polyA
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: polyB
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: type
      type: ClipperLib.ClipType
    - id: selfCheckInt64MapTolerance
      type: System.Boolean
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}}
    content.vb: Public Shared Function [Boolean](polyA As IEnumerable(Of Vector3D), tol As Double, polyB As IEnumerable(Of Vector3D), type As ClipType, selfCheckInt64MapTolerance As Boolean = True) As IEnumerable(Of IEnumerable(Of Vector3D))
  overload: SearchAThing.Sci.Ext.Boolean*
  nameWithType.vb: Ext.Boolean(IEnumerable(Of Vector3D), Double, IEnumerable(Of Vector3D), ClipType, Boolean)
  fullName.vb: SearchAThing.Sci.Ext.Boolean(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double, System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), ClipperLib.ClipType, Boolean)
  name.vb: Boolean(IEnumerable(Of Vector3D), Double, IEnumerable(Of Vector3D), ClipType, Boolean)
- uid: SearchAThing.Sci.Ext.ConvexHull2D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.ConvexHull2D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: ConvexHull2D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ConvexHull2D(IEnumerable<Vector3D>)
  nameWithType: Ext.ConvexHull2D(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.ConvexHull2D(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ConvexHull2D
    path: src/sci/Polygon.cs
    startLine: 552
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    compute convex hull using LoycCore

    https://github.com/qwertie/LoycCore
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> ConvexHull2D(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function ConvexHull2D(pts As IEnumerable(Of Vector3D)) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.ConvexHull2D*
  nameWithType.vb: Ext.ConvexHull2D(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.ConvexHull2D(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ConvexHull2D(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.Tessellate(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.Tessellate(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: Tessellate(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Tessellate(IEnumerable<Vector3D>)
  nameWithType: Ext.Tessellate(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.Tessellate(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Tessellate
    path: src/sci/Polygon.cs
    startLine: 566
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    tessellate given pts list using 1 contour in clockwise ordering

    see used tessellation library ( https://github.com/speps/LibTessDotNet )
  example: []
  syntax:
    content: public static IEnumerable<Triangle3D> Tessellate(this IEnumerable<Vector3D> _pts)
    parameters:
    - id: _pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: pts to tessellate in triangles
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Triangle3D}
      description: list of triangles
    content.vb: Public Shared Function Tessellate(_pts As IEnumerable(Of Vector3D)) As IEnumerable(Of Triangle3D)
  overload: SearchAThing.Sci.Ext.Tessellate*
  nameWithType.vb: Ext.Tessellate(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.Tessellate(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: Tessellate(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.ToTriangle3D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.ToTriangle3D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: ToTriangle3D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToTriangle3D(IEnumerable<Vector3D>)
  nameWithType: Ext.ToTriangle3D(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.ToTriangle3D(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Polygon.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToTriangle3D
    path: src/sci/Polygon.cs
    startLine: 594
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Triangle3D ToTriangle3D(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: SearchAThing.Sci.Triangle3D
    content.vb: Public Shared Function ToTriangle3D(pts As IEnumerable(Of Vector3D)) As Triangle3D
  overload: SearchAThing.Sci.Ext.ToTriangle3D*
  nameWithType.vb: Ext.ToTriangle3D(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.ToTriangle3D(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ToTriangle3D(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.ToCSV(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:SearchAThing.Sci.Ext.ToCSV(System.Collections.Generic.IEnumerable{System.Object})
  id: ToCSV(System.Collections.Generic.IEnumerable{System.Object})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToCSV(IEnumerable<object>)
  nameWithType: Ext.ToCSV(IEnumerable<object>)
  fullName: SearchAThing.Sci.Ext.ToCSV(System.Collections.Generic.IEnumerable<object>)
  type: Method
  source:
    remote:
      path: src/sci/Util.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToCSV
    path: src/sci/Util.cs
    startLine: 10
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    exports to a csv string some known fields

    note: not really a csv its a tab separated values for debug purpose

    just copy and paste
  example: []
  syntax:
    content: public static string ToCSV(this IEnumerable<object> lst)
    parameters:
    - id: lst
      type: System.Collections.Generic.IEnumerable{System.Object}
    return:
      type: System.String
    content.vb: Public Shared Function ToCSV(lst As IEnumerable(Of Object)) As String
  overload: SearchAThing.Sci.Ext.ToCSV*
  nameWithType.vb: Ext.ToCSV(IEnumerable(Of Object))
  fullName.vb: SearchAThing.Sci.Ext.ToCSV(System.Collections.Generic.IEnumerable(Of Object))
  name.vb: ToCSV(IEnumerable(Of Object))
- uid: SearchAThing.Sci.Ext.ToDVector3(System.Numerics.Vector3)
  commentId: M:SearchAThing.Sci.Ext.ToDVector3(System.Numerics.Vector3)
  id: ToDVector3(System.Numerics.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToDVector3(Vector3)
  nameWithType: Ext.ToDVector3(Vector3)
  fullName: SearchAThing.Sci.Ext.ToDVector3(System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToDVector3
    path: src/sci/Vector3.cs
    startLine: 8
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: convert System.Numerics.Vector3 to netdxf.Vector3
  example: []
  syntax:
    content: public static Vector3 ToDVector3(this Vector3 v)
    parameters:
    - id: v
      type: System.Numerics.Vector3
    return:
      type: netDxf.Vector3
    content.vb: Public Shared Function ToDVector3(v As Vector3) As Vector3
  overload: SearchAThing.Sci.Ext.ToDVector3*
- uid: SearchAThing.Sci.Ext.ToNVector3(netDxf.Vector3)
  commentId: M:SearchAThing.Sci.Ext.ToNVector3(netDxf.Vector3)
  id: ToNVector3(netDxf.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToNVector3(Vector3)
  nameWithType: Ext.ToNVector3(Vector3)
  fullName: SearchAThing.Sci.Ext.ToNVector3(netDxf.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToNVector3
    path: src/sci/Vector3.cs
    startLine: 13
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: convert netdxf.Vector3 to System.Numerics.Vector3 ( double cast to float )
  example: []
  syntax:
    content: public static Vector3 ToNVector3(this Vector3 v)
    parameters:
    - id: v
      type: netDxf.Vector3
    return:
      type: System.Numerics.Vector3
    content.vb: Public Shared Function ToNVector3(v As Vector3) As Vector3
  overload: SearchAThing.Sci.Ext.ToNVector3*
- uid: SearchAThing.Sci.Ext.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  commentId: M:SearchAThing.Sci.Ext.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  id: Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Clamp(Vector3, Vector3, Vector3)
  nameWithType: Ext.Clamp(Vector3, Vector3, Vector3)
  fullName: SearchAThing.Sci.Ext.Clamp(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Clamp
    path: src/sci/Vector3.cs
    startLine: 22
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: return clamped Vector3 between [min,max] interval
  example: []
  syntax:
    content: public static Vector3 Clamp(this Vector3 v, Vector3 min, Vector3 max)
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: xyz vector
    - id: min
      type: System.Numerics.Vector3
      description: min value admissible
    - id: max
      type: System.Numerics.Vector3
      description: max value admissible
    return:
      type: System.Numerics.Vector3
      description: given vector with xyz components clamped to corresponding min,max components
    content.vb: Public Shared Function Clamp(v As Vector3, min As Vector3, max As Vector3) As Vector3
  overload: SearchAThing.Sci.Ext.Clamp*
- uid: SearchAThing.Sci.Ext.Abs(System.Numerics.Vector3)
  commentId: M:SearchAThing.Sci.Ext.Abs(System.Numerics.Vector3)
  id: Abs(System.Numerics.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Abs(Vector3)
  nameWithType: Ext.Abs(Vector3)
  fullName: SearchAThing.Sci.Ext.Abs(System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Abs
    path: src/sci/Vector3.cs
    startLine: 34
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: return abs of given Vector3
  example: []
  syntax:
    content: public static Vector3 Abs(this Vector3 v)
    parameters:
    - id: v
      type: System.Numerics.Vector3
    return:
      type: System.Numerics.Vector3
    content.vb: Public Shared Function Abs(v As Vector3) As Vector3
  overload: SearchAThing.Sci.Ext.Abs*
- uid: SearchAThing.Sci.Ext.Debug(System.Numerics.Vector3,System.String)
  commentId: M:SearchAThing.Sci.Ext.Debug(System.Numerics.Vector3,System.String)
  id: Debug(System.Numerics.Vector3,System.String)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Debug(Vector3, string)
  nameWithType: Ext.Debug(Vector3, string)
  fullName: SearchAThing.Sci.Ext.Debug(System.Numerics.Vector3, string)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Debug
    path: src/sci/Vector3.cs
    startLine: 42
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: debug to console with optional prefix
  example: []
  syntax:
    content: public static Vector3 Debug(this Vector3 v, string prefix = "")
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: vector
    - id: prefix
      type: System.String
      description: optional prefix
    return:
      type: System.Numerics.Vector3
      description: vector
    content.vb: Public Shared Function Debug(v As Vector3, prefix As String = "") As Vector3
  overload: SearchAThing.Sci.Ext.Debug*
  nameWithType.vb: Ext.Debug(Vector3, String)
  fullName.vb: SearchAThing.Sci.Ext.Debug(System.Numerics.Vector3, String)
  name.vb: Debug(Vector3, String)
- uid: SearchAThing.Sci.Ext.Normalized(System.Numerics.Vector3)
  commentId: M:SearchAThing.Sci.Ext.Normalized(System.Numerics.Vector3)
  id: Normalized(System.Numerics.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Normalized(Vector3)
  nameWithType: Ext.Normalized(Vector3)
  fullName: SearchAThing.Sci.Ext.Normalized(System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Normalized
    path: src/sci/Vector3.cs
    startLine: 53
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: normalize given vector
  example: []
  syntax:
    content: public static Vector3 Normalized(this Vector3 v)
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: vector
    return:
      type: System.Numerics.Vector3
      description: normalized vector
    content.vb: Public Shared Function Normalized(v As Vector3) As Vector3
  overload: SearchAThing.Sci.Ext.Normalized*
- uid: SearchAThing.Sci.Ext.ToVector3D(System.Numerics.Vector3)
  commentId: M:SearchAThing.Sci.Ext.ToVector3D(System.Numerics.Vector3)
  id: ToVector3D(System.Numerics.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToVector3D(Vector3)
  nameWithType: Ext.ToVector3D(Vector3)
  fullName: SearchAThing.Sci.Ext.ToVector3D(System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToVector3D
    path: src/sci/Vector3.cs
    startLine: 61
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: convert given vector3 to vector3d
  example: []
  syntax:
    content: public static Vector3D ToVector3D(this Vector3 v)
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: vector3
    return:
      type: SearchAThing.Sci.Vector3D
      description: vector3d
    content.vb: Public Shared Function ToVector3D(v As Vector3) As Vector3D
  overload: SearchAThing.Sci.Ext.ToVector3D*
- uid: SearchAThing.Sci.Ext.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  commentId: M:SearchAThing.Sci.Ext.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  id: Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Transform(Vector3, Matrix4x4)
  nameWithType: Ext.Transform(Vector3, Matrix4x4)
  fullName: SearchAThing.Sci.Ext.Transform(System.Numerics.Vector3, System.Numerics.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Transform
    path: src/sci/Vector3.cs
    startLine: 64
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Vector3 Transform(this Vector3 v, Matrix4x4 m)
    parameters:
    - id: v
      type: System.Numerics.Vector3
    - id: m
      type: System.Numerics.Matrix4x4
    return:
      type: System.Numerics.Vector3
    content.vb: Public Shared Function Transform(v As Vector3, m As Matrix4x4) As Vector3
  overload: SearchAThing.Sci.Ext.Transform*
- uid: SearchAThing.Sci.Ext.SetX(System.Numerics.Vector3,System.Single)
  commentId: M:SearchAThing.Sci.Ext.SetX(System.Numerics.Vector3,System.Single)
  id: SetX(System.Numerics.Vector3,System.Single)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SetX(Vector3, float)
  nameWithType: Ext.SetX(Vector3, float)
  fullName: SearchAThing.Sci.Ext.SetX(System.Numerics.Vector3, float)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SetX
    path: src/sci/Vector3.cs
    startLine: 73
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: create new Vector3 with given x overriden, others yz unchanged
  example: []
  syntax:
    content: public static Vector3 SetX(this Vector3 v, float x)
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: vector
    - id: x
      type: System.Single
      description: x value to set
    return:
      type: System.Numerics.Vector3
      description: changed vector
    content.vb: Public Shared Function SetX(v As Vector3, x As Single) As Vector3
  overload: SearchAThing.Sci.Ext.SetX*
  nameWithType.vb: Ext.SetX(Vector3, Single)
  fullName.vb: SearchAThing.Sci.Ext.SetX(System.Numerics.Vector3, Single)
  name.vb: SetX(Vector3, Single)
- uid: SearchAThing.Sci.Ext.SetY(System.Numerics.Vector3,System.Single)
  commentId: M:SearchAThing.Sci.Ext.SetY(System.Numerics.Vector3,System.Single)
  id: SetY(System.Numerics.Vector3,System.Single)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SetY(Vector3, float)
  nameWithType: Ext.SetY(Vector3, float)
  fullName: SearchAThing.Sci.Ext.SetY(System.Numerics.Vector3, float)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SetY
    path: src/sci/Vector3.cs
    startLine: 82
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: create new Vector3 with given y overriden, others xz unchanged
  example: []
  syntax:
    content: public static Vector3 SetY(this Vector3 v, float y)
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: vector
    - id: y
      type: System.Single
      description: y value to set
    return:
      type: System.Numerics.Vector3
      description: changed vector
    content.vb: Public Shared Function SetY(v As Vector3, y As Single) As Vector3
  overload: SearchAThing.Sci.Ext.SetY*
  nameWithType.vb: Ext.SetY(Vector3, Single)
  fullName.vb: SearchAThing.Sci.Ext.SetY(System.Numerics.Vector3, Single)
  name.vb: SetY(Vector3, Single)
- uid: SearchAThing.Sci.Ext.SetZ(System.Numerics.Vector3,System.Single)
  commentId: M:SearchAThing.Sci.Ext.SetZ(System.Numerics.Vector3,System.Single)
  id: SetZ(System.Numerics.Vector3,System.Single)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: SetZ(Vector3, float)
  nameWithType: Ext.SetZ(Vector3, float)
  fullName: SearchAThing.Sci.Ext.SetZ(System.Numerics.Vector3, float)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: SetZ
    path: src/sci/Vector3.cs
    startLine: 91
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: create new Vector3 with given z overriden, others xy unchanged
  example: []
  syntax:
    content: public static Vector3 SetZ(this Vector3 v, float z)
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: vector
    - id: z
      type: System.Single
      description: z value to set
    return:
      type: System.Numerics.Vector3
      description: changed vector
    content.vb: Public Shared Function SetZ(v As Vector3, z As Single) As Vector3
  overload: SearchAThing.Sci.Ext.SetZ*
  nameWithType.vb: Ext.SetZ(Vector3, Single)
  fullName.vb: SearchAThing.Sci.Ext.SetZ(System.Numerics.Vector3, Single)
  name.vb: SetZ(Vector3, Single)
- uid: SearchAThing.Sci.Ext.ToDeg(System.Numerics.Vector3)
  commentId: M:SearchAThing.Sci.Ext.ToDeg(System.Numerics.Vector3)
  id: ToDeg(System.Numerics.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToDeg(Vector3)
  nameWithType: Ext.ToDeg(Vector3)
  fullName: SearchAThing.Sci.Ext.ToDeg(System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToDeg
    path: src/sci/Vector3.cs
    startLine: 99
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: convert given vector to degrees
  example: []
  syntax:
    content: public static Vector3 ToDeg(this Vector3 v)
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: vector source ( radians )
    return:
      type: System.Numerics.Vector3
      description: vector ( degrees )
    content.vb: Public Shared Function ToDeg(v As Vector3) As Vector3
  overload: SearchAThing.Sci.Ext.ToDeg*
- uid: SearchAThing.Sci.Ext.ToRad(System.Numerics.Vector3)
  commentId: M:SearchAThing.Sci.Ext.ToRad(System.Numerics.Vector3)
  id: ToRad(System.Numerics.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToRad(Vector3)
  nameWithType: Ext.ToRad(Vector3)
  fullName: SearchAThing.Sci.Ext.ToRad(System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToRad
    path: src/sci/Vector3.cs
    startLine: 107
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: convert given vector to radians
  example: []
  syntax:
    content: public static Vector3 ToRad(this Vector3 v)
    parameters:
    - id: v
      type: System.Numerics.Vector3
      description: vector source ( degrees )
    return:
      type: System.Numerics.Vector3
      description: vector ( radians )
    content.vb: Public Shared Function ToRad(v As Vector3) As Vector3
  overload: SearchAThing.Sci.Ext.ToRad*
- uid: SearchAThing.Sci.Ext.EqualsTol(System.Numerics.Vector3,System.Double,System.Numerics.Vector3)
  commentId: M:SearchAThing.Sci.Ext.EqualsTol(System.Numerics.Vector3,System.Double,System.Numerics.Vector3)
  id: EqualsTol(System.Numerics.Vector3,System.Double,System.Numerics.Vector3)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: EqualsTol(Vector3, double, Vector3)
  nameWithType: Ext.EqualsTol(Vector3, double, Vector3)
  fullName: SearchAThing.Sci.Ext.EqualsTol(System.Numerics.Vector3, double, System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/sci/Vector3.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: EqualsTol
    path: src/sci/Vector3.cs
    startLine: 110
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static bool EqualsTol(this Vector3 v, double tol, Vector3 other)
    parameters:
    - id: v
      type: System.Numerics.Vector3
    - id: tol
      type: System.Double
    - id: other
      type: System.Numerics.Vector3
    return:
      type: System.Boolean
    content.vb: Public Shared Function EqualsTol(v As Vector3, tol As Double, other As Vector3) As Boolean
  overload: SearchAThing.Sci.Ext.EqualsTol*
  nameWithType.vb: Ext.EqualsTol(Vector3, Double, Vector3)
  fullName.vb: SearchAThing.Sci.Ext.EqualsTol(System.Numerics.Vector3, Double, System.Numerics.Vector3)
  name.vb: EqualsTol(Vector3, Double, Vector3)
- uid: SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: Reversed(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Reversed(IEnumerable<Vector3D>)
  nameWithType: Ext.Reversed(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Reversed
    path: src/sci/Vector3D.cs
    startLine: 1332
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: retrieve reversed version of given point set ( used to convert ccw, cw )
  example: []
  syntax:
    content: public static IList<Vector3D> Reversed(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Collections.Generic.IList{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Reversed(pts As IEnumerable(Of Vector3D)) As IList(Of Vector3D)
  overload: SearchAThing.Sci.Ext.Reversed*
  nameWithType.vb: Ext.Reversed(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: Reversed(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IList{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IList{SearchAThing.Sci.Vector3D})
  id: Reversed(System.Collections.Generic.IList{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Reversed(IList<Vector3D>)
  nameWithType: Ext.Reversed(IList<Vector3D>)
  fullName: SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IList<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Reversed
    path: src/sci/Vector3D.cs
    startLine: 1342
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: retrieve reversed version of given point set ( used to convert ccw, cw )
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Reversed(this IList<Vector3D> pts)
    parameters:
    - id: pts
      type: System.Collections.Generic.IList{SearchAThing.Sci.Vector3D}
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Reversed(pts As IList(Of Vector3D)) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.Reversed*
  nameWithType.vb: Ext.Reversed(IList(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.Reversed(System.Collections.Generic.IList(Of SearchAThing.Sci.Vector3D))
  name.vb: Reversed(IList(Of Vector3D))
- uid: SearchAThing.Sci.Ext.DistinctKeepOrder(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  commentId: M:SearchAThing.Sci.Ext.DistinctKeepOrder(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  id: DistinctKeepOrder(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: DistinctKeepOrder(IEnumerable<Vector3D>, Vector3DEqualityComparer)
  nameWithType: Ext.DistinctKeepOrder(IEnumerable<Vector3D>, Vector3DEqualityComparer)
  fullName: SearchAThing.Sci.Ext.DistinctKeepOrder(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, SearchAThing.Sci.Vector3DEqualityComparer)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: DistinctKeepOrder
    path: src/sci/Vector3D.cs
    startLine: 1353
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: retrieve distinct of given vector set ensuring to maintain given order
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> DistinctKeepOrder(this IEnumerable<Vector3D> vectors, Vector3DEqualityComparer cmp)
    parameters:
    - id: vectors
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: cmp
      type: SearchAThing.Sci.Vector3DEqualityComparer
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function DistinctKeepOrder(vectors As IEnumerable(Of Vector3D), cmp As Vector3DEqualityComparer) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.DistinctKeepOrder*
  nameWithType.vb: Ext.DistinctKeepOrder(IEnumerable(Of Vector3D), Vector3DEqualityComparer)
  fullName.vb: SearchAThing.Sci.Ext.DistinctKeepOrder(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), SearchAThing.Sci.Vector3DEqualityComparer)
  name.vb: DistinctKeepOrder(IEnumerable(Of Vector3D), Vector3DEqualityComparer)
- uid: SearchAThing.Sci.Ext.StringRepresentation(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.StringRepresentation(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: StringRepresentation(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: StringRepresentation(IEnumerable<Vector3D>)
  nameWithType: Ext.StringRepresentation(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.StringRepresentation(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: StringRepresentation
    path: src/sci/Vector3D.cs
    startLine: 1368
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    array invariant string vector3d representation "(x1,y1,z2);(x2,y2,z2)";

    an array of Vector3D can be rebuilt from string using Vector3D.FromStringArray
  example: []
  syntax:
    content: public static string StringRepresentation(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: Public Shared Function StringRepresentation(pts As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.Sci.Ext.StringRepresentation*
  nameWithType.vb: Ext.StringRepresentation(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.StringRepresentation(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: StringRepresentation(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.Length(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.Length(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: Length(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Length(IEnumerable<Vector3D>)
  nameWithType: Ext.Length(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.Length(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Length
    path: src/sci/Vector3D.cs
    startLine: 1374
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: compute length of polyline from given seq_pts
  example: []
  syntax:
    content: public static double Length(this IEnumerable<Vector3D> seq_pts)
    parameters:
    - id: seq_pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Double
    content.vb: Public Shared Function Length(seq_pts As IEnumerable(Of Vector3D)) As Double
  overload: SearchAThing.Sci.Ext.Length*
  nameWithType.vb: Ext.Length(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.Length(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: Length(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.ToCoordSequence(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.ToCoordSequence(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: ToCoordSequence(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToCoordSequence(IEnumerable<Vector3D>)
  nameWithType: Ext.ToCoordSequence(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.ToCoordSequence(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToCoordSequence
    path: src/sci/Vector3D.cs
    startLine: 1392
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: from a list of vector3d retrieve x1,y1,z1,x2,y2,z2,... coord sequence
  example: []
  syntax:
    content: public static IEnumerable<double> ToCoordSequence(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Collections.Generic.IEnumerable{System.Double}
    content.vb: Public Shared Function ToCoordSequence(pts As IEnumerable(Of Vector3D)) As IEnumerable(Of Double)
  overload: SearchAThing.Sci.Ext.ToCoordSequence*
  nameWithType.vb: Ext.ToCoordSequence(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.ToCoordSequence(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ToCoordSequence(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.ToCoordString2D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.ToCoordString2D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: ToCoordString2D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToCoordString2D(IEnumerable<Vector3D>)
  nameWithType: Ext.ToCoordString2D(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.ToCoordString2D(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToCoordString2D
    path: src/sci/Vector3D.cs
    startLine: 1405
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: produce a string with x1,y1,x2,y2, ...
  example: []
  syntax:
    content: public static string ToCoordString2D(this IEnumerable<Vector3D> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: Public Shared Function ToCoordString2D(points As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.Sci.Ext.ToCoordString2D*
  nameWithType.vb: Ext.ToCoordString2D(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.ToCoordString2D(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ToCoordString2D(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.ToCoordString3D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.ToCoordString3D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: ToCoordString3D(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToCoordString3D(IEnumerable<Vector3D>)
  nameWithType: Ext.ToCoordString3D(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.ToCoordString3D(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToCoordString3D
    path: src/sci/Vector3D.cs
    startLine: 1431
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: produce a string with x1,y1,z1,x2,y2,z2, ...
  example: []
  syntax:
    content: public static string ToCoordString3D(this IEnumerable<Vector3D> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: Public Shared Function ToCoordString3D(points As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.Sci.Ext.ToCoordString3D*
  nameWithType.vb: Ext.ToCoordString3D(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.ToCoordString3D(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ToCoordString3D(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.CadScriptPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.CadScriptPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: CadScriptPolyline(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CadScriptPolyline(IEnumerable<Vector3D>)
  nameWithType: Ext.CadScriptPolyline(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.CadScriptPolyline(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CadScriptPolyline
    path: src/sci/Vector3D.cs
    startLine: 1459
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: create a 3dpolyline cadscript from given set of points
  example: []
  syntax:
    content: public static string CadScriptPolyline(this IEnumerable<Vector3D> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: point set
    return:
      type: System.String
      description: cad script
    content.vb: Public Shared Function CadScriptPolyline(points As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.Sci.Ext.CadScriptPolyline*
  nameWithType.vb: Ext.CadScriptPolyline(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.CadScriptPolyline(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: CadScriptPolyline(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.CadScriptPoint(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.CadScriptPoint(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: CadScriptPoint(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: CadScriptPoint(IEnumerable<Vector3D>)
  nameWithType: Ext.CadScriptPoint(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.CadScriptPoint(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: CadScriptPoint
    path: src/sci/Vector3D.cs
    startLine: 1477
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: create script that draw a point foreach of point set
  example: []
  syntax:
    content: public static string CadScriptPoint(this IEnumerable<Vector3D> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: points
    return:
      type: System.String
      description: cadscript
    content.vb: Public Shared Function CadScriptPoint(points As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.Sci.Ext.CadScriptPoint*
  nameWithType.vb: Ext.CadScriptPoint(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.CadScriptPoint(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: CadScriptPoint(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: EqualsTol(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: EqualsTol(IEnumerable<Vector3D>, double, IEnumerable<Vector3D>)
  nameWithType: Ext.EqualsTol(IEnumerable<Vector3D>, double, IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double, System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: EqualsTol
    path: src/sci/Vector3D.cs
    startLine: 1493
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: checks two list of vectors are equals and with same order of elements
  example: []
  syntax:
    content: public static bool EqualsTol(this IEnumerable<Vector3D> lst, double tol, IEnumerable<Vector3D> other)
    parameters:
    - id: lst
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: other
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Boolean
    content.vb: Public Shared Function EqualsTol(lst As IEnumerable(Of Vector3D), tol As Double, other As IEnumerable(Of Vector3D)) As Boolean
  overload: SearchAThing.Sci.Ext.EqualsTol*
  nameWithType.vb: Ext.EqualsTol(IEnumerable(Of Vector3D), Double, IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.EqualsTol(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double, System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: EqualsTol(IEnumerable(Of Vector3D), Double, IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.Sum(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.Sum(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: Sum(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Vector3D>)
  nameWithType: Ext.Sum(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.Sum(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Sum
    path: src/sci/Vector3D.cs
    startLine: 1517
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: retrieve the sum of given vector list
  example: []
  syntax:
    content: public static Vector3D Sum(this IEnumerable<Vector3D> lst)
    parameters:
    - id: lst
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
      description: vector list
    return:
      type: SearchAThing.Sci.Vector3D
      description: sum of given vector list
    content.vb: Public Shared Function Sum(lst As IEnumerable(Of Vector3D)) As Vector3D
  overload: SearchAThing.Sci.Ext.Sum*
  nameWithType.vb: Ext.Sum(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.Sum(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: Sum(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.Mean(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  commentId: M:SearchAThing.Sci.Ext.Mean(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  id: Mean(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Mean(IEnumerable<Vector3D>, bool)
  nameWithType: Ext.Mean(IEnumerable<Vector3D>, bool)
  fullName: SearchAThing.Sci.Ext.Mean(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, bool)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Mean
    path: src/sci/Vector3D.cs
    startLine: 1529
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    mean of given vetor3d list

    note: if used to compute poly center enable skipFirstAtEnd
  example: []
  syntax:
    content: public static Vector3D Mean(this IEnumerable<Vector3D> lst, bool skipFirstAtEnd = false)
    parameters:
    - id: lst
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: skipFirstAtEnd
      type: System.Boolean
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Function Mean(lst As IEnumerable(Of Vector3D), skipFirstAtEnd As Boolean = False) As Vector3D
  overload: SearchAThing.Sci.Ext.Mean*
  nameWithType.vb: Ext.Mean(IEnumerable(Of Vector3D), Boolean)
  fullName.vb: SearchAThing.Sci.Ext.Mean(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Boolean)
  name.vb: Mean(IEnumerable(Of Vector3D), Boolean)
- uid: SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: ZapDuplicates(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ZapDuplicates(IEnumerable<Vector3D>, double)
  nameWithType: Ext.ZapDuplicates(IEnumerable<Vector3D>, double)
  fullName: SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ZapDuplicates
    path: src/sci/Vector3D.cs
    startLine: 1542
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    return pts (maintaining order) w/out duplicates

    use the other overloaded method if already have a vector 3d equality comparer
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> ZapDuplicates(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function ZapDuplicates(pts As IEnumerable(Of Vector3D), tol As Double) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.ZapDuplicates*
  nameWithType.vb: Ext.ZapDuplicates(IEnumerable(Of Vector3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double)
  name.vb: ZapDuplicates(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  commentId: M:SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  id: ZapDuplicates(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ZapDuplicates(IEnumerable<Vector3D>, Vector3DEqualityComparer)
  nameWithType: Ext.ZapDuplicates(IEnumerable<Vector3D>, Vector3DEqualityComparer)
  fullName: SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, SearchAThing.Sci.Vector3DEqualityComparer)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ZapDuplicates
    path: src/sci/Vector3D.cs
    startLine: 1548
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: return pts (maintaining order) w/out duplicates
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> ZapDuplicates(this IEnumerable<Vector3D> pts, Vector3DEqualityComparer cmp)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: cmp
      type: SearchAThing.Sci.Vector3DEqualityComparer
    return:
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function ZapDuplicates(pts As IEnumerable(Of Vector3D), cmp As Vector3DEqualityComparer) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Ext.ZapDuplicates*
  nameWithType.vb: Ext.ZapDuplicates(IEnumerable(Of Vector3D), Vector3DEqualityComparer)
  fullName.vb: SearchAThing.Sci.Ext.ZapDuplicates(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), SearchAThing.Sci.Vector3DEqualityComparer)
  name.vb: ZapDuplicates(IEnumerable(Of Vector3D), Vector3DEqualityComparer)
- uid: SearchAThing.Sci.Ext.XYClosedPolys(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Int32)
  commentId: M:SearchAThing.Sci.Ext.XYClosedPolys(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Int32)
  id: XYClosedPolys(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: XYClosedPolys(IEnumerable<Line3D>, double, int)
  nameWithType: Ext.XYClosedPolys(IEnumerable<Line3D>, double, int)
  fullName: SearchAThing.Sci.Ext.XYClosedPolys(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>, double, int)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: XYClosedPolys
    path: src/sci/Vector3D.cs
    startLine: 1565
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: >-
    build polygons from given list of 2d segments by intersecting segments.

    (does not consider z)
  example: []
  syntax:
    content: public static IEnumerable<IReadOnlyList<Vector3D>> XYClosedPolys(this IEnumerable<Line3D> segs, double tol, int polyMaxPoints = 0)
    parameters:
    - id: segs
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    - id: polyMaxPoints
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SearchAThing.Sci.Vector3D}}
    content.vb: Public Shared Function XYClosedPolys(segs As IEnumerable(Of Line3D), tol As Double, polyMaxPoints As Integer = 0) As IEnumerable(Of IReadOnlyList(Of Vector3D))
  overload: SearchAThing.Sci.Ext.XYClosedPolys*
  nameWithType.vb: Ext.XYClosedPolys(IEnumerable(Of Line3D), Double, Integer)
  fullName.vb: SearchAThing.Sci.Ext.XYClosedPolys(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D), Double, Integer)
  name.vb: XYClosedPolys(IEnumerable(Of Line3D), Double, Integer)
- uid: SearchAThing.Sci.Ext.IsLinearIndependent(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.Sci.Ext.IsLinearIndependent(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  id: IsLinearIndependent(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: IsLinearIndependent(IEnumerable<Vector3D>)
  nameWithType: Ext.IsLinearIndependent(IEnumerable<Vector3D>)
  fullName: SearchAThing.Sci.Ext.IsLinearIndependent(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: IsLinearIndependent
    path: src/sci/Vector3D.cs
    startLine: 1690
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: states if given 3 vectors are linearly independent
  remarks: '[unit test](https://github.com/devel0/netcore-sci/tree/master/src/test/Vector3D/Vector3DTest_0001.cs)'
  example: []
  syntax:
    content: public static bool IsLinearIndependent(this IEnumerable<Vector3D> vectors)
    parameters:
    - id: vectors
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Boolean
      description: true if given vector are linearly independent
    content.vb: Public Shared Function IsLinearIndependent(vectors As IEnumerable(Of Vector3D)) As Boolean
  overload: SearchAThing.Sci.Ext.IsLinearIndependent*
  nameWithType.vb: Ext.IsLinearIndependent(IEnumerable(Of Vector3D))
  fullName.vb: SearchAThing.Sci.Ext.IsLinearIndependent(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: IsLinearIndependent(IEnumerable(Of Vector3D))
- uid: SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: BestFittingPlane(System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: BestFittingPlane(IEnumerable<Vector3D>, double)
  nameWithType: Ext.BestFittingPlane(IEnumerable<Vector3D>, double)
  fullName: SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>, double)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: BestFittingPlane
    path: src/sci/Vector3D.cs
    startLine: 1718
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: detect best fitting plane for given set of coplanar points
  example: []
  syntax:
    content: public static Plane3D BestFittingPlane(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: SearchAThing.Sci.Plane3D
    content.vb: Public Shared Function BestFittingPlane(pts As IEnumerable(Of Vector3D), tol As Double) As Plane3D
  overload: SearchAThing.Sci.Ext.BestFittingPlane*
  nameWithType.vb: Ext.BestFittingPlane(IEnumerable(Of Vector3D), Double)
  fullName.vb: SearchAThing.Sci.Ext.BestFittingPlane(System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D), Double)
  name.vb: BestFittingPlane(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.Sci.Ext.Sqrt(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Ext.Sqrt(SearchAThing.Sci.Vector3D)
  id: Sqrt(SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Sqrt(Vector3D)
  nameWithType: Ext.Sqrt(Vector3D)
  fullName: SearchAThing.Sci.Ext.Sqrt(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    remote:
      path: src/sci/Vector3D.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Sqrt
    path: src/sci/Vector3D.cs
    startLine: 1777
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: compute (Sqrt(v.x), Sqrt(v.y), Sqrt(v.z))
  example: []
  syntax:
    content: public static Vector3D Sqrt(this Vector3D v)
    parameters:
    - id: v
      type: SearchAThing.Sci.Vector3D
      description: input vector
    return:
      type: SearchAThing.Sci.Vector3D
      description: sqrt(v)
    content.vb: Public Shared Function Sqrt(v As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Ext.Sqrt*
- uid: SearchAThing.Sci.Ext.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)
  commentId: M:SearchAThing.Sci.Ext.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)
  id: Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Transform(Vector4, Matrix4x4)
  nameWithType: Ext.Transform(Vector4, Matrix4x4)
  fullName: SearchAThing.Sci.Ext.Transform(System.Numerics.Vector4, System.Numerics.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/sci/Vector4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Transform
    path: src/sci/Vector4Ext.cs
    startLine: 5
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Vector4 Transform(this Vector4 v, Matrix4x4 m)
    parameters:
    - id: v
      type: System.Numerics.Vector4
    - id: m
      type: System.Numerics.Matrix4x4
    return:
      type: System.Numerics.Vector4
    content.vb: Public Shared Function Transform(v As Vector4, m As Matrix4x4) As Vector4
  overload: SearchAThing.Sci.Ext.Transform*
- uid: SearchAThing.Sci.Ext.Normalized(System.Numerics.Vector4)
  commentId: M:SearchAThing.Sci.Ext.Normalized(System.Numerics.Vector4)
  id: Normalized(System.Numerics.Vector4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Normalized(Vector4)
  nameWithType: Ext.Normalized(Vector4)
  fullName: SearchAThing.Sci.Ext.Normalized(System.Numerics.Vector4)
  type: Method
  source:
    remote:
      path: src/sci/Vector4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Normalized
    path: src/sci/Vector4Ext.cs
    startLine: 9
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Vector4 Normalized(this Vector4 v)
    parameters:
    - id: v
      type: System.Numerics.Vector4
    return:
      type: System.Numerics.Vector4
    content.vb: Public Shared Function Normalized(v As Vector4) As Vector4
  overload: SearchAThing.Sci.Ext.Normalized*
- uid: SearchAThing.Sci.Ext.ToVector3D(System.Numerics.Vector4)
  commentId: M:SearchAThing.Sci.Ext.ToVector3D(System.Numerics.Vector4)
  id: ToVector3D(System.Numerics.Vector4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToVector3D(Vector4)
  nameWithType: Ext.ToVector3D(Vector4)
  fullName: SearchAThing.Sci.Ext.ToVector3D(System.Numerics.Vector4)
  type: Method
  source:
    remote:
      path: src/sci/Vector4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToVector3D
    path: src/sci/Vector4Ext.cs
    startLine: 17
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: convert given Vector4 to Vector3D ( discarding w )
  example: []
  syntax:
    content: public static Vector3D ToVector3D(this Vector4 v)
    parameters:
    - id: v
      type: System.Numerics.Vector4
      description: Vector4
    return:
      type: SearchAThing.Sci.Vector3D
      description: Vector3D
    content.vb: Public Shared Function ToVector3D(v As Vector4) As Vector3D
  overload: SearchAThing.Sci.Ext.ToVector3D*
- uid: SearchAThing.Sci.Ext.ToVector3(System.Numerics.Vector4)
  commentId: M:SearchAThing.Sci.Ext.ToVector3(System.Numerics.Vector4)
  id: ToVector3(System.Numerics.Vector4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToVector3(Vector4)
  nameWithType: Ext.ToVector3(Vector4)
  fullName: SearchAThing.Sci.Ext.ToVector3(System.Numerics.Vector4)
  type: Method
  source:
    remote:
      path: src/sci/Vector4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToVector3
    path: src/sci/Vector4Ext.cs
    startLine: 25
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: create vector3 from vector4 discarding w
  example: []
  syntax:
    content: public static Vector3 ToVector3(this Vector4 v)
    parameters:
    - id: v
      type: System.Numerics.Vector4
      description: vector4 input
    return:
      type: System.Numerics.Vector3
      description: vector3
    content.vb: Public Shared Function ToVector3(v As Vector4) As Vector3
  overload: SearchAThing.Sci.Ext.ToVector3*
- uid: SearchAThing.Sci.Ext.ToVector2(System.Numerics.Vector4)
  commentId: M:SearchAThing.Sci.Ext.ToVector2(System.Numerics.Vector4)
  id: ToVector2(System.Numerics.Vector4)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: ToVector2(Vector4)
  nameWithType: Ext.ToVector2(Vector4)
  fullName: SearchAThing.Sci.Ext.ToVector2(System.Numerics.Vector4)
  type: Method
  source:
    remote:
      path: src/sci/Vector4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: ToVector2
    path: src/sci/Vector4Ext.cs
    startLine: 33
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: create vector2 from vector4 discarding z, w
  example: []
  syntax:
    content: public static Vector2 ToVector2(this Vector4 v)
    parameters:
    - id: v
      type: System.Numerics.Vector4
      description: vector4 input
    return:
      type: System.Numerics.Vector2
      description: vector2
    content.vb: Public Shared Function ToVector2(v As Vector4) As Vector2
  overload: SearchAThing.Sci.Ext.ToVector2*
- uid: SearchAThing.Sci.Ext.Debug(System.Numerics.Vector4,System.String)
  commentId: M:SearchAThing.Sci.Ext.Debug(System.Numerics.Vector4,System.String)
  id: Debug(System.Numerics.Vector4,System.String)
  isExtensionMethod: true
  parent: SearchAThing.Sci.Ext
  langs:
  - csharp
  - vb
  name: Debug(Vector4, string)
  nameWithType: Ext.Debug(Vector4, string)
  fullName: SearchAThing.Sci.Ext.Debug(System.Numerics.Vector4, string)
  type: Method
  source:
    remote:
      path: src/sci/Vector4Ext.cs
      branch: master
      repo: git@github.com:devel0/netcore-sci.git
    id: Debug
    path: src/sci/Vector4Ext.cs
    startLine: 42
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: debug to console with optional prefix
  example: []
  syntax:
    content: public static Vector4 Debug(this Vector4 v, string prefix = "")
    parameters:
    - id: v
      type: System.Numerics.Vector4
      description: vector
    - id: prefix
      type: System.String
      description: optional prefix
    return:
      type: System.Numerics.Vector4
      description: vector
    content.vb: Public Shared Function Debug(v As Vector4, prefix As String = "") As Vector4
  overload: SearchAThing.Sci.Ext.Debug*
  nameWithType.vb: Ext.Debug(Vector4, String)
  fullName.vb: SearchAThing.Sci.Ext.Debug(System.Numerics.Vector4, String)
  name.vb: Debug(Vector4, String)
references:
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  href: SearchAThing.html
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
  spec.csharp:
  - uid: SearchAThing
    name: SearchAThing
    href: SearchAThing.html
  - name: .
  - uid: SearchAThing.Sci
    name: Sci
    href: SearchAThing.Sci.html
  spec.vb:
  - uid: SearchAThing
    name: SearchAThing
    href: SearchAThing.html
  - name: .
  - uid: SearchAThing.Sci
    name: Sci
    href: SearchAThing.Sci.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SearchAThing.Sci.Ext.RadTol*
  commentId: Overload:SearchAThing.Sci.Ext.RadTol
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_RadTol_System_Double_System_Double_
  name: RadTol
  nameWithType: Ext.RadTol
  fullName: SearchAThing.Sci.Ext.RadTol
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: SearchAThing.Sci.Ext.ToArc3D*
  commentId: Overload:SearchAThing.Sci.Ext.ToArc3D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToArc3D_netDxf_Entities_Arc_SearchAThing_Sci_Vector3D_System_Double_
  name: ToArc3D
  nameWithType: Ext.ToArc3D
  fullName: SearchAThing.Sci.Ext.ToArc3D
- uid: netDxf.Entities.Arc
  commentId: T:netDxf.Entities.Arc
  parent: netDxf.Entities
  isExternal: true
  name: Arc
  nameWithType: Arc
  fullName: netDxf.Entities.Arc
- uid: SearchAThing.Sci.Vector3D
  commentId: T:SearchAThing.Sci.Vector3D
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Vector3D.html
  name: Vector3D
  nameWithType: Vector3D
  fullName: SearchAThing.Sci.Vector3D
- uid: SearchAThing.Sci.Arc3D
  commentId: T:SearchAThing.Sci.Arc3D
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Arc3D.html
  name: Arc3D
  nameWithType: Arc3D
  fullName: SearchAThing.Sci.Arc3D
- uid: netDxf.Entities
  commentId: N:netDxf.Entities
  isExternal: true
  name: netDxf.Entities
  nameWithType: netDxf.Entities
  fullName: netDxf.Entities
  spec.csharp:
  - uid: netDxf
    name: netDxf
    isExternal: true
  - name: .
  - uid: netDxf.Entities
    name: Entities
    isExternal: true
  spec.vb:
  - uid: netDxf
    name: netDxf
    isExternal: true
  - name: .
  - uid: netDxf.Entities
    name: Entities
    isExternal: true
- uid: SearchAThing.Sci.Ext.AngleInRange*
  commentId: Overload:SearchAThing.Sci.Ext.AngleInRange
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_AngleInRange_System_Double_System_Double_System_Double_System_Double_
  name: AngleInRange
  nameWithType: Ext.AngleInRange
  fullName: SearchAThing.Sci.Ext.AngleInRange
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SearchAThing.Sci.Ext.BBox*
  commentId: Overload:SearchAThing.Sci.Ext.BBox
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_BBox_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: BBox
  nameWithType: Ext.BBox
  fullName: SearchAThing.Sci.Ext.BBox
- uid: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
  commentId: T:System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Vector3D>
  nameWithType: IEnumerable<Vector3D>
  fullName: System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>
  nameWithType.vb: IEnumerable(Of Vector3D)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D)
  name.vb: IEnumerable(Of Vector3D)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: )
- uid: SearchAThing.Sci.BBox3D
  commentId: T:SearchAThing.Sci.BBox3D
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.BBox3D.html
  name: BBox3D
  nameWithType: BBox3D
  fullName: SearchAThing.Sci.BBox3D
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: netDxf.Entities.EntityObject
  commentId: T:netDxf.Entities.EntityObject
  parent: netDxf.Entities
  isExternal: true
  name: EntityObject
  nameWithType: EntityObject
  fullName: netDxf.Entities.EntityObject
- uid: System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
  commentId: T:System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<EntityObject>
  nameWithType: IEnumerable<EntityObject>
  fullName: System.Collections.Generic.IEnumerable<netDxf.Entities.EntityObject>
  nameWithType.vb: IEnumerable(Of EntityObject)
  fullName.vb: System.Collections.Generic.IEnumerable(Of netDxf.Entities.EntityObject)
  name.vb: IEnumerable(Of EntityObject)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: netDxf.Entities.EntityObject
    name: EntityObject
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: netDxf.Entities.EntityObject
    name: EntityObject
    isExternal: true
  - name: )
- uid: SearchAThing.Sci.Ext.Points*
  commentId: Overload:SearchAThing.Sci.Ext.Points
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Points_netDxf_Entities_EntityObject_
  name: Points
  nameWithType: Ext.Points
  fullName: SearchAThing.Sci.Ext.Points
- uid: SearchAThing.Sci.Ext.Union*
  commentId: Overload:SearchAThing.Sci.Ext.Union
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Union_System_Collections_Generic_IEnumerable_SearchAThing_Sci_BBox3D__
  name: Union
  nameWithType: Ext.Union
  fullName: SearchAThing.Sci.Ext.Union
- uid: System.Collections.Generic.IEnumerable{SearchAThing.Sci.BBox3D}
  commentId: T:System.Collections.Generic.IEnumerable{SearchAThing.Sci.BBox3D}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<BBox3D>
  nameWithType: IEnumerable<BBox3D>
  fullName: System.Collections.Generic.IEnumerable<SearchAThing.Sci.BBox3D>
  nameWithType.vb: IEnumerable(Of BBox3D)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.BBox3D)
  name.vb: IEnumerable(Of BBox3D)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SearchAThing.Sci.BBox3D
    name: BBox3D
    href: SearchAThing.Sci.BBox3D.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.BBox3D
    name: BBox3D
    href: SearchAThing.Sci.BBox3D.html
  - name: )
- uid: SearchAThing.Sci.Ext.CircleBy3Points*
  commentId: Overload:SearchAThing.Sci.Ext.CircleBy3Points
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CircleBy3Points_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: CircleBy3Points
  nameWithType: Ext.CircleBy3Points
  fullName: SearchAThing.Sci.Ext.CircleBy3Points
- uid: SearchAThing.Sci.Circle3D
  commentId: T:SearchAThing.Sci.Circle3D
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Circle3D.html
  name: Circle3D
  nameWithType: Circle3D
  fullName: SearchAThing.Sci.Circle3D
- uid: SearchAThing.Sci.Ext.ToCircle3D*
  commentId: Overload:SearchAThing.Sci.Ext.ToCircle3D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToCircle3D_netDxf_Entities_Circle_
  name: ToCircle3D
  nameWithType: Ext.ToCircle3D
  fullName: SearchAThing.Sci.Ext.ToCircle3D
- uid: netDxf.Entities.Circle
  commentId: T:netDxf.Entities.Circle
  parent: netDxf.Entities
  isExternal: true
  name: Circle
  nameWithType: Circle
  fullName: netDxf.Entities.Circle
- uid: SearchAThing.Sci.Ext.EqualsTol*
  commentId: Overload:SearchAThing.Sci.Ext.EqualsTol
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_EqualsTol_netDxf_Vector3_System_Double_netDxf_Vector3_
  name: EqualsTol
  nameWithType: Ext.EqualsTol
  fullName: SearchAThing.Sci.Ext.EqualsTol
- uid: netDxf.Vector3
  commentId: T:netDxf.Vector3
  parent: netDxf
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: netDxf.Vector3
- uid: netDxf
  commentId: N:netDxf
  isExternal: true
  name: netDxf
  nameWithType: netDxf
  fullName: netDxf
- uid: SearchAThing.Sci.Ext.SetLayer*
  commentId: Overload:SearchAThing.Sci.Ext.SetLayer
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_SetLayer_netDxf_Entities_EntityObject_netDxf_Tables_Layer_
  name: SetLayer
  nameWithType: Ext.SetLayer
  fullName: SearchAThing.Sci.Ext.SetLayer
- uid: netDxf.Tables.Layer
  commentId: T:netDxf.Tables.Layer
  parent: netDxf.Tables
  isExternal: true
  name: Layer
  nameWithType: Layer
  fullName: netDxf.Tables.Layer
- uid: netDxf.Tables
  commentId: N:netDxf.Tables
  isExternal: true
  name: netDxf.Tables
  nameWithType: netDxf.Tables
  fullName: netDxf.Tables
  spec.csharp:
  - uid: netDxf
    name: netDxf
    isExternal: true
  - name: .
  - uid: netDxf.Tables
    name: Tables
    isExternal: true
  spec.vb:
  - uid: netDxf
    name: netDxf
    isExternal: true
  - name: .
  - uid: netDxf.Tables
    name: Tables
    isExternal: true
- uid: SearchAThing.Sci.Ext.MidPoint*
  commentId: Overload:SearchAThing.Sci.Ext.MidPoint
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_MidPoint_netDxf_Entities_Polyline2D_
  name: MidPoint
  nameWithType: Ext.MidPoint
  fullName: SearchAThing.Sci.Ext.MidPoint
- uid: netDxf.Entities.Polyline2D
  commentId: T:netDxf.Entities.Polyline2D
  parent: netDxf.Entities
  isExternal: true
  name: Polyline2D
  nameWithType: Polyline2D
  fullName: netDxf.Entities.Polyline2D
- uid: SearchAThing.Sci.Ext.Explode*
  commentId: Overload:SearchAThing.Sci.Ext.Explode
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Explode_netDxf_Entities_Insert_
  name: Explode
  nameWithType: Ext.Explode
  fullName: SearchAThing.Sci.Ext.Explode
- uid: netDxf.Entities.Insert
  commentId: T:netDxf.Entities.Insert
  parent: netDxf.Entities
  isExternal: true
  name: Insert
  nameWithType: Insert
  fullName: netDxf.Entities.Insert
- uid: SearchAThing.Sci.Ext.Vector3DCoords*
  commentId: Overload:SearchAThing.Sci.Ext.Vector3DCoords
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Vector3DCoords_netDxf_Entities_Polyline3D_
  name: Vector3DCoords
  nameWithType: Ext.Vector3DCoords
  fullName: SearchAThing.Sci.Ext.Vector3DCoords
- uid: netDxf.Entities.Polyline3D
  commentId: T:netDxf.Entities.Polyline3D
  parent: netDxf.Entities
  isExternal: true
  name: Polyline3D
  nameWithType: Polyline3D
  fullName: netDxf.Entities.Polyline3D
- uid: SearchAThing.Sci.Ext.RepeatFirstAtEnd*
  commentId: Overload:SearchAThing.Sci.Ext.RepeatFirstAtEnd
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_RepeatFirstAtEnd_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Double_
  name: RepeatFirstAtEnd
  nameWithType: Ext.RepeatFirstAtEnd
  fullName: SearchAThing.Sci.Ext.RepeatFirstAtEnd
- uid: SearchAThing.Sci.Ext.CoordTransform*
  commentId: Overload:SearchAThing.Sci.Ext.CoordTransform
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CoordTransform_netDxf_DxfDocument_System_Func_SearchAThing_Sci_Vector3D_SearchAThing_Sci_Vector3D__
  name: CoordTransform
  nameWithType: Ext.CoordTransform
  fullName: SearchAThing.Sci.Ext.CoordTransform
- uid: netDxf.DxfDocument
  commentId: T:netDxf.DxfDocument
  parent: netDxf
  isExternal: true
  name: DxfDocument
  nameWithType: DxfDocument
  fullName: netDxf.DxfDocument
- uid: System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D}
  commentId: T:System.Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Vector3D, Vector3D>
  nameWithType: Func<Vector3D, Vector3D>
  fullName: System.Func<SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D>
  nameWithType.vb: Func(Of Vector3D, Vector3D)
  fullName.vb: System.Func(Of SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  name.vb: Func(Of Vector3D, Vector3D)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: ','
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: ','
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: SearchAThing.Sci.Ext.AddEntity*
  commentId: Overload:SearchAThing.Sci.Ext.AddEntity
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_AddEntity_netDxf_DxfObject_netDxf_Entities_EntityObject_netDxf_Tables_Layer_
  name: AddEntity
  nameWithType: Ext.AddEntity
  fullName: SearchAThing.Sci.Ext.AddEntity
- uid: netDxf.DxfObject
  commentId: T:netDxf.DxfObject
  parent: netDxf
  isExternal: true
  name: DxfObject
  nameWithType: DxfObject
  fullName: netDxf.DxfObject
- uid: SearchAThing.Sci.Ext.AddEntities*
  commentId: Overload:SearchAThing.Sci.Ext.AddEntities
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_AddEntities_netDxf_DxfObject_System_Collections_Generic_IEnumerable_netDxf_Entities_EntityObject__netDxf_Tables_Layer_
  name: AddEntities
  nameWithType: Ext.AddEntities
  fullName: SearchAThing.Sci.Ext.AddEntities
- uid: SearchAThing.Sci.Ext.DrawStar*
  commentId: Overload:SearchAThing.Sci.Ext.DrawStar
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_DrawStar_netDxf_DxfObject_SearchAThing_Sci_Vector3D_System_Double_netDxf_Tables_Layer_
  name: DrawStar
  nameWithType: Ext.DrawStar
  fullName: SearchAThing.Sci.Ext.DrawStar
- uid: SearchAThing.Sci.Ext.DrawCube*
  commentId: Overload:SearchAThing.Sci.Ext.DrawCube
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_DrawCube_netDxf_DxfObject_SearchAThing_Sci_Vector3D_System_Double_netDxf_Tables_Layer_
  name: DrawCube
  nameWithType: Ext.DrawCube
  fullName: SearchAThing.Sci.Ext.DrawCube
- uid: SearchAThing.Sci.Ext.DrawCuboid*
  commentId: Overload:SearchAThing.Sci.Ext.DrawCuboid
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_DrawCuboid_netDxf_DxfObject_SearchAThing_Sci_Vector3D_SearchAThing_Sci_Vector3D_netDxf_Tables_Layer_
  name: DrawCuboid
  nameWithType: Ext.DrawCuboid
  fullName: SearchAThing.Sci.Ext.DrawCuboid
- uid: SearchAThing.Sci.Ext.CadScript*
  commentId: Overload:SearchAThing.Sci.Ext.CadScript
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CadScript_netDxf_Entities_Face3D_
  name: CadScript
  nameWithType: Ext.CadScript
  fullName: SearchAThing.Sci.Ext.CadScript
- uid: netDxf.Entities.Face3D
  commentId: T:netDxf.Entities.Face3D
  parent: netDxf.Entities
  isExternal: true
  name: Face3D
  nameWithType: Face3D
  fullName: netDxf.Entities.Face3D
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SearchAThing.Sci.Ext.AutoZoom*
  commentId: Overload:SearchAThing.Sci.Ext.AutoZoom
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_AutoZoom_netDxf_DxfDocument_SearchAThing_Sci_BBox3D_
  name: AutoZoom
  nameWithType: Ext.AutoZoom
  fullName: SearchAThing.Sci.Ext.AutoZoom
- uid: SearchAThing.Sci.Ext.SetColor*
  commentId: Overload:SearchAThing.Sci.Ext.SetColor
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_SetColor_netDxf_Entities_EntityObject_netDxf_AciColor_
  name: SetColor
  nameWithType: Ext.SetColor
  fullName: SearchAThing.Sci.Ext.SetColor
- uid: netDxf.AciColor
  commentId: T:netDxf.AciColor
  parent: netDxf
  isExternal: true
  name: AciColor
  nameWithType: AciColor
  fullName: netDxf.AciColor
- uid: SearchAThing.Sci.Ext.DrawTimeline*
  commentId: Overload:SearchAThing.Sci.Ext.DrawTimeline
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_DrawTimeline_netDxf_DxfObject_System_Collections_Generic_List_System_ValueTuple_System_DateTime_System_DateTime___System_Double_System_Double_System_Double_System_Double_System_Func_System_DateTime_System_String__
  name: DrawTimeline
  nameWithType: Ext.DrawTimeline
  fullName: SearchAThing.Sci.Ext.DrawTimeline
- uid: System.Collections.Generic.List{System.ValueTuple{System.DateTime,System.DateTime}}
  commentId: T:System.Collections.Generic.List{System.ValueTuple{System.DateTime,System.DateTime}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<(DateTime from, DateTime to)>
  nameWithType: List<(DateTime from, DateTime to)>
  fullName: System.Collections.Generic.List<(System.DateTime from, System.DateTime to)>
  nameWithType.vb: List(Of (from As Date, to As Date))
  fullName.vb: System.Collections.Generic.List(Of (from As Date, to As Date))
  name.vb: List(Of (from As Date, to As Date))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: (
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: " "
  - uid: System.ValueTuple{System.DateTime,System.DateTime}.from
    name: from
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.datetime,system.datetime-.from
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: " "
  - uid: System.ValueTuple{System.DateTime,System.DateTime}.to
    name: to
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.datetime,system.datetime-.to
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.DateTime,System.DateTime}.from
    name: from
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.datetime,system.datetime-.from
  - name: " "
  - name: As
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.DateTime,System.DateTime}.to
    name: to
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.datetime,system.datetime-.to
  - name: " "
  - name: As
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
  - name: )
- uid: System.Func{System.DateTime,System.String}
  commentId: T:System.Func{System.DateTime,System.String}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<DateTime, string>
  nameWithType: Func<DateTime, string>
  fullName: System.Func<System.DateTime, string>
  nameWithType.vb: Func(Of Date, String)
  fullName.vb: System.Func(Of Date, String)
  name.vb: Func(Of Date, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SearchAThing.Sci.Ext.Set*
  commentId: Overload:SearchAThing.Sci.Ext.Set
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Set_netDxf_Entities_Hatch_SearchAThing_Sci_Ext_HatchSetterDelegate_
  name: Set
  nameWithType: Ext.Set
  fullName: SearchAThing.Sci.Ext.Set
- uid: netDxf.Entities.Hatch
  commentId: T:netDxf.Entities.Hatch
  parent: netDxf.Entities
  isExternal: true
  name: Hatch
  nameWithType: Hatch
  fullName: netDxf.Entities.Hatch
- uid: SearchAThing.Sci.Ext.HatchSetterDelegate
  commentId: T:SearchAThing.Sci.Ext.HatchSetterDelegate
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Ext.html
  name: Ext.HatchSetterDelegate
  nameWithType: Ext.HatchSetterDelegate
  fullName: SearchAThing.Sci.Ext.HatchSetterDelegate
  spec.csharp:
  - uid: SearchAThing.Sci.Ext
    name: Ext
    href: SearchAThing.Sci.Ext.html
  - name: .
  - uid: SearchAThing.Sci.Ext.HatchSetterDelegate
    name: HatchSetterDelegate
    href: SearchAThing.Sci.Ext.HatchSetterDelegate.html
  spec.vb:
  - uid: SearchAThing.Sci.Ext
    name: Ext
    href: SearchAThing.Sci.Ext.html
  - name: .
  - uid: SearchAThing.Sci.Ext.HatchSetterDelegate
    name: HatchSetterDelegate
    href: SearchAThing.Sci.Ext.HatchSetterDelegate.html
- uid: SearchAThing.Sci.Ext.BBox3D*
  commentId: Overload:SearchAThing.Sci.Ext.BBox3D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_BBox3D_netDxf_DxfDocument_
  name: BBox3D
  nameWithType: Ext.BBox3D
  fullName: SearchAThing.Sci.Ext.BBox3D
- uid: SearchAThing.Sci.Ext.ModelSpace*
  commentId: Overload:SearchAThing.Sci.Ext.ModelSpace
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ModelSpace_netDxf_DxfDocument_
  name: ModelSpace
  nameWithType: Ext.ModelSpace
  fullName: SearchAThing.Sci.Ext.ModelSpace
- uid: netDxf.Blocks.Block
  commentId: T:netDxf.Blocks.Block
  parent: netDxf.Blocks
  isExternal: true
  name: Block
  nameWithType: Block
  fullName: netDxf.Blocks.Block
- uid: netDxf.Blocks
  commentId: N:netDxf.Blocks
  isExternal: true
  name: netDxf.Blocks
  nameWithType: netDxf.Blocks
  fullName: netDxf.Blocks
  spec.csharp:
  - uid: netDxf
    name: netDxf
    isExternal: true
  - name: .
  - uid: netDxf.Blocks
    name: Blocks
    isExternal: true
  spec.vb:
  - uid: netDxf
    name: netDxf
    isExternal: true
  - name: .
  - uid: netDxf.Blocks
    name: Blocks
    isExternal: true
- uid: SearchAThing.Sci.Ext.Entities*
  commentId: Overload:SearchAThing.Sci.Ext.Entities
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Entities_netDxf_DxfDocument_
  name: Entities
  nameWithType: Ext.Entities
  fullName: SearchAThing.Sci.Ext.Entities
- uid: SearchAThing.Sci.Ext.CS*
  commentId: Overload:SearchAThing.Sci.Ext.CS
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CS_netDxf_Entities_EntityObject_
  name: CS
  nameWithType: Ext.CS
  fullName: SearchAThing.Sci.Ext.CS
- uid: SearchAThing.Sci.CoordinateSystem3D
  commentId: T:SearchAThing.Sci.CoordinateSystem3D
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.CoordinateSystem3D.html
  name: CoordinateSystem3D
  nameWithType: CoordinateSystem3D
  fullName: SearchAThing.Sci.CoordinateSystem3D
- uid: SearchAThing.Sci.Ext.OffsetGeoms*
  commentId: Overload:SearchAThing.Sci.Ext.OffsetGeoms
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_OffsetGeoms_netDxf_Entities_Polyline2D_System_Double_SearchAThing_Sci_Vector3D_System_Double_
  name: OffsetGeoms
  nameWithType: Ext.OffsetGeoms
  fullName: SearchAThing.Sci.Ext.OffsetGeoms
- uid: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
  commentId: T:System.Collections.Generic.IEnumerable{SearchAThing.Sci.Edge}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Edge>
  nameWithType: IEnumerable<Edge>
  fullName: System.Collections.Generic.IEnumerable<SearchAThing.Sci.Edge>
  nameWithType.vb: IEnumerable(Of Edge)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Edge)
  name.vb: IEnumerable(Of Edge)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SearchAThing.Sci.Edge
    name: Edge
    href: SearchAThing.Sci.Edge.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Edge
    name: Edge
    href: SearchAThing.Sci.Edge.html
  - name: )
- uid: SearchAThing.Sci.Ext.Offset*
  commentId: Overload:SearchAThing.Sci.Ext.Offset
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Offset_netDxf_Entities_Polyline2D_System_Double_SearchAThing_Sci_Vector3D_System_Double_
  name: Offset
  nameWithType: Ext.Offset
  fullName: SearchAThing.Sci.Ext.Offset
- uid: SearchAThing.Sci.Ext.QCadScript*
  commentId: Overload:SearchAThing.Sci.Ext.QCadScript
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_QCadScript_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Edge__System_Boolean_
  name: QCadScript
  nameWithType: Ext.QCadScript
  fullName: SearchAThing.Sci.Ext.QCadScript
- uid: SearchAThing.Sci.Ext.CheckSort*
  commentId: Overload:SearchAThing.Sci.Ext.CheckSort
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CheckSort_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Edge__System_Double_
  name: CheckSort
  nameWithType: Ext.CheckSort
  fullName: SearchAThing.Sci.Ext.CheckSort
- uid: SearchAThing.Sci.Ext.CheckSense*
  commentId: Overload:SearchAThing.Sci.Ext.CheckSense
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CheckSense_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Edge__System_Double_
  name: CheckSense
  nameWithType: Ext.CheckSense
  fullName: SearchAThing.Sci.Ext.CheckSense
- uid: SearchAThing.Sci.Ext.MakeVertexToEdges*
  commentId: Overload:SearchAThing.Sci.Ext.MakeVertexToEdges
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_MakeVertexToEdges_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Edge__System_Double_
  name: MakeVertexToEdges
  nameWithType: Ext.MakeVertexToEdges
  fullName: SearchAThing.Sci.Ext.MakeVertexToEdges
- uid: System.Collections.Generic.Dictionary{SearchAThing.Sci.Vector3D,System.Collections.Generic.List{SearchAThing.Sci.Edge}}
  commentId: T:System.Collections.Generic.Dictionary{SearchAThing.Sci.Vector3D,System.Collections.Generic.List{SearchAThing.Sci.Edge}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<Vector3D, List<Edge>>
  nameWithType: Dictionary<Vector3D, List<Edge>>
  fullName: System.Collections.Generic.Dictionary<SearchAThing.Sci.Vector3D, System.Collections.Generic.List<SearchAThing.Sci.Edge>>
  nameWithType.vb: Dictionary(Of Vector3D, List(Of Edge))
  fullName.vb: System.Collections.Generic.Dictionary(Of SearchAThing.Sci.Vector3D, System.Collections.Generic.List(Of SearchAThing.Sci.Edge))
  name.vb: Dictionary(Of Vector3D, List(Of Edge))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: SearchAThing.Sci.Edge
    name: Edge
    href: SearchAThing.Sci.Edge.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Edge
    name: Edge
    href: SearchAThing.Sci.Edge.html
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: SearchAThing.Sci.Ext.AutoTrimExtends*
  commentId: Overload:SearchAThing.Sci.Ext.AutoTrimExtends
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_AutoTrimExtends_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Edge__System_Double_
  name: AutoTrimExtends
  nameWithType: Ext.AutoTrimExtends
  fullName: SearchAThing.Sci.Ext.AutoTrimExtends
- uid: SearchAThing.Sci.Ext.ToFace*
  commentId: Overload:SearchAThing.Sci.Ext.ToFace
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToFace_System_Collections_Generic_IEnumerable_netDxf_Entities_Polyline2D__System_Double_
  name: ToFace
  nameWithType: Ext.ToFace
  fullName: SearchAThing.Sci.Ext.ToFace
- uid: System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2D}
  commentId: T:System.Collections.Generic.IEnumerable{netDxf.Entities.Polyline2D}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Polyline2D>
  nameWithType: IEnumerable<Polyline2D>
  fullName: System.Collections.Generic.IEnumerable<netDxf.Entities.Polyline2D>
  nameWithType.vb: IEnumerable(Of Polyline2D)
  fullName.vb: System.Collections.Generic.IEnumerable(Of netDxf.Entities.Polyline2D)
  name.vb: IEnumerable(Of Polyline2D)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: netDxf.Entities.Polyline2D
    name: Polyline2D
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: netDxf.Entities.Polyline2D
    name: Polyline2D
    isExternal: true
  - name: )
- uid: SearchAThing.Sci.Face
  commentId: T:SearchAThing.Sci.Face
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Face.html
  name: Face
  nameWithType: Face
  fullName: SearchAThing.Sci.Face
- uid: SearchAThing.Sci.Loop
  commentId: T:SearchAThing.Sci.Loop
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Loop.html
  name: Loop
  nameWithType: Loop
  fullName: SearchAThing.Sci.Loop
- uid: SearchAThing.Sci.Ext.MinDistance*
  commentId: Overload:SearchAThing.Sci.Ext.MinDistance
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_MinDistance_System_Collections_Generic_IEnumerable_System_Double__
  name: MinDistance
  nameWithType: Ext.MinDistance
  fullName: SearchAThing.Sci.Ext.MinDistance
- uid: System.Collections.Generic.IEnumerable{System.Double}
  commentId: T:System.Collections.Generic.IEnumerable{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<double>
  nameWithType: IEnumerable<double>
  fullName: System.Collections.Generic.IEnumerable<double>
  nameWithType.vb: IEnumerable(Of Double)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: SearchAThing.Sci.Ext.ToPlane*
  commentId: Overload:SearchAThing.Sci.Ext.ToPlane
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToPlane_netDxf_Entities_Polyline2D_
  name: ToPlane
  nameWithType: Ext.ToPlane
  fullName: SearchAThing.Sci.Ext.ToPlane
- uid: SearchAThing.Sci.Plane3D
  commentId: T:SearchAThing.Sci.Plane3D
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Plane3D.html
  name: Plane3D
  nameWithType: Plane3D
  fullName: SearchAThing.Sci.Plane3D
- uid: SearchAThing.Sci.Ext.ToGeometries*
  commentId: Overload:SearchAThing.Sci.Ext.ToGeometries
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToGeometries_netDxf_Entities_Polyline2D_System_Double_
  name: ToGeometries
  nameWithType: Ext.ToGeometries
  fullName: SearchAThing.Sci.Ext.ToGeometries
- uid: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
  commentId: T:System.Collections.Generic.IEnumerable{SearchAThing.Sci.Geometry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Geometry>
  nameWithType: IEnumerable<Geometry>
  fullName: System.Collections.Generic.IEnumerable<SearchAThing.Sci.Geometry>
  nameWithType.vb: IEnumerable(Of Geometry)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Geometry)
  name.vb: IEnumerable(Of Geometry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    href: SearchAThing.Sci.Geometry.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    href: SearchAThing.Sci.Geometry.html
  - name: )
- uid: SearchAThing.Sci.Ext.Segments*
  commentId: Overload:SearchAThing.Sci.Ext.Segments
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Segments_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Geometry__System_Double_
  name: Segments
  nameWithType: Ext.Segments
  fullName: SearchAThing.Sci.Ext.Segments
- uid: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
  commentId: T:System.Collections.Generic.IEnumerable{SearchAThing.Sci.Line3D}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Line3D>
  nameWithType: IEnumerable<Line3D>
  fullName: System.Collections.Generic.IEnumerable<SearchAThing.Sci.Line3D>
  nameWithType.vb: IEnumerable(Of Line3D)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Line3D)
  name.vb: IEnumerable(Of Line3D)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SearchAThing.Sci.Line3D
    name: Line3D
    href: SearchAThing.Sci.Line3D.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Line3D
    name: Line3D
    href: SearchAThing.Sci.Line3D.html
  - name: )
- uid: SearchAThing.Sci.Ext.Vertexes*
  commentId: Overload:SearchAThing.Sci.Ext.Vertexes
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Vertexes_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Geometry__System_Double_
  name: Vertexes
  nameWithType: Ext.Vertexes
  fullName: SearchAThing.Sci.Ext.Vertexes
- uid: SearchAThing.Sci.Ext.Intersect*
  commentId: Overload:SearchAThing.Sci.Ext.Intersect
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Intersect_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Geometry__System_Double_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Geometry__SearchAThing_Sci_GeomSegmentMode_SearchAThing_Sci_GeomSegmentMode_
  name: Intersect
  nameWithType: Ext.Intersect
  fullName: SearchAThing.Sci.Ext.Intersect
- uid: SearchAThing.Sci.GeomSegmentMode
  commentId: T:SearchAThing.Sci.GeomSegmentMode
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.GeomSegmentMode.html
  name: GeomSegmentMode
  nameWithType: GeomSegmentMode
  fullName: SearchAThing.Sci.GeomSegmentMode
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Geometry intersectGeom, Geometry g1, Geometry g2)>
  nameWithType: IEnumerable<(Geometry intersectGeom, Geometry g1, Geometry g2)>
  fullName: System.Collections.Generic.IEnumerable<(SearchAThing.Sci.Geometry intersectGeom, SearchAThing.Sci.Geometry g1, SearchAThing.Sci.Geometry g2)>
  nameWithType.vb: IEnumerable(Of (intersectGeom As Geometry, g1 As Geometry, g2 As Geometry))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (intersectGeom As SearchAThing.Sci.Geometry, g1 As SearchAThing.Sci.Geometry, g2 As SearchAThing.Sci.Geometry))
  name.vb: IEnumerable(Of (intersectGeom As Geometry, g1 As Geometry, g2 As Geometry))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    href: SearchAThing.Sci.Geometry.html
  - name: " "
  - uid: System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}.intersectGeom
    name: intersectGeom
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-searchathing.sci.geometry,searchathing.sci.geometry,searchathing.sci.geometry-.intersectgeom
  - name: ','
  - name: " "
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    href: SearchAThing.Sci.Geometry.html
  - name: " "
  - uid: System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}.g1
    name: g1
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-searchathing.sci.geometry,searchathing.sci.geometry,searchathing.sci.geometry-.g1
  - name: ','
  - name: " "
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    href: SearchAThing.Sci.Geometry.html
  - name: " "
  - uid: System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}.g2
    name: g2
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-searchathing.sci.geometry,searchathing.sci.geometry,searchathing.sci.geometry-.g2
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}.intersectGeom
    name: intersectGeom
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-searchathing.sci.geometry,searchathing.sci.geometry,searchathing.sci.geometry-.intersectgeom
  - name: " "
  - name: As
  - name: " "
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    href: SearchAThing.Sci.Geometry.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}.g1
    name: g1
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-searchathing.sci.geometry,searchathing.sci.geometry,searchathing.sci.geometry-.g1
  - name: " "
  - name: As
  - name: " "
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    href: SearchAThing.Sci.Geometry.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry,SearchAThing.Sci.Geometry}.g2
    name: g2
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-searchathing.sci.geometry,searchathing.sci.geometry,searchathing.sci.geometry-.g2
  - name: " "
  - name: As
  - name: " "
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    href: SearchAThing.Sci.Geometry.html
  - name: )
  - name: )
- uid: SearchAThing.Sci.Ext.ToDxfLine*
  commentId: Overload:SearchAThing.Sci.Ext.ToDxfLine
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToDxfLine_SearchAThing_Sci_Line3D_
  name: ToDxfLine
  nameWithType: Ext.ToDxfLine
  fullName: SearchAThing.Sci.Ext.ToDxfLine
- uid: SearchAThing.Sci.Line3D
  commentId: T:SearchAThing.Sci.Line3D
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Line3D.html
  name: Line3D
  nameWithType: Line3D
  fullName: SearchAThing.Sci.Line3D
- uid: netDxf.Entities.Line
  commentId: T:netDxf.Entities.Line
  parent: netDxf.Entities
  isExternal: true
  name: Line
  nameWithType: Line
  fullName: netDxf.Entities.Line
- uid: SearchAThing.Sci.Ext.ToCadScript*
  commentId: Overload:SearchAThing.Sci.Ext.ToCadScript
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToCadScript_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Line3D__
  name: ToCadScript
  nameWithType: Ext.ToCadScript
  fullName: SearchAThing.Sci.Ext.ToCadScript
- uid: SearchAThing.Sci.Ext.ToLine3D*
  commentId: Overload:SearchAThing.Sci.Ext.ToLine3D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToLine3D_netDxf_Entities_Line_
  name: ToLine3D
  nameWithType: Ext.ToLine3D
  fullName: SearchAThing.Sci.Ext.ToLine3D
- uid: SearchAThing.Sci.Ext.PolyPoints*
  commentId: Overload:SearchAThing.Sci.Ext.PolyPoints
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_PolyPoints_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Line3D__
  name: PolyPoints
  nameWithType: Ext.PolyPoints
  fullName: SearchAThing.Sci.Ext.PolyPoints
- uid: SearchAThing.Sci.Ext.MergeColinearSegments*
  commentId: Overload:SearchAThing.Sci.Ext.MergeColinearSegments
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_MergeColinearSegments_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Line3D__System_Double_
  name: MergeColinearSegments
  nameWithType: Ext.MergeColinearSegments
  fullName: SearchAThing.Sci.Ext.MergeColinearSegments
- uid: SearchAThing.Sci.Ext.AutoIntersect*
  commentId: Overload:SearchAThing.Sci.Ext.AutoIntersect
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_AutoIntersect_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Line3D__System_Double_System_Boolean_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: AutoIntersect
  nameWithType: Ext.AutoIntersect
  fullName: SearchAThing.Sci.Ext.AutoIntersect
- uid: System.Collections.Generic.IReadOnlyList{SearchAThing.Sci.Line3D}
  commentId: T:System.Collections.Generic.IReadOnlyList{SearchAThing.Sci.Line3D}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<Line3D>
  nameWithType: IReadOnlyList<Line3D>
  fullName: System.Collections.Generic.IReadOnlyList<SearchAThing.Sci.Line3D>
  nameWithType.vb: IReadOnlyList(Of Line3D)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of SearchAThing.Sci.Line3D)
  name.vb: IReadOnlyList(Of Line3D)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: SearchAThing.Sci.Line3D
    name: Line3D
    href: SearchAThing.Sci.Line3D.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Line3D
    name: Line3D
    href: SearchAThing.Sci.Line3D.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SearchAThing.Sci.Ext.BestFittingPlane*
  commentId: Overload:SearchAThing.Sci.Ext.BestFittingPlane
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_BestFittingPlane_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Line3D__System_Double_
  name: BestFittingPlane
  nameWithType: Ext.BestFittingPlane
  fullName: SearchAThing.Sci.Ext.BestFittingPlane
- uid: SearchAThing.Sci.Ext.ToLoop*
  commentId: Overload:SearchAThing.Sci.Ext.ToLoop
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToLoop_netDxf_Entities_Polyline2D_System_Double_
  name: ToLoop
  nameWithType: Ext.ToLoop
  fullName: SearchAThing.Sci.Ext.ToLoop
- uid: SearchAThing.Sci.Ext.DetectPlane*
  commentId: Overload:SearchAThing.Sci.Ext.DetectPlane
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_DetectPlane_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Edge__System_Double_
  name: DetectPlane
  nameWithType: Ext.DetectPlane
  fullName: SearchAThing.Sci.Ext.DetectPlane
- uid: SearchAThing.Sci.Ext.Inverse*
  commentId: Overload:SearchAThing.Sci.Ext.Inverse
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Inverse_System_Numerics_Matrix4x4_
  name: Inverse
  nameWithType: Ext.Inverse
  fullName: SearchAThing.Sci.Ext.Inverse
- uid: System.Numerics.Matrix4x4
  commentId: T:System.Numerics.Matrix4x4
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.matrix4x4
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: System.Numerics.Matrix4x4
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: SearchAThing.Sci.Ext.Fmt*
  commentId: Overload:SearchAThing.Sci.Ext.Fmt
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Fmt_System_Numerics_Matrix4x4_System_Int32_System_Int32_
  name: Fmt
  nameWithType: Ext.Fmt
  fullName: SearchAThing.Sci.Ext.Fmt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SearchAThing.Sci.Ext.ToEulerAngles*
  commentId: Overload:SearchAThing.Sci.Ext.ToEulerAngles
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToEulerAngles_System_Numerics_Matrix4x4_
  name: ToEulerAngles
  nameWithType: Ext.ToEulerAngles
  fullName: SearchAThing.Sci.Ext.ToEulerAngles
- uid: System.Numerics.Vector3
  commentId: T:System.Numerics.Vector3
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.vector3
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
- uid: SearchAThing.Sci.Ext.Decompose*
  commentId: Overload:SearchAThing.Sci.Ext.Decompose
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Decompose_System_Numerics_Matrix4x4_
  name: Decompose
  nameWithType: Ext.Decompose
  fullName: SearchAThing.Sci.Ext.Decompose
- uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}
  commentId: T:System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}
  parent: System
  definition: System.ValueTuple`4
  href: https://learn.microsoft.com/dotnet/api/system.numerics.vector3
  name: (Vector3 translation, Quaternion rotation, Vector3 scale, bool success)
  nameWithType: (Vector3 translation, Quaternion rotation, Vector3 scale, bool success)
  fullName: (System.Numerics.Vector3 translation, System.Numerics.Quaternion rotation, System.Numerics.Vector3 scale, bool success)
  nameWithType.vb: (translation As Vector3, rotation As Quaternion, scale As Vector3, success As Boolean)
  fullName.vb: (translation As System.Numerics.Vector3, rotation As System.Numerics.Quaternion, scale As System.Numerics.Vector3, success As Boolean)
  name.vb: (translation As Vector3, rotation As Quaternion, scale As Vector3, success As Boolean)
  spec.csharp:
  - name: (
  - uid: System.Numerics.Vector3
    name: Vector3
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.vector3
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}.translation
    name: translation
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector3,system.numerics.quaternion,system.numerics.vector3,system.boolean-.translation
  - name: ','
  - name: " "
  - uid: System.Numerics.Quaternion
    name: Quaternion
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.quaternion
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}.rotation
    name: rotation
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector3,system.numerics.quaternion,system.numerics.vector3,system.boolean-.rotation
  - name: ','
  - name: " "
  - uid: System.Numerics.Vector3
    name: Vector3
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.vector3
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}.scale
    name: scale
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector3,system.numerics.quaternion,system.numerics.vector3,system.boolean-.scale
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}.success
    name: success
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector3,system.numerics.quaternion,system.numerics.vector3,system.boolean-.success
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}.translation
    name: translation
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector3,system.numerics.quaternion,system.numerics.vector3,system.boolean-.translation
  - name: " "
  - name: As
  - name: " "
  - uid: System.Numerics.Vector3
    name: Vector3
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.vector3
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}.rotation
    name: rotation
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector3,system.numerics.quaternion,system.numerics.vector3,system.boolean-.rotation
  - name: " "
  - name: As
  - name: " "
  - uid: System.Numerics.Quaternion
    name: Quaternion
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.quaternion
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}.scale
    name: scale
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector3,system.numerics.quaternion,system.numerics.vector3,system.boolean-.scale
  - name: " "
  - name: As
  - name: " "
  - uid: System.Numerics.Vector3
    name: Vector3
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.vector3
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Boolean}.success
    name: success
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector3,system.numerics.quaternion,system.numerics.vector3,system.boolean-.success
  - name: " "
  - name: As
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.ValueTuple`4
  commentId: T:System.ValueTuple`4
  name: (T1, T2, T3, T4)
  nameWithType: (T1, T2, T3, T4)
  fullName: (T1, T2, T3, T4)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: )
- uid: SearchAThing.Sci.Ext.GetItem*
  commentId: Overload:SearchAThing.Sci.Ext.GetItem
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_GetItem_System_Numerics_Matrix4x4_System_Int32_System_Int32_
  name: GetItem
  nameWithType: Ext.GetItem
  fullName: SearchAThing.Sci.Ext.GetItem
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: SearchAThing.Sci.Ext.Angle*
  commentId: Overload:SearchAThing.Sci.Ext.Angle
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Angle_System_Double_System_Double_System_Boolean_
  name: Angle
  nameWithType: Ext.Angle
  fullName: SearchAThing.Sci.Ext.Angle
- uid: SearchAThing.Sci.Ext.NormalizeAngle*
  commentId: Overload:SearchAThing.Sci.Ext.NormalizeAngle
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_NormalizeAngle_System_Double_System_Double_System_Double_
  name: NormalizeAngle
  nameWithType: Ext.NormalizeAngle
  fullName: SearchAThing.Sci.Ext.NormalizeAngle
- uid: SearchAThing.Sci.Ext.CompareToTol*
  commentId: Overload:SearchAThing.Sci.Ext.CompareToTol
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CompareToTol_System_Double_System_Double_System_Double_
  name: CompareToTol
  nameWithType: Ext.CompareToTol
  fullName: SearchAThing.Sci.Ext.CompareToTol
- uid: SearchAThing.Sci.Ext.MinMax*
  commentId: Overload:SearchAThing.Sci.Ext.MinMax
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_MinMax_System_Collections_Generic_IEnumerable_System_Double__
  name: MinMax
  nameWithType: Ext.MinMax
  fullName: SearchAThing.Sci.Ext.MinMax
- uid: System.ValueTuple{System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: (double min, double max)
  nameWithType: (double min, double max)
  fullName: (double min, double max)
  nameWithType.vb: (min As Double, max As Double)
  fullName.vb: (min As Double, max As Double)
  name.vb: (min As Double, max As Double)
  spec.csharp:
  - name: (
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.min
    name: min
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.min
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.max
    name: max
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.max
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Double,System.Double}.min
    name: min
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.min
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.max
    name: max
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.max
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: SearchAThing.Sci.Ext.Thin*
  commentId: Overload:SearchAThing.Sci.Ext.Thin
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Thin_System_Collections_Generic_IEnumerable_System_Double__System_Double_System_Boolean_System_Boolean_
  name: Thin
  nameWithType: Ext.Thin
  fullName: SearchAThing.Sci.Ext.Thin
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<double>
  nameWithType: List<double>
  fullName: System.Collections.Generic.List<double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(double, double)>
  nameWithType: IEnumerable<(double, double)>
  fullName: System.Collections.Generic.IEnumerable<(double, double)>
  nameWithType.vb: IEnumerable(Of (Double, Double))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Double, Double))
  name.vb: IEnumerable(Of (Double, Double))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
  - name: )
- uid: SearchAThing.Sci.Ext.WeightedDistribution*
  commentId: Overload:SearchAThing.Sci.Ext.WeightedDistribution
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_WeightedDistribution_System_Collections_Generic_IEnumerable_System_Double__System_Int32_
  name: WeightedDistribution
  nameWithType: Ext.WeightedDistribution
  fullName: SearchAThing.Sci.Ext.WeightedDistribution
- uid: System.ValueTuple{System.Double,System.Double}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: (double off, double weight)[]
  nameWithType: (double off, double weight)[]
  fullName: (double off, double weight)[]
  nameWithType.vb: (off As Double, weight As Double)()
  fullName.vb: (off As Double, weight As Double)()
  name.vb: (off As Double, weight As Double)()
  spec.csharp:
  - name: (
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.off
    name: off
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.off
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.weight
    name: weight
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.weight
  - name: )
  - name: '['
  - name: ']'
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Double,System.Double}.off
    name: off
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.off
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.weight
    name: weight
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.weight
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
  - name: (
  - name: )
- uid: SearchAThing.Sci.Ext.Similarity*
  commentId: Overload:SearchAThing.Sci.Ext.Similarity
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Similarity_System_Double_System_Double_
  name: Similarity
  nameWithType: Ext.Similarity
  fullName: SearchAThing.Sci.Ext.Similarity
- uid: SearchAThing.Sci.Ext.StatNfos*
  commentId: Overload:SearchAThing.Sci.Ext.StatNfos
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_StatNfos_System_Collections_Generic_IEnumerable_System_Double__
  name: StatNfos
  nameWithType: Ext.StatNfos
  fullName: SearchAThing.Sci.Ext.StatNfos
- uid: SearchAThing.Sci.NumbersStatNfo
  commentId: T:SearchAThing.Sci.NumbersStatNfo
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.NumbersStatNfo.html
  name: NumbersStatNfo
  nameWithType: NumbersStatNfo
  fullName: SearchAThing.Sci.NumbersStatNfo
- uid: SearchAThing.Sci.Ext.XYSignedArea*
  commentId: Overload:SearchAThing.Sci.Ext.XYSignedArea
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_XYSignedArea_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Double_
  name: XYSignedArea
  nameWithType: Ext.XYSignedArea
  fullName: SearchAThing.Sci.Ext.XYSignedArea
- uid: SearchAThing.Sci.Ext.XYArea*
  commentId: Overload:SearchAThing.Sci.Ext.XYArea
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_XYArea_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Double_
  name: XYArea
  nameWithType: Ext.XYArea
  fullName: SearchAThing.Sci.Ext.XYArea
- uid: SearchAThing.Sci.Ext.XYCentroid*
  commentId: Overload:SearchAThing.Sci.Ext.XYCentroid
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_XYCentroid_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Double_
  name: XYCentroid
  nameWithType: Ext.XYCentroid
  fullName: SearchAThing.Sci.Ext.XYCentroid
- uid: SearchAThing.Sci.Ext.PolygonSegments*
  commentId: Overload:SearchAThing.Sci.Ext.PolygonSegments
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_PolygonSegments_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Double_
  name: PolygonSegments
  nameWithType: Ext.PolygonSegments
  fullName: SearchAThing.Sci.Ext.PolygonSegments
- uid: SearchAThing.Sci.Ext.ContainsPoint*
  commentId: Overload:SearchAThing.Sci.Ext.ContainsPoint
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ContainsPoint_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Double_SearchAThing_Sci_Vector3D_SearchAThing_Sci_LoopContainsPointMode_
  name: ContainsPoint
  nameWithType: Ext.ContainsPoint
  fullName: SearchAThing.Sci.Ext.ContainsPoint
- uid: SearchAThing.Sci.LoopContainsPointMode
  commentId: T:SearchAThing.Sci.LoopContainsPointMode
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.LoopContainsPointMode.html
  name: LoopContainsPointMode
  nameWithType: LoopContainsPointMode
  fullName: SearchAThing.Sci.LoopContainsPointMode
- uid: SearchAThing.Sci.Ext.SortCCW*
  commentId: Overload:SearchAThing.Sci.Ext.SortCCW
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_SortCCW__1_System_Collections_Generic_IEnumerable___0__System_Double_System_Func___0_SearchAThing_Sci_Vector3D__SearchAThing_Sci_CoordinateSystem3D_
  name: SortCCW
  nameWithType: Ext.SortCCW
  fullName: SearchAThing.Sci.Ext.SortCCW
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func{{T},SearchAThing.Sci.Vector3D}
  commentId: T:System.Func{``0,SearchAThing.Sci.Vector3D}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, Vector3D>
  nameWithType: Func<T, Vector3D>
  fullName: System.Func<T, SearchAThing.Sci.Vector3D>
  nameWithType.vb: Func(Of T, Vector3D)
  fullName.vb: System.Func(Of T, SearchAThing.Sci.Vector3D)
  name.vb: Func(Of T, Vector3D)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: )
- uid: SearchAThing.Sci.Ext.TakeUntilAdjacent*
  commentId: Overload:SearchAThing.Sci.Ext.TakeUntilAdjacent
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_TakeUntilAdjacent_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Line3D__System_Double_System_Boolean_
  name: TakeUntilAdjacent
  nameWithType: Ext.TakeUntilAdjacent
  fullName: SearchAThing.Sci.Ext.TakeUntilAdjacent
- uid: SearchAThing.Sci.Ext.IsAClosedPoly*
  commentId: Overload:SearchAThing.Sci.Ext.IsAClosedPoly
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_IsAClosedPoly_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Line3D__System_Double_
  name: IsAClosedPoly
  nameWithType: Ext.IsAClosedPoly
  fullName: SearchAThing.Sci.Ext.IsAClosedPoly
- uid: SearchAThing.Sci.Ext.ToHatch*
  commentId: Overload:SearchAThing.Sci.Ext.ToHatch
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToHatch_netDxf_Entities_Polyline2D_netDxf_Entities_HatchPattern_System_Boolean_
  name: ToHatch
  nameWithType: Ext.ToHatch
  fullName: SearchAThing.Sci.Ext.ToHatch
- uid: netDxf.Entities.HatchPattern
  commentId: T:netDxf.Entities.HatchPattern
  parent: netDxf.Entities
  isExternal: true
  name: HatchPattern
  nameWithType: HatchPattern
  fullName: netDxf.Entities.HatchPattern
- uid: SearchAThing.Sci.Ext.ToLwPolyline*
  commentId: Overload:SearchAThing.Sci.Ext.ToLwPolyline
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToLwPolyline_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Geometry__System_Double_SearchAThing_Sci_CoordinateSystem3D_System_Boolean_
  name: ToLwPolyline
  nameWithType: Ext.ToLwPolyline
  fullName: SearchAThing.Sci.Ext.ToLwPolyline
- uid: SearchAThing.Sci.Ext.ToPolyline*
  commentId: Overload:SearchAThing.Sci.Ext.ToPolyline
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToPolyline_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Boolean_
  name: ToPolyline
  nameWithType: Ext.ToPolyline
  fullName: SearchAThing.Sci.Ext.ToPolyline
- uid: SearchAThing.Sci.Ext.Boolean*
  commentId: Overload:SearchAThing.Sci.Ext.Boolean
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Boolean_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Double_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__ClipperLib_ClipType_System_Boolean_
  name: Boolean
  nameWithType: Ext.Boolean
  fullName: SearchAThing.Sci.Ext.Boolean
- uid: ClipperLib.ClipType
  commentId: T:ClipperLib.ClipType
  parent: ClipperLib
  isExternal: true
  name: ClipType
  nameWithType: ClipType
  fullName: ClipperLib.ClipType
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{SearchAThing.Sci.Vector3D}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IEnumerable<Vector3D>>
  nameWithType: IEnumerable<IEnumerable<Vector3D>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<SearchAThing.Sci.Vector3D>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of Vector3D))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: IEnumerable(Of IEnumerable(Of Vector3D))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: )
  - name: )
- uid: ClipperLib
  commentId: N:ClipperLib
  isExternal: true
  name: ClipperLib
  nameWithType: ClipperLib
  fullName: ClipperLib
- uid: SearchAThing.Sci.Ext.ConvexHull2D*
  commentId: Overload:SearchAThing.Sci.Ext.ConvexHull2D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ConvexHull2D_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: ConvexHull2D
  nameWithType: Ext.ConvexHull2D
  fullName: SearchAThing.Sci.Ext.ConvexHull2D
- uid: SearchAThing.Sci.Ext.Tessellate*
  commentId: Overload:SearchAThing.Sci.Ext.Tessellate
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Tessellate_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: Tessellate
  nameWithType: Ext.Tessellate
  fullName: SearchAThing.Sci.Ext.Tessellate
- uid: System.Collections.Generic.IEnumerable{SearchAThing.Sci.Triangle3D}
  commentId: T:System.Collections.Generic.IEnumerable{SearchAThing.Sci.Triangle3D}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Triangle3D>
  nameWithType: IEnumerable<Triangle3D>
  fullName: System.Collections.Generic.IEnumerable<SearchAThing.Sci.Triangle3D>
  nameWithType.vb: IEnumerable(Of Triangle3D)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SearchAThing.Sci.Triangle3D)
  name.vb: IEnumerable(Of Triangle3D)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: SearchAThing.Sci.Triangle3D
    name: Triangle3D
    href: SearchAThing.Sci.Triangle3D.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Triangle3D
    name: Triangle3D
    href: SearchAThing.Sci.Triangle3D.html
  - name: )
- uid: SearchAThing.Sci.Ext.ToTriangle3D*
  commentId: Overload:SearchAThing.Sci.Ext.ToTriangle3D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToTriangle3D_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: ToTriangle3D
  nameWithType: Ext.ToTriangle3D
  fullName: SearchAThing.Sci.Ext.ToTriangle3D
- uid: SearchAThing.Sci.Triangle3D
  commentId: T:SearchAThing.Sci.Triangle3D
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Triangle3D.html
  name: Triangle3D
  nameWithType: Triangle3D
  fullName: SearchAThing.Sci.Triangle3D
- uid: SearchAThing.Sci.Ext.ToCSV*
  commentId: Overload:SearchAThing.Sci.Ext.ToCSV
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToCSV_System_Collections_Generic_IEnumerable_System_Object__
  name: ToCSV
  nameWithType: Ext.ToCSV
  fullName: SearchAThing.Sci.Ext.ToCSV
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<object>
  nameWithType: IEnumerable<object>
  fullName: System.Collections.Generic.IEnumerable<object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: SearchAThing.Sci.Ext.ToDVector3*
  commentId: Overload:SearchAThing.Sci.Ext.ToDVector3
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToDVector3_System_Numerics_Vector3_
  name: ToDVector3
  nameWithType: Ext.ToDVector3
  fullName: SearchAThing.Sci.Ext.ToDVector3
- uid: SearchAThing.Sci.Ext.ToNVector3*
  commentId: Overload:SearchAThing.Sci.Ext.ToNVector3
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToNVector3_netDxf_Vector3_
  name: ToNVector3
  nameWithType: Ext.ToNVector3
  fullName: SearchAThing.Sci.Ext.ToNVector3
- uid: SearchAThing.Sci.Ext.Clamp*
  commentId: Overload:SearchAThing.Sci.Ext.Clamp
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Clamp_System_Numerics_Vector3_System_Numerics_Vector3_System_Numerics_Vector3_
  name: Clamp
  nameWithType: Ext.Clamp
  fullName: SearchAThing.Sci.Ext.Clamp
- uid: SearchAThing.Sci.Ext.Abs*
  commentId: Overload:SearchAThing.Sci.Ext.Abs
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Abs_System_Numerics_Vector3_
  name: Abs
  nameWithType: Ext.Abs
  fullName: SearchAThing.Sci.Ext.Abs
- uid: SearchAThing.Sci.Ext.Debug*
  commentId: Overload:SearchAThing.Sci.Ext.Debug
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Debug_System_Numerics_Vector3_System_String_
  name: Debug
  nameWithType: Ext.Debug
  fullName: SearchAThing.Sci.Ext.Debug
- uid: SearchAThing.Sci.Ext.Normalized*
  commentId: Overload:SearchAThing.Sci.Ext.Normalized
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Normalized_System_Numerics_Vector3_
  name: Normalized
  nameWithType: Ext.Normalized
  fullName: SearchAThing.Sci.Ext.Normalized
- uid: SearchAThing.Sci.Ext.ToVector3D*
  commentId: Overload:SearchAThing.Sci.Ext.ToVector3D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToVector3D_System_Numerics_Vector3_
  name: ToVector3D
  nameWithType: Ext.ToVector3D
  fullName: SearchAThing.Sci.Ext.ToVector3D
- uid: SearchAThing.Sci.Ext.Transform*
  commentId: Overload:SearchAThing.Sci.Ext.Transform
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Transform_System_Numerics_Vector3_System_Numerics_Matrix4x4_
  name: Transform
  nameWithType: Ext.Transform
  fullName: SearchAThing.Sci.Ext.Transform
- uid: SearchAThing.Sci.Ext.SetX*
  commentId: Overload:SearchAThing.Sci.Ext.SetX
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_SetX_System_Numerics_Vector3_System_Single_
  name: SetX
  nameWithType: Ext.SetX
  fullName: SearchAThing.Sci.Ext.SetX
- uid: SearchAThing.Sci.Ext.SetY*
  commentId: Overload:SearchAThing.Sci.Ext.SetY
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_SetY_System_Numerics_Vector3_System_Single_
  name: SetY
  nameWithType: Ext.SetY
  fullName: SearchAThing.Sci.Ext.SetY
- uid: SearchAThing.Sci.Ext.SetZ*
  commentId: Overload:SearchAThing.Sci.Ext.SetZ
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_SetZ_System_Numerics_Vector3_System_Single_
  name: SetZ
  nameWithType: Ext.SetZ
  fullName: SearchAThing.Sci.Ext.SetZ
- uid: SearchAThing.Sci.Ext.ToDeg*
  commentId: Overload:SearchAThing.Sci.Ext.ToDeg
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToDeg_System_Numerics_Vector3_
  name: ToDeg
  nameWithType: Ext.ToDeg
  fullName: SearchAThing.Sci.Ext.ToDeg
- uid: SearchAThing.Sci.Ext.ToRad*
  commentId: Overload:SearchAThing.Sci.Ext.ToRad
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToRad_System_Numerics_Vector3_
  name: ToRad
  nameWithType: Ext.ToRad
  fullName: SearchAThing.Sci.Ext.ToRad
- uid: SearchAThing.Sci.Ext.Reversed*
  commentId: Overload:SearchAThing.Sci.Ext.Reversed
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Reversed_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: Reversed
  nameWithType: Ext.Reversed
  fullName: SearchAThing.Sci.Ext.Reversed
- uid: System.Collections.Generic.IList{SearchAThing.Sci.Vector3D}
  commentId: T:System.Collections.Generic.IList{SearchAThing.Sci.Vector3D}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<Vector3D>
  nameWithType: IList<Vector3D>
  fullName: System.Collections.Generic.IList<SearchAThing.Sci.Vector3D>
  nameWithType.vb: IList(Of Vector3D)
  fullName.vb: System.Collections.Generic.IList(Of SearchAThing.Sci.Vector3D)
  name.vb: IList(Of Vector3D)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SearchAThing.Sci.Ext.DistinctKeepOrder*
  commentId: Overload:SearchAThing.Sci.Ext.DistinctKeepOrder
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_DistinctKeepOrder_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__SearchAThing_Sci_Vector3DEqualityComparer_
  name: DistinctKeepOrder
  nameWithType: Ext.DistinctKeepOrder
  fullName: SearchAThing.Sci.Ext.DistinctKeepOrder
- uid: SearchAThing.Sci.Vector3DEqualityComparer
  commentId: T:SearchAThing.Sci.Vector3DEqualityComparer
  parent: SearchAThing.Sci
  href: SearchAThing.Sci.Vector3DEqualityComparer.html
  name: Vector3DEqualityComparer
  nameWithType: Vector3DEqualityComparer
  fullName: SearchAThing.Sci.Vector3DEqualityComparer
- uid: SearchAThing.Sci.Ext.StringRepresentation*
  commentId: Overload:SearchAThing.Sci.Ext.StringRepresentation
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_StringRepresentation_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: StringRepresentation
  nameWithType: Ext.StringRepresentation
  fullName: SearchAThing.Sci.Ext.StringRepresentation
- uid: SearchAThing.Sci.Ext.Length*
  commentId: Overload:SearchAThing.Sci.Ext.Length
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Length_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: Length
  nameWithType: Ext.Length
  fullName: SearchAThing.Sci.Ext.Length
- uid: SearchAThing.Sci.Ext.ToCoordSequence*
  commentId: Overload:SearchAThing.Sci.Ext.ToCoordSequence
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToCoordSequence_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: ToCoordSequence
  nameWithType: Ext.ToCoordSequence
  fullName: SearchAThing.Sci.Ext.ToCoordSequence
- uid: SearchAThing.Sci.Ext.ToCoordString2D*
  commentId: Overload:SearchAThing.Sci.Ext.ToCoordString2D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToCoordString2D_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: ToCoordString2D
  nameWithType: Ext.ToCoordString2D
  fullName: SearchAThing.Sci.Ext.ToCoordString2D
- uid: SearchAThing.Sci.Ext.ToCoordString3D*
  commentId: Overload:SearchAThing.Sci.Ext.ToCoordString3D
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToCoordString3D_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: ToCoordString3D
  nameWithType: Ext.ToCoordString3D
  fullName: SearchAThing.Sci.Ext.ToCoordString3D
- uid: SearchAThing.Sci.Ext.CadScriptPolyline*
  commentId: Overload:SearchAThing.Sci.Ext.CadScriptPolyline
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CadScriptPolyline_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: CadScriptPolyline
  nameWithType: Ext.CadScriptPolyline
  fullName: SearchAThing.Sci.Ext.CadScriptPolyline
- uid: SearchAThing.Sci.Ext.CadScriptPoint*
  commentId: Overload:SearchAThing.Sci.Ext.CadScriptPoint
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_CadScriptPoint_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: CadScriptPoint
  nameWithType: Ext.CadScriptPoint
  fullName: SearchAThing.Sci.Ext.CadScriptPoint
- uid: SearchAThing.Sci.Ext.Sum*
  commentId: Overload:SearchAThing.Sci.Ext.Sum
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Sum_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: Sum
  nameWithType: Ext.Sum
  fullName: SearchAThing.Sci.Ext.Sum
- uid: SearchAThing.Sci.Ext.Mean*
  commentId: Overload:SearchAThing.Sci.Ext.Mean
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Mean_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Boolean_
  name: Mean
  nameWithType: Ext.Mean
  fullName: SearchAThing.Sci.Ext.Mean
- uid: SearchAThing.Sci.Ext.ZapDuplicates*
  commentId: Overload:SearchAThing.Sci.Ext.ZapDuplicates
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ZapDuplicates_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__System_Double_
  name: ZapDuplicates
  nameWithType: Ext.ZapDuplicates
  fullName: SearchAThing.Sci.Ext.ZapDuplicates
- uid: SearchAThing.Sci.Ext.XYClosedPolys*
  commentId: Overload:SearchAThing.Sci.Ext.XYClosedPolys
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_XYClosedPolys_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Line3D__System_Double_System_Int32_
  name: XYClosedPolys
  nameWithType: Ext.XYClosedPolys
  fullName: SearchAThing.Sci.Ext.XYClosedPolys
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SearchAThing.Sci.Vector3D}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{SearchAThing.Sci.Vector3D}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<IReadOnlyList<Vector3D>>
  nameWithType: IEnumerable<IReadOnlyList<Vector3D>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IReadOnlyList<SearchAThing.Sci.Vector3D>>
  nameWithType.vb: IEnumerable(Of IReadOnlyList(Of Vector3D))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IReadOnlyList(Of SearchAThing.Sci.Vector3D))
  name.vb: IEnumerable(Of IReadOnlyList(Of Vector3D))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    href: SearchAThing.Sci.Vector3D.html
  - name: )
  - name: )
- uid: SearchAThing.Sci.Ext.IsLinearIndependent*
  commentId: Overload:SearchAThing.Sci.Ext.IsLinearIndependent
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_IsLinearIndependent_System_Collections_Generic_IEnumerable_SearchAThing_Sci_Vector3D__
  name: IsLinearIndependent
  nameWithType: Ext.IsLinearIndependent
  fullName: SearchAThing.Sci.Ext.IsLinearIndependent
- uid: SearchAThing.Sci.Ext.Sqrt*
  commentId: Overload:SearchAThing.Sci.Ext.Sqrt
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_Sqrt_SearchAThing_Sci_Vector3D_
  name: Sqrt
  nameWithType: Ext.Sqrt
  fullName: SearchAThing.Sci.Ext.Sqrt
- uid: System.Numerics.Vector4
  commentId: T:System.Numerics.Vector4
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.vector4
  name: Vector4
  nameWithType: Vector4
  fullName: System.Numerics.Vector4
- uid: SearchAThing.Sci.Ext.ToVector3*
  commentId: Overload:SearchAThing.Sci.Ext.ToVector3
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToVector3_System_Numerics_Vector4_
  name: ToVector3
  nameWithType: Ext.ToVector3
  fullName: SearchAThing.Sci.Ext.ToVector3
- uid: SearchAThing.Sci.Ext.ToVector2*
  commentId: Overload:SearchAThing.Sci.Ext.ToVector2
  href: SearchAThing.Sci.Ext.html#SearchAThing_Sci_Ext_ToVector2_System_Numerics_Vector4_
  name: ToVector2
  nameWithType: Ext.ToVector2
  fullName: SearchAThing.Sci.Ext.ToVector2
- uid: System.Numerics.Vector2
  commentId: T:System.Numerics.Vector2
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  name: Vector2
  nameWithType: Vector2
  fullName: System.Numerics.Vector2

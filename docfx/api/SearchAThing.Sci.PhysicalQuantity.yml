### YamlMime:ManagedReference
items:
- uid: SearchAThing.Sci.PhysicalQuantity
  commentId: T:SearchAThing.Sci.PhysicalQuantity
  id: PhysicalQuantity
  parent: SearchAThing.Sci
  children:
  - SearchAThing.Sci.PhysicalQuantity.#ctor(System.String,Type,SearchAThing.Sci.MeasureUnitConversionTypeEnum)
  - SearchAThing.Sci.PhysicalQuantity.ByName(System.String)
  - SearchAThing.Sci.PhysicalQuantity.ConvertFactor(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.PhysicalQuantity.Equals(SearchAThing.Sci.PhysicalQuantity)
  - SearchAThing.Sci.PhysicalQuantity.LinearConversionRefMU
  - SearchAThing.Sci.PhysicalQuantity.MeasureUnits
  - SearchAThing.Sci.PhysicalQuantity.MUConversionType
  - SearchAThing.Sci.PhysicalQuantity.Name
  - SearchAThing.Sci.PhysicalQuantity.ToString
  langs:
  - csharp
  - vb
  name: PhysicalQuantity
  nameWithType: PhysicalQuantity
  fullName: SearchAThing.Sci.PhysicalQuantity
  type: Class
  source:
    id: PhysicalQuantity
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 17
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: 'public class PhysicalQuantity : IEquatable<PhysicalQuantity>'
    content.vb: >-
      Public Class PhysicalQuantity
          Inherits IEquatable(Of PhysicalQuantity)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SearchAThing.Sci.PhysicalQuantity.MUConversionType
  commentId: P:SearchAThing.Sci.PhysicalQuantity.MUConversionType
  id: MUConversionType
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: MUConversionType
  nameWithType: PhysicalQuantity.MUConversionType
  fullName: SearchAThing.Sci.PhysicalQuantity.MUConversionType
  type: Property
  source:
    id: MUConversionType
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 24
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public MeasureUnitConversionTypeEnum MUConversionType { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.MeasureUnitConversionTypeEnum
    content.vb: Public ReadOnly Property MUConversionType As MeasureUnitConversionTypeEnum
  overload: SearchAThing.Sci.PhysicalQuantity.MUConversionType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.PhysicalQuantity.LinearConversionRefMU
  commentId: P:SearchAThing.Sci.PhysicalQuantity.LinearConversionRefMU
  id: LinearConversionRefMU
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: LinearConversionRefMU
  nameWithType: PhysicalQuantity.LinearConversionRefMU
  fullName: SearchAThing.Sci.PhysicalQuantity.LinearConversionRefMU
  type: Property
  source:
    id: LinearConversionRefMU
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 33
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public MeasureUnit LinearConversionRefMU { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.MeasureUnit
    content.vb: Public ReadOnly Property LinearConversionRefMU As MeasureUnit
  overload: SearchAThing.Sci.PhysicalQuantity.LinearConversionRefMU*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.PhysicalQuantity.ByName(System.String)
  commentId: M:SearchAThing.Sci.PhysicalQuantity.ByName(System.String)
  id: ByName(System.String)
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: ByName(String)
  nameWithType: PhysicalQuantity.ByName(String)
  fullName: SearchAThing.Sci.PhysicalQuantity.ByName(System.String)
  type: Method
  source:
    id: ByName
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 44
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public MeasureUnit ByName(string mu_name)
    parameters:
    - id: mu_name
      type: System.String
    return:
      type: SearchAThing.Sci.MeasureUnit
    content.vb: Public Function ByName(mu_name As String) As MeasureUnit
  overload: SearchAThing.Sci.PhysicalQuantity.ByName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.PhysicalQuantity.MeasureUnits
  commentId: P:SearchAThing.Sci.PhysicalQuantity.MeasureUnits
  id: MeasureUnits
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: MeasureUnits
  nameWithType: PhysicalQuantity.MeasureUnits
  fullName: SearchAThing.Sci.PhysicalQuantity.MeasureUnits
  type: Property
  source:
    id: MeasureUnits
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 59
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public IEnumerable<MeasureUnit> MeasureUnits { get; }
    parameters: []
    return:
      type: IEnumerable{SearchAThing.Sci.MeasureUnit}
    content.vb: Public ReadOnly Property MeasureUnits As IEnumerable(Of MeasureUnit)
  overload: SearchAThing.Sci.PhysicalQuantity.MeasureUnits*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.PhysicalQuantity.Name
  commentId: P:SearchAThing.Sci.PhysicalQuantity.Name
  id: Name
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: PhysicalQuantity.Name
  fullName: SearchAThing.Sci.PhysicalQuantity.Name
  type: Property
  source:
    id: Name
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 78
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: SearchAThing.Sci.PhysicalQuantity.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.PhysicalQuantity.#ctor(System.String,Type,SearchAThing.Sci.MeasureUnitConversionTypeEnum)
  commentId: M:SearchAThing.Sci.PhysicalQuantity.#ctor(System.String,Type,SearchAThing.Sci.MeasureUnitConversionTypeEnum)
  id: '#ctor(System.String,Type,SearchAThing.Sci.MeasureUnitConversionTypeEnum)'
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: PhysicalQuantity(String, Type, MeasureUnitConversionTypeEnum)
  nameWithType: PhysicalQuantity.PhysicalQuantity(String, Type, MeasureUnitConversionTypeEnum)
  fullName: SearchAThing.Sci.PhysicalQuantity.PhysicalQuantity(System.String, Type, SearchAThing.Sci.MeasureUnitConversionTypeEnum)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 82
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public PhysicalQuantity(string name, Type _measureUnitsContainerType = null, MeasureUnitConversionTypeEnum muConversionType = MeasureUnitConversionTypeEnum.Linear)
    parameters:
    - id: name
      type: System.String
    - id: _measureUnitsContainerType
      type: Type
    - id: muConversionType
      type: SearchAThing.Sci.MeasureUnitConversionTypeEnum
    content.vb: Public Sub New(name As String, _measureUnitsContainerType As Type = Nothing, muConversionType As MeasureUnitConversionTypeEnum = MeasureUnitConversionTypeEnum.Linear)
  overload: SearchAThing.Sci.PhysicalQuantity.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.PhysicalQuantity.ConvertFactor(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.PhysicalQuantity.ConvertFactor(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  id: ConvertFactor(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: ConvertFactor(MeasureUnit, MeasureUnit)
  nameWithType: PhysicalQuantity.ConvertFactor(MeasureUnit, MeasureUnit)
  fullName: SearchAThing.Sci.PhysicalQuantity.ConvertFactor(SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: ConvertFactor
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 134
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconvert between linear measure units\n"
  example: []
  syntax:
    content: public double ConvertFactor(MeasureUnit from, MeasureUnit to)
    parameters:
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: System.Double
    content.vb: Public Function ConvertFactor(from As MeasureUnit, to As MeasureUnit) As Double
  overload: SearchAThing.Sci.PhysicalQuantity.ConvertFactor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.PhysicalQuantity.Equals(SearchAThing.Sci.PhysicalQuantity)
  commentId: M:SearchAThing.Sci.PhysicalQuantity.Equals(SearchAThing.Sci.PhysicalQuantity)
  id: Equals(SearchAThing.Sci.PhysicalQuantity)
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: Equals(PhysicalQuantity)
  nameWithType: PhysicalQuantity.Equals(PhysicalQuantity)
  fullName: SearchAThing.Sci.PhysicalQuantity.Equals(SearchAThing.Sci.PhysicalQuantity)
  type: Method
  source:
    id: Equals
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 186
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public bool Equals(PhysicalQuantity other)
    parameters:
    - id: other
      type: SearchAThing.Sci.PhysicalQuantity
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As PhysicalQuantity) As Boolean
  overload: SearchAThing.Sci.PhysicalQuantity.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.PhysicalQuantity.ToString
  commentId: M:SearchAThing.Sci.PhysicalQuantity.ToString
  id: ToString
  parent: SearchAThing.Sci.PhysicalQuantity
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PhysicalQuantity.ToString()
  fullName: SearchAThing.Sci.PhysicalQuantity.ToString()
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\PhysicalQuantity.cs
    startLine: 191
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SearchAThing.Sci.PhysicalQuantity.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.Sci.PhysicalQuantity.MUConversionType*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.MUConversionType
  name: MUConversionType
  nameWithType: PhysicalQuantity.MUConversionType
  fullName: SearchAThing.Sci.PhysicalQuantity.MUConversionType
- uid: SearchAThing.Sci.MeasureUnitConversionTypeEnum
  commentId: T:SearchAThing.Sci.MeasureUnitConversionTypeEnum
  parent: SearchAThing.Sci
  name: MeasureUnitConversionTypeEnum
  nameWithType: MeasureUnitConversionTypeEnum
  fullName: SearchAThing.Sci.MeasureUnitConversionTypeEnum
- uid: SearchAThing.Sci.PhysicalQuantity.LinearConversionRefMU*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.LinearConversionRefMU
  name: LinearConversionRefMU
  nameWithType: PhysicalQuantity.LinearConversionRefMU
  fullName: SearchAThing.Sci.PhysicalQuantity.LinearConversionRefMU
- uid: SearchAThing.Sci.MeasureUnit
  commentId: T:SearchAThing.Sci.MeasureUnit
  parent: SearchAThing.Sci
  name: MeasureUnit
  nameWithType: MeasureUnit
  fullName: SearchAThing.Sci.MeasureUnit
- uid: SearchAThing.Sci.PhysicalQuantity.ByName*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.ByName
  name: ByName
  nameWithType: PhysicalQuantity.ByName
  fullName: SearchAThing.Sci.PhysicalQuantity.ByName
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SearchAThing.Sci.PhysicalQuantity.MeasureUnits*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.MeasureUnits
  name: MeasureUnits
  nameWithType: PhysicalQuantity.MeasureUnits
  fullName: SearchAThing.Sci.PhysicalQuantity.MeasureUnits
- uid: IEnumerable{SearchAThing.Sci.MeasureUnit}
  commentId: '!:IEnumerable{SearchAThing.Sci.MeasureUnit}'
  definition: IEnumerable`1
  name: IEnumerable<MeasureUnit>
  nameWithType: IEnumerable<MeasureUnit>
  fullName: IEnumerable<SearchAThing.Sci.MeasureUnit>
  nameWithType.vb: IEnumerable(Of MeasureUnit)
  fullName.vb: IEnumerable(Of SearchAThing.Sci.MeasureUnit)
  name.vb: IEnumerable(Of MeasureUnit)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.MeasureUnit
    name: MeasureUnit
    nameWithType: MeasureUnit
    fullName: SearchAThing.Sci.MeasureUnit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.MeasureUnit
    name: MeasureUnit
    nameWithType: MeasureUnit
    fullName: SearchAThing.Sci.MeasureUnit
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.PhysicalQuantity.Name*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.Name
  name: Name
  nameWithType: PhysicalQuantity.Name
  fullName: SearchAThing.Sci.PhysicalQuantity.Name
- uid: SearchAThing.Sci.PhysicalQuantity.#ctor*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.#ctor
  name: PhysicalQuantity
  nameWithType: PhysicalQuantity.PhysicalQuantity
  fullName: SearchAThing.Sci.PhysicalQuantity.PhysicalQuantity
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: SearchAThing.Sci.PhysicalQuantity.ConvertFactor*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.ConvertFactor
  name: ConvertFactor
  nameWithType: PhysicalQuantity.ConvertFactor
  fullName: SearchAThing.Sci.PhysicalQuantity.ConvertFactor
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SearchAThing.Sci.PhysicalQuantity.Equals*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.Equals
  name: Equals
  nameWithType: PhysicalQuantity.Equals
  fullName: SearchAThing.Sci.PhysicalQuantity.Equals
- uid: SearchAThing.Sci.PhysicalQuantity
  commentId: T:SearchAThing.Sci.PhysicalQuantity
  parent: SearchAThing.Sci
  name: PhysicalQuantity
  nameWithType: PhysicalQuantity
  fullName: SearchAThing.Sci.PhysicalQuantity
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SearchAThing.Sci.PhysicalQuantity.ToString*
  commentId: Overload:SearchAThing.Sci.PhysicalQuantity.ToString
  name: ToString
  nameWithType: PhysicalQuantity.ToString
  fullName: SearchAThing.Sci.PhysicalQuantity.ToString

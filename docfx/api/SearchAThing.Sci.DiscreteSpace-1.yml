### YamlMime:ManagedReference
items:
- uid: SearchAThing.Sci.DiscreteSpace`1
  commentId: T:SearchAThing.Sci.DiscreteSpace`1
  id: DiscreteSpace`1
  parent: SearchAThing.Sci
  children:
  - SearchAThing.Sci.DiscreteSpace`1.#ctor(System.Double,IEnumerable{`0},Func{`0,IEnumerable{SearchAThing.Sci.Vector3D}},System.Int32)
  - SearchAThing.Sci.DiscreteSpace`1.#ctor(System.Double,IEnumerable{`0},Func{`0,SearchAThing.Sci.Vector3D},System.Int32)
  - SearchAThing.Sci.DiscreteSpace`1.GetItemsAt(SearchAThing.Sci.Vector3D,System.Double)
  langs:
  - csharp
  - vb
  name: DiscreteSpace<T>
  nameWithType: DiscreteSpace<T>
  fullName: SearchAThing.Sci.DiscreteSpace<T>
  type: Class
  source:
    id: DiscreteSpace
    path: Z:\netcore-sci\netcore-sci\DiscreteSpace.cs
    startLine: 55
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\norganize given item list into a discretized space to allow fast query of elements in a space region\n"
  example: []
  syntax:
    content: 'public class DiscreteSpace<T> : object'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class DiscreteSpace(Of T)
          Inherits Object
  inheritance:
  - System.Object
  nameWithType.vb: DiscreteSpace(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SearchAThing.Sci.DiscreteSpace(Of T)
  name.vb: DiscreteSpace(Of T)
- uid: SearchAThing.Sci.DiscreteSpace`1.#ctor(System.Double,IEnumerable{`0},Func{`0,IEnumerable{SearchAThing.Sci.Vector3D}},System.Int32)
  commentId: M:SearchAThing.Sci.DiscreteSpace`1.#ctor(System.Double,IEnumerable{`0},Func{`0,IEnumerable{SearchAThing.Sci.Vector3D}},System.Int32)
  id: '#ctor(System.Double,IEnumerable{`0},Func{`0,IEnumerable{SearchAThing.Sci.Vector3D}},System.Int32)'
  parent: SearchAThing.Sci.DiscreteSpace`1
  langs:
  - csharp
  - vb
  name: DiscreteSpace(Double, IEnumerable<T>, Func<T, IEnumerable<Vector3D>>, Int32)
  nameWithType: DiscreteSpace<T>.DiscreteSpace(Double, IEnumerable<T>, Func<T, IEnumerable<Vector3D>>, Int32)
  fullName: SearchAThing.Sci.DiscreteSpace<T>.DiscreteSpace(System.Double, IEnumerable<T>, Func<T, IEnumerable<SearchAThing.Sci.Vector3D>>, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\DiscreteSpace.cs
    startLine: 83
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nBuild a discrete space to search within GetItemsAt.\nspaceDim need to equals 3 when using vector in 3d\n"
  example: []
  syntax:
    content: public DiscreteSpace(double _tol, IEnumerable<T> ents, Func<T, IEnumerable<Vector3D>> entPoints, int _spaceDim)
    parameters:
    - id: _tol
      type: System.Double
    - id: ents
      type: IEnumerable{{T}}
    - id: entPoints
      type: Func{{T},IEnumerable{SearchAThing.Sci.Vector3D}}
    - id: _spaceDim
      type: System.Int32
    content.vb: Public Sub New(_tol As Double, ents As IEnumerable(Of T), entPoints As Func(Of T, IEnumerable(Of Vector3D)), _spaceDim As Integer)
  overload: SearchAThing.Sci.DiscreteSpace`1.#ctor*
  nameWithType.vb: DiscreteSpace(Of T).DiscreteSpace(Double, IEnumerable(Of T), Func(Of T, IEnumerable(Of Vector3D)), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.DiscreteSpace(Of T).DiscreteSpace(System.Double, IEnumerable(Of T), Func(Of T, IEnumerable(Of SearchAThing.Sci.Vector3D)), System.Int32)
  name.vb: DiscreteSpace(Double, IEnumerable(Of T), Func(Of T, IEnumerable(Of Vector3D)), Int32)
- uid: SearchAThing.Sci.DiscreteSpace`1.#ctor(System.Double,IEnumerable{`0},Func{`0,SearchAThing.Sci.Vector3D},System.Int32)
  commentId: M:SearchAThing.Sci.DiscreteSpace`1.#ctor(System.Double,IEnumerable{`0},Func{`0,SearchAThing.Sci.Vector3D},System.Int32)
  id: '#ctor(System.Double,IEnumerable{`0},Func{`0,SearchAThing.Sci.Vector3D},System.Int32)'
  parent: SearchAThing.Sci.DiscreteSpace`1
  langs:
  - csharp
  - vb
  name: DiscreteSpace(Double, IEnumerable<T>, Func<T, Vector3D>, Int32)
  nameWithType: DiscreteSpace<T>.DiscreteSpace(Double, IEnumerable<T>, Func<T, Vector3D>, Int32)
  fullName: SearchAThing.Sci.DiscreteSpace<T>.DiscreteSpace(System.Double, IEnumerable<T>, Func<T, SearchAThing.Sci.Vector3D>, System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\DiscreteSpace.cs
    startLine: 92
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nBuild a discrete space to search within GetItemsAt.\nspaceDim need to equals 3 when using vector in 3d\n"
  example: []
  syntax:
    content: public DiscreteSpace(double _tol, IEnumerable<T> ents, Func<T, Vector3D> entPoint, int _spaceDim)
    parameters:
    - id: _tol
      type: System.Double
    - id: ents
      type: IEnumerable{{T}}
    - id: entPoint
      type: Func{{T},SearchAThing.Sci.Vector3D}
    - id: _spaceDim
      type: System.Int32
    content.vb: Public Sub New(_tol As Double, ents As IEnumerable(Of T), entPoint As Func(Of T, Vector3D), _spaceDim As Integer)
  overload: SearchAThing.Sci.DiscreteSpace`1.#ctor*
  nameWithType.vb: DiscreteSpace(Of T).DiscreteSpace(Double, IEnumerable(Of T), Func(Of T, Vector3D), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.DiscreteSpace(Of T).DiscreteSpace(System.Double, IEnumerable(Of T), Func(Of T, SearchAThing.Sci.Vector3D), System.Int32)
  name.vb: DiscreteSpace(Double, IEnumerable(Of T), Func(Of T, Vector3D), Int32)
- uid: SearchAThing.Sci.DiscreteSpace`1.GetItemsAt(SearchAThing.Sci.Vector3D,System.Double)
  commentId: M:SearchAThing.Sci.DiscreteSpace`1.GetItemsAt(SearchAThing.Sci.Vector3D,System.Double)
  id: GetItemsAt(SearchAThing.Sci.Vector3D,System.Double)
  parent: SearchAThing.Sci.DiscreteSpace`1
  langs:
  - csharp
  - vb
  name: GetItemsAt(Vector3D, Double)
  nameWithType: DiscreteSpace<T>.GetItemsAt(Vector3D, Double)
  fullName: SearchAThing.Sci.DiscreteSpace<T>.GetItemsAt(SearchAThing.Sci.Vector3D, System.Double)
  type: Method
  source:
    id: GetItemsAt
    path: Z:\netcore-sci\netcore-sci\DiscreteSpace.cs
    startLine: 126
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nretrieve items that resides in the space at given point with given extents max distance\n"
  example: []
  syntax:
    content: public IEnumerable<T> GetItemsAt(Vector3D pt, double maxDist)
    parameters:
    - id: pt
      type: SearchAThing.Sci.Vector3D
    - id: maxDist
      type: System.Double
    return:
      type: IEnumerable{{T}}
    content.vb: Public Function GetItemsAt(pt As Vector3D, maxDist As Double) As IEnumerable(Of T)
  overload: SearchAThing.Sci.DiscreteSpace`1.GetItemsAt*
  nameWithType.vb: DiscreteSpace(Of T).GetItemsAt(Vector3D, Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.DiscreteSpace(Of T).GetItemsAt(SearchAThing.Sci.Vector3D, System.Double)
references:
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.Sci.DiscreteSpace`1.#ctor*
  commentId: Overload:SearchAThing.Sci.DiscreteSpace`1.#ctor
  name: DiscreteSpace
  nameWithType: DiscreteSpace<T>.DiscreteSpace
  fullName: SearchAThing.Sci.DiscreteSpace<T>.DiscreteSpace
  nameWithType.vb: DiscreteSpace(Of T).DiscreteSpace
  fullName.vb: SearchAThing.Sci.DiscreteSpace(Of T).DiscreteSpace
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{T},IEnumerable{SearchAThing.Sci.Vector3D}}
  commentId: '!:Func{`0,IEnumerable{SearchAThing.Sci.Vector3D}}'
  definition: Func`2
  name: Func<T, IEnumerable<Vector3D>>
  nameWithType: Func<T, IEnumerable<Vector3D>>
  fullName: Func<T, IEnumerable<SearchAThing.Sci.Vector3D>>
  nameWithType.vb: Func(Of T, IEnumerable(Of Vector3D))
  fullName.vb: Func(Of T, IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: Func(Of T, IEnumerable(Of Vector3D))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{T},SearchAThing.Sci.Vector3D}
  commentId: '!:Func{``0,SearchAThing.Sci.Vector3D}'
  definition: Func`2
  name: Func<T, Vector3D>
  nameWithType: Func<T, Vector3D>
  fullName: Func<T, SearchAThing.Sci.Vector3D>
  nameWithType.vb: Func(Of T, Vector3D)
  fullName.vb: Func(Of T, SearchAThing.Sci.Vector3D)
  name.vb: Func(Of T, Vector3D)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.DiscreteSpace`1.GetItemsAt*
  commentId: Overload:SearchAThing.Sci.DiscreteSpace`1.GetItemsAt
  name: GetItemsAt
  nameWithType: DiscreteSpace<T>.GetItemsAt
  fullName: SearchAThing.Sci.DiscreteSpace<T>.GetItemsAt
  nameWithType.vb: DiscreteSpace(Of T).GetItemsAt
  fullName.vb: SearchAThing.Sci.DiscreteSpace(Of T).GetItemsAt
- uid: SearchAThing.Sci.Vector3D
  commentId: T:SearchAThing.Sci.Vector3D
  parent: SearchAThing.Sci
  name: Vector3D
  nameWithType: Vector3D
  fullName: SearchAThing.Sci.Vector3D

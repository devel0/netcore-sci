### YamlMime:ManagedReference
items:
- uid: SearchAThing.Sci.MeasureUnit
  commentId: T:SearchAThing.Sci.MeasureUnit
  id: MeasureUnit
  parent: SearchAThing.Sci
  children:
  - SearchAThing.Sci.MeasureUnit.#ctor(SearchAThing.Sci.PhysicalQuantity,System.String,Func{SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit,System.Double,System.Double})
  - SearchAThing.Sci.MeasureUnit.#ctor(SearchAThing.Sci.PhysicalQuantity,System.String,SearchAThing.Sci.MeasureUnit,System.Double)
  - SearchAThing.Sci.MeasureUnit.Equals(SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.MeasureUnit.Name
  - SearchAThing.Sci.MeasureUnit.op_Multiply(System.Double,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.MeasureUnit.op_Multiply(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.MeasureUnit.PhysicalQuantity
  - SearchAThing.Sci.MeasureUnit.Related(SearchAThing.Sci.MUDomain)
  - SearchAThing.Sci.MeasureUnit.Tolerance(SearchAThing.Sci.IModel)
  - SearchAThing.Sci.MeasureUnit.ToString
  langs:
  - csharp
  - vb
  name: MeasureUnit
  nameWithType: MeasureUnit
  fullName: SearchAThing.Sci.MeasureUnit
  type: Class
  source:
    id: MeasureUnit
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 15
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: 'public class MeasureUnit : IEquatable<MeasureUnit>'
    content.vb: >-
      Public Class MeasureUnit
          Inherits IEquatable(Of MeasureUnit)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SearchAThing.Sci.MeasureUnit.Name
  commentId: P:SearchAThing.Sci.MeasureUnit.Name
  id: Name
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MeasureUnit.Name
  fullName: SearchAThing.Sci.MeasureUnit.Name
  type: Property
  source:
    id: Name
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 29
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: SearchAThing.Sci.MeasureUnit.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.MeasureUnit.PhysicalQuantity
  commentId: P:SearchAThing.Sci.MeasureUnit.PhysicalQuantity
  id: PhysicalQuantity
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: PhysicalQuantity
  nameWithType: MeasureUnit.PhysicalQuantity
  fullName: SearchAThing.Sci.MeasureUnit.PhysicalQuantity
  type: Property
  source:
    id: PhysicalQuantity
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 31
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public PhysicalQuantity PhysicalQuantity { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.PhysicalQuantity
    content.vb: Public ReadOnly Property PhysicalQuantity As PhysicalQuantity
  overload: SearchAThing.Sci.MeasureUnit.PhysicalQuantity*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.MeasureUnit.#ctor(SearchAThing.Sci.PhysicalQuantity,System.String,SearchAThing.Sci.MeasureUnit,System.Double)
  commentId: M:SearchAThing.Sci.MeasureUnit.#ctor(SearchAThing.Sci.PhysicalQuantity,System.String,SearchAThing.Sci.MeasureUnit,System.Double)
  id: '#ctor(SearchAThing.Sci.PhysicalQuantity,System.String,SearchAThing.Sci.MeasureUnit,System.Double)'
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: MeasureUnit(PhysicalQuantity, String, MeasureUnit, Double)
  nameWithType: MeasureUnit.MeasureUnit(PhysicalQuantity, String, MeasureUnit, Double)
  fullName: SearchAThing.Sci.MeasureUnit.MeasureUnit(SearchAThing.Sci.PhysicalQuantity, System.String, SearchAThing.Sci.MeasureUnit, System.Double)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 56
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public MeasureUnit(PhysicalQuantity physicalQuantity, string name, MeasureUnit convRefUnit = null, double convRefFactor = null)
    parameters:
    - id: physicalQuantity
      type: SearchAThing.Sci.PhysicalQuantity
    - id: name
      type: System.String
    - id: convRefUnit
      type: SearchAThing.Sci.MeasureUnit
    - id: convRefFactor
      type: System.Double
    content.vb: Public Sub New(physicalQuantity As PhysicalQuantity, name As String, convRefUnit As MeasureUnit = Nothing, convRefFactor As Double = Nothing)
  overload: SearchAThing.Sci.MeasureUnit.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.MeasureUnit.#ctor(SearchAThing.Sci.PhysicalQuantity,System.String,Func{SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit,System.Double,System.Double})
  commentId: M:SearchAThing.Sci.MeasureUnit.#ctor(SearchAThing.Sci.PhysicalQuantity,System.String,Func{SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit,System.Double,System.Double})
  id: '#ctor(SearchAThing.Sci.PhysicalQuantity,System.String,Func{SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit,System.Double,System.Double})'
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: MeasureUnit(PhysicalQuantity, String, Func<MeasureUnit, MeasureUnit, Double, Double>)
  nameWithType: MeasureUnit.MeasureUnit(PhysicalQuantity, String, Func<MeasureUnit, MeasureUnit, Double, Double>)
  fullName: SearchAThing.Sci.MeasureUnit.MeasureUnit(SearchAThing.Sci.PhysicalQuantity, System.String, Func<SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit, System.Double, System.Double>)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 63
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public MeasureUnit(PhysicalQuantity physicalQuantity, string name, Func<MeasureUnit, MeasureUnit, double, double> convRefFunctor)
    parameters:
    - id: physicalQuantity
      type: SearchAThing.Sci.PhysicalQuantity
    - id: name
      type: System.String
    - id: convRefFunctor
      type: Func{SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit,System.Double,System.Double}
    content.vb: Public Sub New(physicalQuantity As PhysicalQuantity, name As String, convRefFunctor As Func(Of MeasureUnit, MeasureUnit, Double, Double))
  overload: SearchAThing.Sci.MeasureUnit.#ctor*
  nameWithType.vb: MeasureUnit.MeasureUnit(PhysicalQuantity, String, Func(Of MeasureUnit, MeasureUnit, Double, Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.MeasureUnit.MeasureUnit(SearchAThing.Sci.PhysicalQuantity, System.String, Func(Of SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit, System.Double, System.Double))
  name.vb: MeasureUnit(PhysicalQuantity, String, Func(Of MeasureUnit, MeasureUnit, Double, Double))
- uid: SearchAThing.Sci.MeasureUnit.op_Multiply(System.Double,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.MeasureUnit.op_Multiply(System.Double,SearchAThing.Sci.MeasureUnit)
  id: op_Multiply(System.Double,SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: Multiply(Double, MeasureUnit)
  nameWithType: MeasureUnit.Multiply(Double, MeasureUnit)
  fullName: SearchAThing.Sci.MeasureUnit.Multiply(System.Double, SearchAThing.Sci.MeasureUnit)
  type: Operator
  source:
    id: op_Multiply
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 73
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nBuilds a Measure object of value * given mu\n"
  example: []
  syntax:
    content: public static Measure operator *(double value, MeasureUnit mu)
    parameters:
    - id: value
      type: System.Double
    - id: mu
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Shared Operator *(value As Double, mu As MeasureUnit) As Measure
  overload: SearchAThing.Sci.MeasureUnit.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.MeasureUnit.op_Multiply(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.MeasureUnit.op_Multiply(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit)
  id: op_Multiply(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: Multiply(Nullable<Double>, MeasureUnit)
  nameWithType: MeasureUnit.Multiply(Nullable<Double>, MeasureUnit)
  fullName: SearchAThing.Sci.MeasureUnit.Multiply(System.Nullable<System.Double>, SearchAThing.Sci.MeasureUnit)
  type: Operator
  source:
    id: op_Multiply
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 78
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static Measure operator *(double? value, MeasureUnit mu)
    parameters:
    - id: value
      type: System.Nullable{System.Double}
    - id: mu
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Shared Operator *(value As Double?, mu As MeasureUnit) As Measure
  overload: SearchAThing.Sci.MeasureUnit.op_Multiply*
  nameWithType.vb: MeasureUnit.Multiply(Nullable(Of Double), MeasureUnit)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.Sci.MeasureUnit.Multiply(System.Nullable(Of System.Double), SearchAThing.Sci.MeasureUnit)
  name.vb: Multiply(Nullable(Of Double), MeasureUnit)
- uid: SearchAThing.Sci.MeasureUnit.Related(SearchAThing.Sci.MUDomain)
  commentId: M:SearchAThing.Sci.MeasureUnit.Related(SearchAThing.Sci.MUDomain)
  id: Related(SearchAThing.Sci.MUDomain)
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: Related(MUDomain)
  nameWithType: MeasureUnit.Related(MUDomain)
  fullName: SearchAThing.Sci.MeasureUnit.Related(SearchAThing.Sci.MUDomain)
  type: Method
  source:
    id: Related
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 88
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nretrieve correspondent measure unit ( same physical quantity ) from given domain\n"
  example: []
  syntax:
    content: public MeasureUnit Related(MUDomain mud)
    parameters:
    - id: mud
      type: SearchAThing.Sci.MUDomain
    return:
      type: SearchAThing.Sci.MeasureUnit
    content.vb: Public Function Related(mud As MUDomain) As MeasureUnit
  overload: SearchAThing.Sci.MeasureUnit.Related*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.MeasureUnit.ToString
  commentId: M:SearchAThing.Sci.MeasureUnit.ToString
  id: ToString
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: MeasureUnit.ToString()
  fullName: SearchAThing.Sci.MeasureUnit.ToString()
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 95
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SearchAThing.Sci.MeasureUnit.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SearchAThing.Sci.MeasureUnit.Equals(SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.MeasureUnit.Equals(SearchAThing.Sci.MeasureUnit)
  id: Equals(SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: Equals(MeasureUnit)
  nameWithType: MeasureUnit.Equals(MeasureUnit)
  fullName: SearchAThing.Sci.MeasureUnit.Equals(SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Equals
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 100
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public bool Equals(MeasureUnit other)
    parameters:
    - id: other
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As MeasureUnit) As Boolean
  overload: SearchAThing.Sci.MeasureUnit.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.MeasureUnit.Tolerance(SearchAThing.Sci.IModel)
  commentId: M:SearchAThing.Sci.MeasureUnit.Tolerance(SearchAThing.Sci.IModel)
  id: Tolerance(SearchAThing.Sci.IModel)
  parent: SearchAThing.Sci.MeasureUnit
  langs:
  - csharp
  - vb
  name: Tolerance(IModel)
  nameWithType: MeasureUnit.Tolerance(IModel)
  fullName: SearchAThing.Sci.MeasureUnit.Tolerance(SearchAThing.Sci.IModel)
  type: Method
  source:
    id: Tolerance
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 105
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public double Tolerance(IModel model)
    parameters:
    - id: model
      type: SearchAThing.Sci.IModel
    return:
      type: System.Double
    content.vb: Public Function Tolerance(model As IModel) As Double
  overload: SearchAThing.Sci.MeasureUnit.Tolerance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.Sci.MeasureUnit.Name*
  commentId: Overload:SearchAThing.Sci.MeasureUnit.Name
  name: Name
  nameWithType: MeasureUnit.Name
  fullName: SearchAThing.Sci.MeasureUnit.Name
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SearchAThing.Sci.MeasureUnit.PhysicalQuantity*
  commentId: Overload:SearchAThing.Sci.MeasureUnit.PhysicalQuantity
  name: PhysicalQuantity
  nameWithType: MeasureUnit.PhysicalQuantity
  fullName: SearchAThing.Sci.MeasureUnit.PhysicalQuantity
- uid: SearchAThing.Sci.PhysicalQuantity
  commentId: T:SearchAThing.Sci.PhysicalQuantity
  parent: SearchAThing.Sci
  name: PhysicalQuantity
  nameWithType: PhysicalQuantity
  fullName: SearchAThing.Sci.PhysicalQuantity
- uid: SearchAThing.Sci.MeasureUnit.#ctor*
  commentId: Overload:SearchAThing.Sci.MeasureUnit.#ctor
  name: MeasureUnit
  nameWithType: MeasureUnit.MeasureUnit
  fullName: SearchAThing.Sci.MeasureUnit.MeasureUnit
- uid: SearchAThing.Sci.MeasureUnit
  commentId: T:SearchAThing.Sci.MeasureUnit
  parent: SearchAThing.Sci
  name: MeasureUnit
  nameWithType: MeasureUnit
  fullName: SearchAThing.Sci.MeasureUnit
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Func{SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit,System.Double,System.Double}
  commentId: '!:Func{SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit,System.Double,System.Double}'
  definition: Func`4
  name: Func<MeasureUnit, MeasureUnit, Double, Double>
  nameWithType: Func<MeasureUnit, MeasureUnit, Double, Double>
  fullName: Func<SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit, System.Double, System.Double>
  nameWithType.vb: Func(Of MeasureUnit, MeasureUnit, Double, Double)
  fullName.vb: Func(Of SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit, System.Double, System.Double)
  name.vb: Func(Of MeasureUnit, MeasureUnit, Double, Double)
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.MeasureUnit
    name: MeasureUnit
    nameWithType: MeasureUnit
    fullName: SearchAThing.Sci.MeasureUnit
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.MeasureUnit
    name: MeasureUnit
    nameWithType: MeasureUnit
    fullName: SearchAThing.Sci.MeasureUnit
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.MeasureUnit
    name: MeasureUnit
    nameWithType: MeasureUnit
    fullName: SearchAThing.Sci.MeasureUnit
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.MeasureUnit
    name: MeasureUnit
    nameWithType: MeasureUnit
    fullName: SearchAThing.Sci.MeasureUnit
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`4
  isExternal: true
  name: Func<, , , >
  nameWithType: Func<, , , >
  fullName: Func<, , , >
  nameWithType.vb: Func(Of , , , )
  fullName.vb: Func(Of , , , )
  name.vb: Func(Of , , , )
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.MeasureUnit.op_Multiply*
  commentId: Overload:SearchAThing.Sci.MeasureUnit.op_Multiply
  name: Multiply
  nameWithType: MeasureUnit.Multiply
  fullName: SearchAThing.Sci.MeasureUnit.Multiply
- uid: SearchAThing.Sci.Measure
  commentId: T:SearchAThing.Sci.Measure
  parent: SearchAThing.Sci
  name: Measure
  nameWithType: Measure
  fullName: SearchAThing.Sci.Measure
- uid: System.Nullable{System.Double}
  commentId: '!:System.Nullable{System.Double}'
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.MeasureUnit.Related*
  commentId: Overload:SearchAThing.Sci.MeasureUnit.Related
  name: Related
  nameWithType: MeasureUnit.Related
  fullName: SearchAThing.Sci.MeasureUnit.Related
- uid: SearchAThing.Sci.MUDomain
  commentId: T:SearchAThing.Sci.MUDomain
  parent: SearchAThing.Sci
  name: MUDomain
  nameWithType: MUDomain
  fullName: SearchAThing.Sci.MUDomain
- uid: SearchAThing.Sci.MeasureUnit.ToString*
  commentId: Overload:SearchAThing.Sci.MeasureUnit.ToString
  name: ToString
  nameWithType: MeasureUnit.ToString
  fullName: SearchAThing.Sci.MeasureUnit.ToString
- uid: SearchAThing.Sci.MeasureUnit.Equals*
  commentId: Overload:SearchAThing.Sci.MeasureUnit.Equals
  name: Equals
  nameWithType: MeasureUnit.Equals
  fullName: SearchAThing.Sci.MeasureUnit.Equals
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SearchAThing.Sci.MeasureUnit.Tolerance*
  commentId: Overload:SearchAThing.Sci.MeasureUnit.Tolerance
  name: Tolerance
  nameWithType: MeasureUnit.Tolerance
  fullName: SearchAThing.Sci.MeasureUnit.Tolerance
- uid: SearchAThing.Sci.IModel
  commentId: T:SearchAThing.Sci.IModel
  parent: SearchAThing.Sci
  name: IModel
  nameWithType: IModel
  fullName: SearchAThing.Sci.IModel

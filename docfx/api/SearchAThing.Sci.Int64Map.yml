### YamlMime:ManagedReference
items:
- uid: SearchAThing.Sci.Int64Map
  commentId: T:SearchAThing.Sci.Int64Map
  id: Int64Map
  parent: SearchAThing.Sci
  children:
  - SearchAThing.Sci.Int64Map.#ctor(System.Double,IEnumerable{System.Double},System.Boolean)
  - SearchAThing.Sci.Int64Map.FromInt64(Int64)
  - SearchAThing.Sci.Int64Map.Origin
  - SearchAThing.Sci.Int64Map.ToInt64(System.Double)
  - SearchAThing.Sci.Int64Map.Tolerance
  langs:
  - csharp
  - vb
  name: Int64Map
  nameWithType: Int64Map
  fullName: SearchAThing.Sci.Int64Map
  type: Class
  source:
    id: Int64Map
    path: Z:\netcore-sci\netcore-sci\Int64Map.cs
    startLine: 14
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nScan a given domain of doubles, determine the midpoint ( Origin )\nand using the given tolerance it tests for integrity in conversion between values\nfrom double to Int64 and vice-versa.\nIt can generate a Int64MapExceptionRange.\n"
  example: []
  syntax:
    content: 'public class Int64Map : object'
    content.vb: >-
      Public Class Int64Map
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SearchAThing.Sci.Int64Map.Origin
  commentId: P:SearchAThing.Sci.Int64Map.Origin
  id: Origin
  parent: SearchAThing.Sci.Int64Map
  langs:
  - csharp
  - vb
  name: Origin
  nameWithType: Int64Map.Origin
  fullName: SearchAThing.Sci.Int64Map.Origin
  type: Property
  source:
    id: Origin
    path: Z:\netcore-sci\netcore-sci\Int64Map.cs
    startLine: 17
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public double Origin { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Origin As Double
  overload: SearchAThing.Sci.Int64Map.Origin*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Int64Map.Tolerance
  commentId: P:SearchAThing.Sci.Int64Map.Tolerance
  id: Tolerance
  parent: SearchAThing.Sci.Int64Map
  langs:
  - csharp
  - vb
  name: Tolerance
  nameWithType: Int64Map.Tolerance
  fullName: SearchAThing.Sci.Int64Map.Tolerance
  type: Property
  source:
    id: Tolerance
    path: Z:\netcore-sci\netcore-sci\Int64Map.cs
    startLine: 18
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public double Tolerance { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Tolerance As Double
  overload: SearchAThing.Sci.Int64Map.Tolerance*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Int64Map.#ctor(System.Double,IEnumerable{System.Double},System.Boolean)
  commentId: M:SearchAThing.Sci.Int64Map.#ctor(System.Double,IEnumerable{System.Double},System.Boolean)
  id: '#ctor(System.Double,IEnumerable{System.Double},System.Boolean)'
  parent: SearchAThing.Sci.Int64Map
  langs:
  - csharp
  - vb
  name: Int64Map(Double, IEnumerable<Double>, Boolean)
  nameWithType: Int64Map.Int64Map(Double, IEnumerable<Double>, Boolean)
  fullName: SearchAThing.Sci.Int64Map.Int64Map(System.Double, IEnumerable<System.Double>, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Int64Map.cs
    startLine: 24
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nuse small tolerance to avoid lost of precision\nNote: too small tolerance can generate Int64MapExceptionRange\n"
  example: []
  syntax:
    content: public Int64Map(double tol, IEnumerable<double> domainValues, bool selfCheckTolerance = true)
    parameters:
    - id: tol
      type: System.Double
    - id: domainValues
      type: IEnumerable{System.Double}
    - id: selfCheckTolerance
      type: System.Boolean
    content.vb: Public Sub New(tol As Double, domainValues As IEnumerable(Of Double), selfCheckTolerance As Boolean = True)
  overload: SearchAThing.Sci.Int64Map.#ctor*
  nameWithType.vb: Int64Map.Int64Map(Double, IEnumerable(Of Double), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.Int64Map.Int64Map(System.Double, IEnumerable(Of System.Double), System.Boolean)
  name.vb: Int64Map(Double, IEnumerable(Of Double), Boolean)
- uid: SearchAThing.Sci.Int64Map.ToInt64(System.Double)
  commentId: M:SearchAThing.Sci.Int64Map.ToInt64(System.Double)
  id: ToInt64(System.Double)
  parent: SearchAThing.Sci.Int64Map
  langs:
  - csharp
  - vb
  name: ToInt64(Double)
  nameWithType: Int64Map.ToInt64(Double)
  fullName: SearchAThing.Sci.Int64Map.ToInt64(System.Double)
  type: Method
  source:
    id: ToInt64
    path: Z:\netcore-sci\netcore-sci\Int64Map.cs
    startLine: 50
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public Int64 ToInt64(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Int64
    content.vb: Public Function ToInt64(x As Double) As Int64
  overload: SearchAThing.Sci.Int64Map.ToInt64*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Int64Map.FromInt64(Int64)
  commentId: M:SearchAThing.Sci.Int64Map.FromInt64(Int64)
  id: FromInt64(Int64)
  parent: SearchAThing.Sci.Int64Map
  langs:
  - csharp
  - vb
  name: FromInt64(Int64)
  nameWithType: Int64Map.FromInt64(Int64)
  fullName: SearchAThing.Sci.Int64Map.FromInt64(Int64)
  type: Method
  source:
    id: FromInt64
    path: Z:\netcore-sci\netcore-sci\Int64Map.cs
    startLine: 51
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public double FromInt64(Int64 x)
    parameters:
    - id: x
      type: Int64
    return:
      type: System.Double
    content.vb: Public Function FromInt64(x As Int64) As Double
  overload: SearchAThing.Sci.Int64Map.FromInt64*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.Sci.Int64Map.Origin*
  commentId: Overload:SearchAThing.Sci.Int64Map.Origin
  name: Origin
  nameWithType: Int64Map.Origin
  fullName: SearchAThing.Sci.Int64Map.Origin
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SearchAThing.Sci.Int64Map.Tolerance*
  commentId: Overload:SearchAThing.Sci.Int64Map.Tolerance
  name: Tolerance
  nameWithType: Int64Map.Tolerance
  fullName: SearchAThing.Sci.Int64Map.Tolerance
- uid: SearchAThing.Sci.Int64Map.#ctor*
  commentId: Overload:SearchAThing.Sci.Int64Map.#ctor
  name: Int64Map
  nameWithType: Int64Map.Int64Map
  fullName: SearchAThing.Sci.Int64Map.Int64Map
- uid: IEnumerable{System.Double}
  commentId: '!:IEnumerable{System.Double}'
  definition: IEnumerable`1
  name: IEnumerable<Double>
  nameWithType: IEnumerable<Double>
  fullName: IEnumerable<System.Double>
  nameWithType.vb: IEnumerable(Of Double)
  fullName.vb: IEnumerable(Of System.Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Int64Map.ToInt64*
  commentId: Overload:SearchAThing.Sci.Int64Map.ToInt64
  name: ToInt64
  nameWithType: Int64Map.ToInt64
  fullName: SearchAThing.Sci.Int64Map.ToInt64
- uid: Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: Int64
- uid: SearchAThing.Sci.Int64Map.FromInt64*
  commentId: Overload:SearchAThing.Sci.Int64Map.FromInt64
  name: FromInt64
  nameWithType: Int64Map.FromInt64
  fullName: SearchAThing.Sci.Int64Map.FromInt64

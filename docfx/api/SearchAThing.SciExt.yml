### YamlMime:ManagedReference
items:
- uid: SearchAThing.SciExt
  commentId: T:SearchAThing.SciExt
  id: SciExt
  parent: SearchAThing
  children:
  - SearchAThing.SciExt.AddEntities(DxfObject,IEnumerable{EntityObject},Layer)
  - SearchAThing.SciExt.AddEntity(DxfObject,EntityObject,Layer)
  - SearchAThing.SciExt.Angle(System.Double,System.Double,System.Double,System.Boolean)
  - SearchAThing.SciExt.AngleInRange(System.Double,System.Double,System.Double,System.Double)
  - SearchAThing.SciExt.Area(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.SciExt.AutoIntersect(IReadOnlyList{SearchAThing.Sci.Line3D},System.Double,System.Boolean,IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.AutoZoom(DxfDocument,SearchAThing.Sci.BBox3D)
  - SearchAThing.SciExt.BBox(EntityObject,System.Double)
  - SearchAThing.SciExt.BBox(IEnumerable{EntityObject},System.Double)
  - SearchAThing.SciExt.BBox(IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  - SearchAThing.SciExt.BBox(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.Boolean(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,IEnumerable{SearchAThing.Sci.Vector3D},ClipperLib.ClipType,System.Boolean)
  - SearchAThing.SciExt.ByPhysicalQuantity(SearchAThing.Sci.IMUDomain,SearchAThing.Sci.PhysicalQuantity)
  - SearchAThing.SciExt.CadScript(Face3d)
  - SearchAThing.SciExt.CadScript(SearchAThing.Sci.BBox3D)
  - SearchAThing.SciExt.CadScriptPoint(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.CadScriptPolyline(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.Center(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.Centroid(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.SciExt.Centroid(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  - SearchAThing.SciExt.CircleBy3Points(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.ClosedPolys2D(IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Int32)
  - SearchAThing.SciExt.ContainsPoint(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,System.Boolean)
  - SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  - SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  - SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.SciExt.ConvertToMeasure(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.SciExt.ConvexHull2D(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.CoordTransform(DxfDocument,Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.CoordTransform(EntityObject,Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  - SearchAThing.SciExt.DistinctKeepOrder(IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  - SearchAThing.SciExt.DrawCube(DxfObject,SearchAThing.Sci.Vector3D,System.Double,Layer)
  - SearchAThing.SciExt.DrawCuboid(DxfObject,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,Layer)
  - SearchAThing.SciExt.DrawCuboid(SearchAThing.Sci.BBox3D,DxfObject,Layer)
  - SearchAThing.SciExt.DrawStar(DxfObject,SearchAThing.Sci.Vector3D,System.Double,Layer)
  - SearchAThing.SciExt.DrawTimeline(DxfObject,List{System.ValueTuple{DateTime,DateTime}},System.Double,System.Double,System.Double,System.Double,Func{DateTime,System.String})
  - SearchAThing.SciExt.EqualsTol(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.EqualsTol(IEnumerable{System.ValueTuple{System.Double,System.Double}},IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Double,System.Double)
  - SearchAThing.SciExt.Explode(Insert)
  - SearchAThing.SciExt.GeomCentroid(IReadOnlyList{SearchAThing.Sci.Geometry},System.Double)
  - SearchAThing.SciExt.Intersect(IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Line3D,SearchAThing.Sci.Line3DSegmentMode)
  - SearchAThing.SciExt.IsAClosedPoly(IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  - SearchAThing.SciExt.IsLinearIndependent(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.Length(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.Mean(IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  - SearchAThing.SciExt.MergeColinearSegments(IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  - SearchAThing.SciExt.MidPoint(Polyline)
  - SearchAThing.SciExt.MinDistance(IEnumerable{System.Double})
  - SearchAThing.SciExt.MinMax(IEnumerable{System.Double})
  - SearchAThing.SciExt.NormalizeAngle2PI(System.Double,System.Double)
  - SearchAThing.SciExt.Offset(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  - SearchAThing.SciExt.Points(EntityObject)
  - SearchAThing.SciExt.PolygonSegments(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.SciExt.PolyPoints(IEnumerable{SearchAThing.Sci.Line3D})
  - SearchAThing.SciExt.PolyPoints(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Boolean)
  - SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  - SearchAThing.SciExt.RadTol(System.Double,System.Double)
  - SearchAThing.SciExt.RepeatFirstAtEnd(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  - SearchAThing.SciExt.Segments(IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  - SearchAThing.SciExt.SetColor(EntityObject,AciColor)
  - SearchAThing.SciExt.SetLayer(EntityObject,Layer)
  - SearchAThing.SciExt.SetLayer(IEnumerable{EntityObject},Layer)
  - SearchAThing.SciExt.SortPoly(IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.SciExt.SortPoly(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.SciExt.SortPoly``1(IEnumerable{``0},System.Double,Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  - SearchAThing.SciExt.StringRepresentation(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.Sum(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.TakeUntilAdjacent(IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean)
  - SearchAThing.SciExt.Thin(IEnumerable{System.Double},System.Double,System.Boolean,System.Boolean)
  - SearchAThing.SciExt.ToArc3D(netDxf.Entities.Arc,System.Double)
  - SearchAThing.SciExt.ToCadScript(IEnumerable{SearchAThing.Sci.Line3D})
  - SearchAThing.SciExt.ToCircle3D(netDxf.Entities.Circle,System.Double)
  - SearchAThing.SciExt.ToCoordSequence(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.ToCoordString2D(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.ToCoordString3D(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.ToCSV(IEnumerable{System.Object})
  - SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  - SearchAThing.SciExt.ToDxfUCS(SearchAThing.Sci.CoordinateSystem3D,System.String)
  - SearchAThing.SciExt.ToFace3DList(SearchAThing.Sci.BBox3D)
  - SearchAThing.SciExt.ToGeometryBlock(netDxf.Entities.LwPolyline,System.Double)
  - SearchAThing.SciExt.ToGLLinesVertexes(netDxf.DxfDocument)
  - SearchAThing.SciExt.ToLine(SearchAThing.Sci.Line3D)
  - SearchAThing.SciExt.ToLine3D(netDxf.Entities.Line)
  - SearchAThing.SciExt.ToLwPolyline(IEnumerable{SearchAThing.Sci.Geometry},System.Double,System.Boolean)
  - SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  - SearchAThing.SciExt.ToPolyline(IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  - SearchAThing.SciExt.ToPsql(IEnumerable{SearchAThing.Sci.Vector3D})
  - SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  - SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  - SearchAThing.SciExt.ToVector3D(netDxf.Vector2)
  - SearchAThing.SciExt.Vector3DCoords(LwPolyline)
  - SearchAThing.SciExt.Vector3DCoords(Polyline)
  - SearchAThing.SciExt.Vertexes(IReadOnlyList{SearchAThing.Sci.Geometry},System.Double)
  - SearchAThing.SciExt.WeightedDistribution(IEnumerable{System.Double},System.Int32)
  - SearchAThing.SciExt.ZapDuplicates(IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  - SearchAThing.SciExt.ZapDuplicates(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  langs:
  - csharp
  - vb
  name: SciExt
  nameWithType: SciExt
  fullName: SearchAThing.SciExt
  type: Class
  source:
    id: SciExt
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1150
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: 'public static class SciExt : object'
    content.vb: >-
      Public Module SciExt
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SearchAThing.SciExt.RadTol(System.Double,System.Double)
  commentId: M:SearchAThing.SciExt.RadTol(System.Double,System.Double)
  id: RadTol(System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: RadTol(Double, Double)
  nameWithType: SciExt.RadTol(Double, Double)
  fullName: SearchAThing.SciExt.RadTol(System.Double, System.Double)
  type: Method
  source:
    id: RadTol
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 596
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ncompute angle rad tolerance by given arc length tolerance\n"
  example: []
  syntax:
    content: public static double RadTol(this double lenTol, double radius)
    parameters:
    - id: lenTol
      type: System.Double
      description: length tolerance on the arc
    - id: radius
      type: System.Double
      description: radius of the arc
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RadTol(lenTol As Double, radius As Double) As Double
  overload: SearchAThing.SciExt.RadTol*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ToArc3D(netDxf.Entities.Arc,System.Double)
  commentId: M:SearchAThing.SciExt.ToArc3D(netDxf.Entities.Arc,System.Double)
  id: ToArc3D(netDxf.Entities.Arc,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToArc3D(netDxf.Entities.Arc, Double)
  nameWithType: SciExt.ToArc3D(netDxf.Entities.Arc, Double)
  fullName: SearchAThing.SciExt.ToArc3D(netDxf.Entities.Arc, System.Double)
  type: Method
  source:
    id: ToArc3D
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 598
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static Arc3D ToArc3D(this netDxf.Entities.Arc dxf_arc, double tolLen)
    parameters:
    - id: dxf_arc
      type: netDxf.Entities.Arc
    - id: tolLen
      type: System.Double
    return:
      type: SearchAThing.Sci.Arc3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArc3D(dxf_arc As netDxf.Entities.Arc, tolLen As Double) As Arc3D
  overload: SearchAThing.SciExt.ToArc3D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.AngleInRange(System.Double,System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.SciExt.AngleInRange(System.Double,System.Double,System.Double,System.Double)
  id: AngleInRange(System.Double,System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: AngleInRange(Double, Double, Double, Double)
  nameWithType: SciExt.AngleInRange(Double, Double, Double, Double)
  fullName: SearchAThing.SciExt.AngleInRange(System.Double, System.Double, System.Double, System.Double)
  type: Method
  source:
    id: AngleInRange
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 613
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nstates if given angle is contained in from, to angle range;\nmultiturn angles are supported because test will normalize to [0,2pi) automatically.\n"
  example: []
  syntax:
    content: public static bool AngleInRange(this double pt_angle, double tol_rad, double angle_from, double angle_to)
    parameters:
    - id: pt_angle
      type: System.Double
      description: angle(rad) to test
    - id: tol_rad
      type: System.Double
      description: angle(rad) tolerance
    - id: angle_from
      type: System.Double
      description: angle(rad) from
    - id: angle_to
      type: System.Double
      description: angle(rad) to
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AngleInRange(pt_angle As Double, tol_rad As Double, angle_from As Double, angle_to As Double) As Boolean
  overload: SearchAThing.SciExt.AngleInRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.BBox(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.BBox(IEnumerable{SearchAThing.Sci.Vector3D})
  id: BBox(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: BBox(IEnumerable<Vector3D>)
  nameWithType: SciExt.BBox(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.BBox(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: BBox
    path: Z:\netcore-sci\netcore-sci\BBox3D.cs
    startLine: 233
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static BBox3D BBox(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BBox(pts As IEnumerable(Of Vector3D)) As BBox3D
  overload: SearchAThing.SciExt.BBox*
  nameWithType.vb: SciExt.BBox(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.BBox(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: BBox(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.BBox(EntityObject,System.Double)
  commentId: M:SearchAThing.SciExt.BBox(EntityObject,System.Double)
  id: BBox(EntityObject,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: BBox(EntityObject, Double)
  nameWithType: SciExt.BBox(EntityObject, Double)
  fullName: SearchAThing.SciExt.BBox(EntityObject, System.Double)
  type: Method
  source:
    id: BBox
    path: Z:\netcore-sci\netcore-sci\BBox3D.cs
    startLine: 238
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static BBox3D BBox(this EntityObject eo, double tol_len)
    parameters:
    - id: eo
      type: EntityObject
    - id: tol_len
      type: System.Double
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BBox(eo As EntityObject, tol_len As Double) As BBox3D
  overload: SearchAThing.SciExt.BBox*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.BBox(IEnumerable{EntityObject},System.Double)
  commentId: M:SearchAThing.SciExt.BBox(IEnumerable{EntityObject},System.Double)
  id: BBox(IEnumerable{EntityObject},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: BBox(IEnumerable<EntityObject>, Double)
  nameWithType: SciExt.BBox(IEnumerable<EntityObject>, Double)
  fullName: SearchAThing.SciExt.BBox(IEnumerable<EntityObject>, System.Double)
  type: Method
  source:
    id: BBox
    path: Z:\netcore-sci\netcore-sci\BBox3D.cs
    startLine: 277
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static BBox3D BBox(this IEnumerable<EntityObject> ents, double tol_len)
    parameters:
    - id: ents
      type: IEnumerable{EntityObject}
    - id: tol_len
      type: System.Double
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BBox(ents As IEnumerable(Of EntityObject), tol_len As Double) As BBox3D
  overload: SearchAThing.SciExt.BBox*
  nameWithType.vb: SciExt.BBox(IEnumerable(Of EntityObject), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.BBox(IEnumerable(Of EntityObject), System.Double)
  name.vb: BBox(IEnumerable(Of EntityObject), Double)
- uid: SearchAThing.SciExt.CadScript(SearchAThing.Sci.BBox3D)
  commentId: M:SearchAThing.SciExt.CadScript(SearchAThing.Sci.BBox3D)
  id: CadScript(SearchAThing.Sci.BBox3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: CadScript(BBox3D)
  nameWithType: SciExt.CadScript(BBox3D)
  fullName: SearchAThing.SciExt.CadScript(SearchAThing.Sci.BBox3D)
  type: Method
  source:
    id: CadScript
    path: Z:\netcore-sci\netcore-sci\BBox3D.cs
    startLine: 289
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static string CadScript(this BBox3D bbox)
    parameters:
    - id: bbox
      type: SearchAThing.Sci.BBox3D
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CadScript(bbox As BBox3D) As String
  overload: SearchAThing.SciExt.CadScript*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ToFace3DList(SearchAThing.Sci.BBox3D)
  commentId: M:SearchAThing.SciExt.ToFace3DList(SearchAThing.Sci.BBox3D)
  id: ToFace3DList(SearchAThing.Sci.BBox3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToFace3DList(BBox3D)
  nameWithType: SciExt.ToFace3DList(BBox3D)
  fullName: SearchAThing.SciExt.ToFace3DList(SearchAThing.Sci.BBox3D)
  type: Method
  source:
    id: ToFace3DList
    path: Z:\netcore-sci\netcore-sci\BBox3D.cs
    startLine: 301
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<Face3d> ToFace3DList(this BBox3D bbox)
    parameters:
    - id: bbox
      type: SearchAThing.Sci.BBox3D
    return:
      type: IEnumerable{Face3d}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToFace3DList(bbox As BBox3D) As IEnumerable(Of Face3d)
  overload: SearchAThing.SciExt.ToFace3DList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.DrawCuboid(SearchAThing.Sci.BBox3D,DxfObject,Layer)
  commentId: M:SearchAThing.SciExt.DrawCuboid(SearchAThing.Sci.BBox3D,DxfObject,Layer)
  id: DrawCuboid(SearchAThing.Sci.BBox3D,DxfObject,Layer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: DrawCuboid(BBox3D, DxfObject, Layer)
  nameWithType: SciExt.DrawCuboid(BBox3D, DxfObject, Layer)
  fullName: SearchAThing.SciExt.DrawCuboid(SearchAThing.Sci.BBox3D, DxfObject, Layer)
  type: Method
  source:
    id: DrawCuboid
    path: Z:\netcore-sci\netcore-sci\BBox3D.cs
    startLine: 307
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<Face3d> DrawCuboid(this BBox3D bbox, DxfObject dxfObj, Layer layer = null)
    parameters:
    - id: bbox
      type: SearchAThing.Sci.BBox3D
    - id: dxfObj
      type: DxfObject
    - id: layer
      type: Layer
    return:
      type: IEnumerable{Face3d}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DrawCuboid(bbox As BBox3D, dxfObj As DxfObject, layer As Layer = Nothing) As IEnumerable(Of Face3d)
  overload: SearchAThing.SciExt.DrawCuboid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Points(EntityObject)
  commentId: M:SearchAThing.SciExt.Points(EntityObject)
  id: Points(EntityObject)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Points(EntityObject)
  nameWithType: SciExt.Points(EntityObject)
  fullName: SearchAThing.SciExt.Points(EntityObject)
  type: Method
  source:
    id: Points
    path: Z:\netcore-sci\netcore-sci\BBox3D.cs
    startLine: 316
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<Vector3D> Points(this EntityObject eo)
    parameters:
    - id: eo
      type: EntityObject
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Points(eo As EntityObject) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.Points*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.CircleBy3Points(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.CircleBy3Points(IEnumerable{SearchAThing.Sci.Vector3D})
  id: CircleBy3Points(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: CircleBy3Points(IEnumerable<Vector3D>)
  nameWithType: SciExt.CircleBy3Points(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.CircleBy3Points(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: CircleBy3Points
    path: Z:\netcore-sci\netcore-sci\Circle3D.cs
    startLine: 153
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static Circle3D CircleBy3Points(this IEnumerable<Vector3D> _pts)
    parameters:
    - id: _pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: SearchAThing.Sci.Circle3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CircleBy3Points(_pts As IEnumerable(Of Vector3D)) As Circle3D
  overload: SearchAThing.SciExt.CircleBy3Points*
  nameWithType.vb: SciExt.CircleBy3Points(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.CircleBy3Points(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: CircleBy3Points(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.ToCircle3D(netDxf.Entities.Circle,System.Double)
  commentId: M:SearchAThing.SciExt.ToCircle3D(netDxf.Entities.Circle,System.Double)
  id: ToCircle3D(netDxf.Entities.Circle,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToCircle3D(netDxf.Entities.Circle, Double)
  nameWithType: SciExt.ToCircle3D(netDxf.Entities.Circle, Double)
  fullName: SearchAThing.SciExt.ToCircle3D(netDxf.Entities.Circle, System.Double)
  type: Method
  source:
    id: ToCircle3D
    path: Z:\netcore-sci\netcore-sci\Circle3D.cs
    startLine: 161
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static Circle3D ToCircle3D(this netDxf.Entities.Circle dxf_circle, double tol_len)
    parameters:
    - id: dxf_circle
      type: netDxf.Entities.Circle
    - id: tol_len
      type: System.Double
    return:
      type: SearchAThing.Sci.Circle3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCircle3D(dxf_circle As netDxf.Entities.Circle, tol_len As Double) As Circle3D
  overload: SearchAThing.SciExt.ToCircle3D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  commentId: M:SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  id: Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Project(Vector3D, CoordinateSystem3D, Boolean)
  nameWithType: SciExt.Project(Vector3D, CoordinateSystem3D, Boolean)
  fullName: SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D, SearchAThing.Sci.CoordinateSystem3D, System.Boolean)
  type: Method
  source:
    id: Project
    path: Z:\netcore-sci\netcore-sci\CoordinateSystem3D.cs
    startLine: 349
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nwcs coord of projected coord to the given cs\n"
  example: []
  syntax:
    content: public static Vector3D Project(this Vector3D v, CoordinateSystem3D cs, bool evalCSOrigin = true)
    parameters:
    - id: v
      type: SearchAThing.Sci.Vector3D
      description: wcs point
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
      description: cs to project
    - id: evalCSOrigin
      type: System.Boolean
      description: if true cs origin will subtracted before transform, then readded to obtain wcs point
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Project(v As Vector3D, cs As CoordinateSystem3D, evalCSOrigin As Boolean = True) As Vector3D
  overload: SearchAThing.SciExt.Project*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.SetLayer(EntityObject,Layer)
  commentId: M:SearchAThing.SciExt.SetLayer(EntityObject,Layer)
  id: SetLayer(EntityObject,Layer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: SetLayer(EntityObject, Layer)
  nameWithType: SciExt.SetLayer(EntityObject, Layer)
  fullName: SearchAThing.SciExt.SetLayer(EntityObject, Layer)
  type: Method
  source:
    id: SetLayer
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 86
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static EntityObject SetLayer(this EntityObject eo, Layer layer)
    parameters:
    - id: eo
      type: EntityObject
    - id: layer
      type: Layer
    return:
      type: EntityObject
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetLayer(eo As EntityObject, layer As Layer) As EntityObject
  overload: SearchAThing.SciExt.SetLayer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.MidPoint(Polyline)
  commentId: M:SearchAThing.SciExt.MidPoint(Polyline)
  id: MidPoint(Polyline)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: MidPoint(Polyline)
  nameWithType: SciExt.MidPoint(Polyline)
  fullName: SearchAThing.SciExt.MidPoint(Polyline)
  type: Method
  source:
    id: MidPoint
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 96
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nget the midpoint of the 3d polyline\ndistance is computed over all segments\n"
  example: []
  syntax:
    content: public static Vector3D MidPoint(this Polyline poly)
    parameters:
    - id: poly
      type: Polyline
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MidPoint(poly As Polyline) As Vector3D
  overload: SearchAThing.SciExt.MidPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Explode(Insert)
  commentId: M:SearchAThing.SciExt.Explode(Insert)
  id: Explode(Insert)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Explode(Insert)
  nameWithType: SciExt.Explode(Insert)
  fullName: SearchAThing.SciExt.Explode(Insert)
  type: Method
  source:
    id: Explode
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 122
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<EntityObject> Explode(this Insert ins)
    parameters:
    - id: ins
      type: Insert
    return:
      type: IEnumerable{EntityObject}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Explode(ins As Insert) As IEnumerable(Of EntityObject)
  overload: SearchAThing.SciExt.Explode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Vector3DCoords(Polyline)
  commentId: M:SearchAThing.SciExt.Vector3DCoords(Polyline)
  id: Vector3DCoords(Polyline)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Vector3DCoords(Polyline)
  nameWithType: SciExt.Vector3DCoords(Polyline)
  fullName: SearchAThing.SciExt.Vector3DCoords(Polyline)
  type: Method
  source:
    id: Vector3DCoords
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 154
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nenumerate as Vector3D given dxf polyline vertexes\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Vector3DCoords(this Polyline pl)
    parameters:
    - id: pl
      type: Polyline
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Vector3DCoords(pl As Polyline) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.Vector3DCoords*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Vector3DCoords(LwPolyline)
  commentId: M:SearchAThing.SciExt.Vector3DCoords(LwPolyline)
  id: Vector3DCoords(LwPolyline)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Vector3DCoords(LwPolyline)
  nameWithType: SciExt.Vector3DCoords(LwPolyline)
  fullName: SearchAThing.SciExt.Vector3DCoords(LwPolyline)
  type: Method
  source:
    id: Vector3DCoords
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 162
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nenumerate as Vector3D given dxf lwpolyline vertexes\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Vector3DCoords(this LwPolyline lwp)
    parameters:
    - id: lwp
      type: LwPolyline
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Vector3DCoords(lwp As LwPolyline) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.Vector3DCoords*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.RepeatFirstAtEnd(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.SciExt.RepeatFirstAtEnd(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: RepeatFirstAtEnd(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: RepeatFirstAtEnd(IEnumerable<Vector3D>, Double)
  nameWithType: SciExt.RepeatFirstAtEnd(IEnumerable<Vector3D>, Double)
  fullName: SearchAThing.SciExt.RepeatFirstAtEnd(IEnumerable<SearchAThing.Sci.Vector3D>, System.Double)
  type: Method
  source:
    id: RepeatFirstAtEnd
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 179
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ngiven points a,b,c it will return a,b,c,a ( first is repeated at end )\nit avoid to repeat first at end when latest point already equals the first one\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> RepeatFirstAtEnd(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RepeatFirstAtEnd(pts As IEnumerable(Of Vector3D), tol As Double) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.RepeatFirstAtEnd*
  nameWithType.vb: SciExt.RepeatFirstAtEnd(IEnumerable(Of Vector3D), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.RepeatFirstAtEnd(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Double)
  name.vb: RepeatFirstAtEnd(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.SciExt.CoordTransform(DxfDocument,Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.CoordTransform(DxfDocument,Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D})
  id: CoordTransform(DxfDocument,Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: CoordTransform(DxfDocument, Func<Vector3D, Vector3D>)
  nameWithType: SciExt.CoordTransform(DxfDocument, Func<Vector3D, Vector3D>)
  fullName: SearchAThing.SciExt.CoordTransform(DxfDocument, Func<SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: CoordTransform
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 195
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<EntityObject> CoordTransform(this DxfDocument dxf, Func<Vector3D, Vector3D> transform)
    parameters:
    - id: dxf
      type: DxfDocument
    - id: transform
      type: Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D}
    return:
      type: IEnumerable{EntityObject}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CoordTransform(dxf As DxfDocument, transform As Func(Of Vector3D, Vector3D)) As IEnumerable(Of EntityObject)
  overload: SearchAThing.SciExt.CoordTransform*
  nameWithType.vb: SciExt.CoordTransform(DxfDocument, Func(Of Vector3D, Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.CoordTransform(DxfDocument, Func(Of SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D))
  name.vb: CoordTransform(DxfDocument, Func(Of Vector3D, Vector3D))
- uid: SearchAThing.SciExt.CoordTransform(EntityObject,Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.CoordTransform(EntityObject,Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  id: CoordTransform(EntityObject,Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: CoordTransform(EntityObject, Func<Vector3D, Vector3D>, Vector3D)
  nameWithType: SciExt.CoordTransform(EntityObject, Func<Vector3D, Vector3D>, Vector3D)
  fullName: SearchAThing.SciExt.CoordTransform(EntityObject, Func<SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D>, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: CoordTransform
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 233
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nbuild a clone of the given entity with coord transformed accordingly given function.\n"
  example: []
  syntax:
    content: public static EntityObject CoordTransform(this EntityObject eo, Func<Vector3D, Vector3D> transform, Vector3D origin = null)
    parameters:
    - id: eo
      type: EntityObject
    - id: transform
      type: Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D}
    - id: origin
      type: SearchAThing.Sci.Vector3D
    return:
      type: EntityObject
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CoordTransform(eo As EntityObject, transform As Func(Of Vector3D, Vector3D), origin As Vector3D = Nothing) As EntityObject
  overload: SearchAThing.SciExt.CoordTransform*
  nameWithType.vb: SciExt.CoordTransform(EntityObject, Func(Of Vector3D, Vector3D), Vector3D)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.CoordTransform(EntityObject, Func(Of SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D), SearchAThing.Sci.Vector3D)
  name.vb: CoordTransform(EntityObject, Func(Of Vector3D, Vector3D), Vector3D)
- uid: SearchAThing.SciExt.AddEntity(DxfObject,EntityObject,Layer)
  commentId: M:SearchAThing.SciExt.AddEntity(DxfObject,EntityObject,Layer)
  id: AddEntity(DxfObject,EntityObject,Layer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: AddEntity(DxfObject, EntityObject, Layer)
  nameWithType: SciExt.AddEntity(DxfObject, EntityObject, Layer)
  fullName: SearchAThing.SciExt.AddEntity(DxfObject, EntityObject, Layer)
  type: Method
  source:
    id: AddEntity
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 307
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nadd entity to the given dxf object ( it can be Dxfdocument or Block )\noptionally set layer\n"
  example: []
  syntax:
    content: public static EntityObject AddEntity(this DxfObject dxfObj, EntityObject eo, Layer layer = null)
    parameters:
    - id: dxfObj
      type: DxfObject
    - id: eo
      type: EntityObject
    - id: layer
      type: Layer
    return:
      type: EntityObject
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddEntity(dxfObj As DxfObject, eo As EntityObject, layer As Layer = Nothing) As EntityObject
  overload: SearchAThing.SciExt.AddEntity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.AddEntities(DxfObject,IEnumerable{EntityObject},Layer)
  commentId: M:SearchAThing.SciExt.AddEntities(DxfObject,IEnumerable{EntityObject},Layer)
  id: AddEntities(DxfObject,IEnumerable{EntityObject},Layer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: AddEntities(DxfObject, IEnumerable<EntityObject>, Layer)
  nameWithType: SciExt.AddEntities(DxfObject, IEnumerable<EntityObject>, Layer)
  fullName: SearchAThing.SciExt.AddEntities(DxfObject, IEnumerable<EntityObject>, Layer)
  type: Method
  source:
    id: AddEntities
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 323
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nadd entity to the given dxf object ( it can be Dxfdocument or Block )\noptionally set layer\n"
  example: []
  syntax:
    content: public static void AddEntities(this DxfObject dxfObj, IEnumerable<EntityObject> ents, Layer layer = null)
    parameters:
    - id: dxfObj
      type: DxfObject
    - id: ents
      type: IEnumerable{EntityObject}
    - id: layer
      type: Layer
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddEntities(dxfObj As DxfObject, ents As IEnumerable(Of EntityObject), layer As Layer = Nothing)
  overload: SearchAThing.SciExt.AddEntities*
  nameWithType.vb: SciExt.AddEntities(DxfObject, IEnumerable(Of EntityObject), Layer)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.AddEntities(DxfObject, IEnumerable(Of EntityObject), Layer)
  name.vb: AddEntities(DxfObject, IEnumerable(Of EntityObject), Layer)
- uid: SearchAThing.SciExt.SetLayer(IEnumerable{EntityObject},Layer)
  commentId: M:SearchAThing.SciExt.SetLayer(IEnumerable{EntityObject},Layer)
  id: SetLayer(IEnumerable{EntityObject},Layer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: SetLayer(IEnumerable<EntityObject>, Layer)
  nameWithType: SciExt.SetLayer(IEnumerable<EntityObject>, Layer)
  fullName: SearchAThing.SciExt.SetLayer(IEnumerable<EntityObject>, Layer)
  type: Method
  source:
    id: SetLayer
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 331
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nSet layer of given set of dxf entities\n"
  example: []
  syntax:
    content: public static IEnumerable<EntityObject> SetLayer(this IEnumerable<EntityObject> ents, Layer layer)
    parameters:
    - id: ents
      type: IEnumerable{EntityObject}
    - id: layer
      type: Layer
    return:
      type: IEnumerable{EntityObject}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetLayer(ents As IEnumerable(Of EntityObject), layer As Layer) As IEnumerable(Of EntityObject)
  overload: SearchAThing.SciExt.SetLayer*
  nameWithType.vb: SciExt.SetLayer(IEnumerable(Of EntityObject), Layer)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.SetLayer(IEnumerable(Of EntityObject), Layer)
  name.vb: SetLayer(IEnumerable(Of EntityObject), Layer)
- uid: SearchAThing.SciExt.DrawStar(DxfObject,SearchAThing.Sci.Vector3D,System.Double,Layer)
  commentId: M:SearchAThing.SciExt.DrawStar(DxfObject,SearchAThing.Sci.Vector3D,System.Double,Layer)
  id: DrawStar(DxfObject,SearchAThing.Sci.Vector3D,System.Double,Layer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: DrawStar(DxfObject, Vector3D, Double, Layer)
  nameWithType: SciExt.DrawStar(DxfObject, Vector3D, Double, Layer)
  fullName: SearchAThing.SciExt.DrawStar(DxfObject, SearchAThing.Sci.Vector3D, System.Double, Layer)
  type: Method
  source:
    id: DrawStar
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 340
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nCreates and add dxf entities for a 3 axis of given length centered in given center point.\n"
  example: []
  syntax:
    content: public static IEnumerable<EntityObject> DrawStar(this DxfObject dxfObj, Vector3D center, double L, Layer layer = null)
    parameters:
    - id: dxfObj
      type: DxfObject
    - id: center
      type: SearchAThing.Sci.Vector3D
    - id: L
      type: System.Double
    - id: layer
      type: Layer
    return:
      type: IEnumerable{EntityObject}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DrawStar(dxfObj As DxfObject, center As Vector3D, L As Double, layer As Layer = Nothing) As IEnumerable(Of EntityObject)
  overload: SearchAThing.SciExt.DrawStar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.DrawCube(DxfObject,SearchAThing.Sci.Vector3D,System.Double,Layer)
  commentId: M:SearchAThing.SciExt.DrawCube(DxfObject,SearchAThing.Sci.Vector3D,System.Double,Layer)
  id: DrawCube(DxfObject,SearchAThing.Sci.Vector3D,System.Double,Layer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: DrawCube(DxfObject, Vector3D, Double, Layer)
  nameWithType: SciExt.DrawCube(DxfObject, Vector3D, Double, Layer)
  fullName: SearchAThing.SciExt.DrawCube(DxfObject, SearchAThing.Sci.Vector3D, System.Double, Layer)
  type: Method
  source:
    id: DrawCube
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 352
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nCreates and add dxf entities for a 6 faces of a cube\n"
  example: []
  syntax:
    content: public static IEnumerable<EntityObject> DrawCube(this DxfObject dxfObj, Vector3D center, double L, Layer layer = null)
    parameters:
    - id: dxfObj
      type: DxfObject
    - id: center
      type: SearchAThing.Sci.Vector3D
    - id: L
      type: System.Double
    - id: layer
      type: Layer
    return:
      type: IEnumerable{EntityObject}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DrawCube(dxfObj As DxfObject, center As Vector3D, L As Double, layer As Layer = Nothing) As IEnumerable(Of EntityObject)
  overload: SearchAThing.SciExt.DrawCube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.DrawCuboid(DxfObject,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,Layer)
  commentId: M:SearchAThing.SciExt.DrawCuboid(DxfObject,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,Layer)
  id: DrawCuboid(DxfObject,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,Layer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: DrawCuboid(DxfObject, Vector3D, Vector3D, Layer)
  nameWithType: SciExt.DrawCuboid(DxfObject, Vector3D, Vector3D, Layer)
  fullName: SearchAThing.SciExt.DrawCuboid(DxfObject, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D, Layer)
  type: Method
  source:
    id: DrawCuboid
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 364
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nCreates and add dxf entities for 6 faces of a cuboid\n"
  example: []
  syntax:
    content: public static IEnumerable<EntityObject> DrawCuboid(this DxfObject dxfObj, Vector3D center, Vector3D size, Layer layer = null)
    parameters:
    - id: dxfObj
      type: DxfObject
    - id: center
      type: SearchAThing.Sci.Vector3D
    - id: size
      type: SearchAThing.Sci.Vector3D
    - id: layer
      type: Layer
    return:
      type: IEnumerable{EntityObject}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DrawCuboid(dxfObj As DxfObject, center As Vector3D, size As Vector3D, layer As Layer = Nothing) As IEnumerable(Of EntityObject)
  overload: SearchAThing.SciExt.DrawCuboid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.CadScript(Face3d)
  commentId: M:SearchAThing.SciExt.CadScript(Face3d)
  id: CadScript(Face3d)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: CadScript(Face3d)
  nameWithType: SciExt.CadScript(Face3d)
  fullName: SearchAThing.SciExt.CadScript(Face3d)
  type: Method
  source:
    id: CadScript
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 373
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static string CadScript(this Face3d face)
    parameters:
    - id: face
      type: Face3d
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CadScript(face As Face3d) As String
  overload: SearchAThing.SciExt.CadScript*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.AutoZoom(DxfDocument,SearchAThing.Sci.BBox3D)
  commentId: M:SearchAThing.SciExt.AutoZoom(DxfDocument,SearchAThing.Sci.BBox3D)
  id: AutoZoom(DxfDocument,SearchAThing.Sci.BBox3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: AutoZoom(DxfDocument, BBox3D)
  nameWithType: SciExt.AutoZoom(DxfDocument, BBox3D)
  fullName: SearchAThing.SciExt.AutoZoom(DxfDocument, SearchAThing.Sci.BBox3D)
  type: Method
  source:
    id: AutoZoom
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 393
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ntries to zoom dxf viewport on the given bbox\n"
  example: []
  syntax:
    content: public static void AutoZoom(this DxfDocument dxf, BBox3D bbox)
    parameters:
    - id: dxf
      type: DxfDocument
    - id: bbox
      type: SearchAThing.Sci.BBox3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AutoZoom(dxf As DxfDocument, bbox As BBox3D)
  overload: SearchAThing.SciExt.AutoZoom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ToLine(SearchAThing.Sci.Line3D)
  commentId: M:SearchAThing.SciExt.ToLine(SearchAThing.Sci.Line3D)
  id: ToLine(SearchAThing.Sci.Line3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToLine(Line3D)
  nameWithType: SciExt.ToLine(Line3D)
  fullName: SearchAThing.SciExt.ToLine(SearchAThing.Sci.Line3D)
  type: Method
  source:
    id: ToLine
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 401
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static Line ToLine(this Line3D line)
    parameters:
    - id: line
      type: SearchAThing.Sci.Line3D
    return:
      type: Line
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLine(line As Line3D) As Line
  overload: SearchAThing.SciExt.ToLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.SetColor(EntityObject,AciColor)
  commentId: M:SearchAThing.SciExt.SetColor(EntityObject,AciColor)
  id: SetColor(EntityObject,AciColor)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: SetColor(EntityObject, AciColor)
  nameWithType: SciExt.SetColor(EntityObject, AciColor)
  fullName: SearchAThing.SciExt.SetColor(EntityObject, AciColor)
  type: Method
  source:
    id: SetColor
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 406
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static EntityObject SetColor(this EntityObject eo, AciColor color)
    parameters:
    - id: eo
      type: EntityObject
    - id: color
      type: AciColor
    return:
      type: EntityObject
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetColor(eo As EntityObject, color As AciColor) As EntityObject
  overload: SearchAThing.SciExt.SetColor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ToDxfUCS(SearchAThing.Sci.CoordinateSystem3D,System.String)
  commentId: M:SearchAThing.SciExt.ToDxfUCS(SearchAThing.Sci.CoordinateSystem3D,System.String)
  id: ToDxfUCS(SearchAThing.Sci.CoordinateSystem3D,System.String)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToDxfUCS(CoordinateSystem3D, String)
  nameWithType: SciExt.ToDxfUCS(CoordinateSystem3D, String)
  fullName: SearchAThing.SciExt.ToDxfUCS(SearchAThing.Sci.CoordinateSystem3D, System.String)
  type: Method
  source:
    id: ToDxfUCS
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 464
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static UCS ToDxfUCS(this CoordinateSystem3D cs, string name)
    parameters:
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
    - id: name
      type: System.String
    return:
      type: UCS
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDxfUCS(cs As CoordinateSystem3D, name As String) As UCS
  overload: SearchAThing.SciExt.ToDxfUCS*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.DrawTimeline(DxfObject,List{System.ValueTuple{DateTime,DateTime}},System.Double,System.Double,System.Double,System.Double,Func{DateTime,System.String})
  commentId: M:SearchAThing.SciExt.DrawTimeline(DxfObject,List{System.ValueTuple{DateTime,DateTime}},System.Double,System.Double,System.Double,System.Double,Func{DateTime,System.String})
  id: DrawTimeline(DxfObject,List{System.ValueTuple{DateTime,DateTime}},System.Double,System.Double,System.Double,System.Double,Func{DateTime,System.String})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: DrawTimeline(DxfObject, List<(DateTime from, DateTime to)>, Double, Double, Double, Double, Func<DateTime, String>)
  nameWithType: SciExt.DrawTimeline(DxfObject, List<(DateTime from, DateTime to)>, Double, Double, Double, Double, Func<DateTime, String>)
  fullName: SearchAThing.SciExt.DrawTimeline(DxfObject, List<System.ValueTuple<DateTime, DateTime>>, System.Double, System.Double, System.Double, System.Double, Func<DateTime, System.String>)
  type: Method
  source:
    id: DrawTimeline
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 469
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<EntityObject> DrawTimeline(this DxfObject dxf, List<(DateTime from, DateTime to)> timeline, double textHeight = null, double circleRadius = 1.5, double maxWidth = null, double stopDays = null, Func<DateTime, string> dtStr = null)
    parameters:
    - id: dxf
      type: DxfObject
    - id: timeline
      type: List{System.ValueTuple{DateTime,DateTime}}
    - id: textHeight
      type: System.Double
    - id: circleRadius
      type: System.Double
    - id: maxWidth
      type: System.Double
    - id: stopDays
      type: System.Double
    - id: dtStr
      type: Func{DateTime,System.String}
    return:
      type: IEnumerable{EntityObject}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DrawTimeline(dxf As DxfObject, timeline As List(Of(from As DateTime, to As DateTime)), textHeight As Double = Nothing, circleRadius As Double = 1.5, maxWidth As Double = Nothing, stopDays As Double = Nothing, dtStr As Func(Of DateTime, String) = Nothing) As IEnumerable(Of EntityObject)
  overload: SearchAThing.SciExt.DrawTimeline*
  nameWithType.vb: SciExt.DrawTimeline(DxfObject, List(Of (from As DateTime, to As DateTime)), Double, Double, Double, Double, Func(Of DateTime, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.DrawTimeline(DxfObject, List(Of System.ValueTuple(Of DateTime, DateTime)), System.Double, System.Double, System.Double, System.Double, Func(Of DateTime, System.String))
  name.vb: DrawTimeline(DxfObject, List(Of (from As DateTime, to As DateTime)), Double, Double, Double, Double, Func(Of DateTime, String))
- uid: SearchAThing.SciExt.ToGLLinesVertexes(netDxf.DxfDocument)
  commentId: M:SearchAThing.SciExt.ToGLLinesVertexes(netDxf.DxfDocument)
  id: ToGLLinesVertexes(netDxf.DxfDocument)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToGLLinesVertexes(netDxf.DxfDocument)
  nameWithType: SciExt.ToGLLinesVertexes(netDxf.DxfDocument)
  fullName: SearchAThing.SciExt.ToGLLinesVertexes(netDxf.DxfDocument)
  type: Method
  source:
    id: ToGLLinesVertexes
    path: Z:\netcore-sci\netcore-sci\DxfKit.cs
    startLine: 535
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static GLLineVertex[] ToGLLinesVertexes(this netDxf.DxfDocument dxf)
    parameters:
    - id: dxf
      type: netDxf.DxfDocument
    return:
      type: SearchAThing.Sci.GLLineVertex[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToGLLinesVertexes(dxf As netDxf.DxfDocument) As GLLineVertex()
  overload: SearchAThing.SciExt.ToGLLinesVertexes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.MinDistance(IEnumerable{System.Double})
  commentId: M:SearchAThing.SciExt.MinDistance(IEnumerable{System.Double})
  id: MinDistance(IEnumerable{System.Double})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: MinDistance(IEnumerable<Double>)
  nameWithType: SciExt.MinDistance(IEnumerable<Double>)
  fullName: SearchAThing.SciExt.MinDistance(IEnumerable<System.Double>)
  type: Method
  source:
    id: MinDistance
    path: Z:\netcore-sci\netcore-sci\Fluent.cs
    startLine: 15
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nReturn the min distance between two adiacent number\ngiven from all of the given ordered set of numbers.        \n"
  example: []
  syntax:
    content: public static double MinDistance(this IEnumerable<double> orderedNumbers)
    parameters:
    - id: orderedNumbers
      type: IEnumerable{System.Double}
    return:
      type: System.Double
      description: 0 if empty set or 1 element. min distance otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinDistance(orderedNumbers As IEnumerable(Of Double)) As Double
  overload: SearchAThing.SciExt.MinDistance*
  nameWithType.vb: SciExt.MinDistance(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.MinDistance(IEnumerable(Of System.Double))
  name.vb: MinDistance(IEnumerable(Of Double))
- uid: SearchAThing.SciExt.ToGeometryBlock(netDxf.Entities.LwPolyline,System.Double)
  commentId: M:SearchAThing.SciExt.ToGeometryBlock(netDxf.Entities.LwPolyline,System.Double)
  id: ToGeometryBlock(netDxf.Entities.LwPolyline,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToGeometryBlock(netDxf.Entities.LwPolyline, Double)
  nameWithType: SciExt.ToGeometryBlock(netDxf.Entities.LwPolyline, Double)
  fullName: SearchAThing.SciExt.ToGeometryBlock(netDxf.Entities.LwPolyline, System.Double)
  type: Method
  source:
    id: ToGeometryBlock
    path: Z:\netcore-sci\netcore-sci\Geometry.cs
    startLine: 47
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<Geometry> ToGeometryBlock(this netDxf.Entities.LwPolyline lwpolyline, double tolLen)
    parameters:
    - id: lwpolyline
      type: netDxf.Entities.LwPolyline
    - id: tolLen
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Geometry}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToGeometryBlock(lwpolyline As netDxf.Entities.LwPolyline, tolLen As Double) As IEnumerable(Of Geometry)
  overload: SearchAThing.SciExt.ToGeometryBlock*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Segments(IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  commentId: M:SearchAThing.SciExt.Segments(IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  id: Segments(IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Segments(IEnumerable<Geometry>, Double)
  nameWithType: SciExt.Segments(IEnumerable<Geometry>, Double)
  fullName: SearchAThing.SciExt.Segments(IEnumerable<SearchAThing.Sci.Geometry>, System.Double)
  type: Method
  source:
    id: Segments
    path: Z:\netcore-sci\netcore-sci\Geometry.cs
    startLine: 74
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nsegments representation of given geometries\nif arc found a segment between endpoints returns\n"
  example: []
  syntax:
    content: public static IEnumerable<Line3D> Segments(this IEnumerable<Geometry> geometry_block, double tol_len)
    parameters:
    - id: geometry_block
      type: IEnumerable{SearchAThing.Sci.Geometry}
    - id: tol_len
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Segments(geometry_block As IEnumerable(Of Geometry), tol_len As Double) As IEnumerable(Of Line3D)
  overload: SearchAThing.SciExt.Segments*
  nameWithType.vb: SciExt.Segments(IEnumerable(Of Geometry), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Segments(IEnumerable(Of SearchAThing.Sci.Geometry), System.Double)
  name.vb: Segments(IEnumerable(Of Geometry), Double)
- uid: SearchAThing.SciExt.Vertexes(IReadOnlyList{SearchAThing.Sci.Geometry},System.Double)
  commentId: M:SearchAThing.SciExt.Vertexes(IReadOnlyList{SearchAThing.Sci.Geometry},System.Double)
  id: Vertexes(IReadOnlyList{SearchAThing.Sci.Geometry},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Vertexes(IReadOnlyList<Geometry>, Double)
  nameWithType: SciExt.Vertexes(IReadOnlyList<Geometry>, Double)
  fullName: SearchAThing.SciExt.Vertexes(IReadOnlyList<SearchAThing.Sci.Geometry>, System.Double)
  type: Method
  source:
    id: Vertexes
    path: Z:\netcore-sci\netcore-sci\Geometry.cs
    startLine: 147
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<Vector3D> Vertexes(this IReadOnlyList<Geometry> geometry_block, double tolLen)
    parameters:
    - id: geometry_block
      type: IReadOnlyList{SearchAThing.Sci.Geometry}
    - id: tolLen
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Vertexes(geometry_block As IReadOnlyList(Of Geometry), tolLen As Double) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.Vertexes*
  nameWithType.vb: SciExt.Vertexes(IReadOnlyList(Of Geometry), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Vertexes(IReadOnlyList(Of SearchAThing.Sci.Geometry), System.Double)
  name.vb: Vertexes(IReadOnlyList(Of Geometry), Double)
- uid: SearchAThing.SciExt.GeomCentroid(IReadOnlyList{SearchAThing.Sci.Geometry},System.Double)
  commentId: M:SearchAThing.SciExt.GeomCentroid(IReadOnlyList{SearchAThing.Sci.Geometry},System.Double)
  id: GeomCentroid(IReadOnlyList{SearchAThing.Sci.Geometry},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: GeomCentroid(IReadOnlyList<Geometry>, Double)
  nameWithType: SciExt.GeomCentroid(IReadOnlyList<Geometry>, Double)
  fullName: SearchAThing.SciExt.GeomCentroid(IReadOnlyList<SearchAThing.Sci.Geometry>, System.Double)
  type: Method
  source:
    id: GeomCentroid
    path: Z:\netcore-sci\netcore-sci\Geometry.cs
    startLine: 176
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static Vector3D GeomCentroid(this IReadOnlyList<Geometry> geometry_block, double tolLen)
    parameters:
    - id: geometry_block
      type: IReadOnlyList{SearchAThing.Sci.Geometry}
    - id: tolLen
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GeomCentroid(geometry_block As IReadOnlyList(Of Geometry), tolLen As Double) As Vector3D
  overload: SearchAThing.SciExt.GeomCentroid*
  nameWithType.vb: SciExt.GeomCentroid(IReadOnlyList(Of Geometry), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.GeomCentroid(IReadOnlyList(Of SearchAThing.Sci.Geometry), System.Double)
  name.vb: GeomCentroid(IReadOnlyList(Of Geometry), Double)
- uid: SearchAThing.SciExt.BBox(IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  commentId: M:SearchAThing.SciExt.BBox(IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  id: BBox(IEnumerable{SearchAThing.Sci.Geometry},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: BBox(IEnumerable<Geometry>, Double)
  nameWithType: SciExt.BBox(IEnumerable<Geometry>, Double)
  fullName: SearchAThing.SciExt.BBox(IEnumerable<SearchAThing.Sci.Geometry>, System.Double)
  type: Method
  source:
    id: BBox
    path: Z:\netcore-sci\netcore-sci\Geometry.cs
    startLine: 216
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static BBox3D BBox(this IEnumerable<Geometry> geometry_block, double tol_len)
    parameters:
    - id: geometry_block
      type: IEnumerable{SearchAThing.Sci.Geometry}
    - id: tol_len
      type: System.Double
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BBox(geometry_block As IEnumerable(Of Geometry), tol_len As Double) As BBox3D
  overload: SearchAThing.SciExt.BBox*
  nameWithType.vb: SciExt.BBox(IEnumerable(Of Geometry), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.BBox(IEnumerable(Of SearchAThing.Sci.Geometry), System.Double)
  name.vb: BBox(IEnumerable(Of Geometry), Double)
- uid: SearchAThing.SciExt.ToCadScript(IEnumerable{SearchAThing.Sci.Line3D})
  commentId: M:SearchAThing.SciExt.ToCadScript(IEnumerable{SearchAThing.Sci.Line3D})
  id: ToCadScript(IEnumerable{SearchAThing.Sci.Line3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToCadScript(IEnumerable<Line3D>)
  nameWithType: SciExt.ToCadScript(IEnumerable<Line3D>)
  fullName: SearchAThing.SciExt.ToCadScript(IEnumerable<SearchAThing.Sci.Line3D>)
  type: Method
  source:
    id: ToCadScript
    path: Z:\netcore-sci\netcore-sci\Line3D.cs
    startLine: 809
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static string ToCadScript(this IEnumerable<Line3D> lines)
    parameters:
    - id: lines
      type: IEnumerable{SearchAThing.Sci.Line3D}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCadScript(lines As IEnumerable(Of Line3D)) As String
  overload: SearchAThing.SciExt.ToCadScript*
  nameWithType.vb: SciExt.ToCadScript(IEnumerable(Of Line3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ToCadScript(IEnumerable(Of SearchAThing.Sci.Line3D))
  name.vb: ToCadScript(IEnumerable(Of Line3D))
- uid: SearchAThing.SciExt.ToLine3D(netDxf.Entities.Line)
  commentId: M:SearchAThing.SciExt.ToLine3D(netDxf.Entities.Line)
  id: ToLine3D(netDxf.Entities.Line)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToLine3D(netDxf.Entities.Line)
  nameWithType: SciExt.ToLine3D(netDxf.Entities.Line)
  fullName: SearchAThing.SciExt.ToLine3D(netDxf.Entities.Line)
  type: Method
  source:
    id: ToLine3D
    path: Z:\netcore-sci\netcore-sci\Line3D.cs
    startLine: 821
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static Line3D ToLine3D(this netDxf.Entities.Line line)
    parameters:
    - id: line
      type: netDxf.Entities.Line
    return:
      type: SearchAThing.Sci.Line3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLine3D(line As netDxf.Entities.Line) As Line3D
  overload: SearchAThing.SciExt.ToLine3D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.PolyPoints(IEnumerable{SearchAThing.Sci.Line3D})
  commentId: M:SearchAThing.SciExt.PolyPoints(IEnumerable{SearchAThing.Sci.Line3D})
  id: PolyPoints(IEnumerable{SearchAThing.Sci.Line3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: PolyPoints(IEnumerable<Line3D>)
  nameWithType: SciExt.PolyPoints(IEnumerable<Line3D>)
  fullName: SearchAThing.SciExt.PolyPoints(IEnumerable<SearchAThing.Sci.Line3D>)
  type: Method
  source:
    id: PolyPoints
    path: Z:\netcore-sci\netcore-sci\Line3D.cs
    startLine: 829
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nretrieve s[0].from, s[1].from, ... s[n-1].from, s[n-1].to points\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> PolyPoints(this IEnumerable<Line3D> segs)
    parameters:
    - id: segs
      type: IEnumerable{SearchAThing.Sci.Line3D}
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PolyPoints(segs As IEnumerable(Of Line3D)) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.PolyPoints*
  nameWithType.vb: SciExt.PolyPoints(IEnumerable(Of Line3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.PolyPoints(IEnumerable(Of SearchAThing.Sci.Line3D))
  name.vb: PolyPoints(IEnumerable(Of Line3D))
- uid: SearchAThing.SciExt.MergeColinearSegments(IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  commentId: M:SearchAThing.SciExt.MergeColinearSegments(IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  id: MergeColinearSegments(IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: MergeColinearSegments(IEnumerable<Line3D>, Double)
  nameWithType: SciExt.MergeColinearSegments(IEnumerable<Line3D>, Double)
  fullName: SearchAThing.SciExt.MergeColinearSegments(IEnumerable<SearchAThing.Sci.Line3D>, System.Double)
  type: Method
  source:
    id: MergeColinearSegments
    path: Z:\netcore-sci\netcore-sci\Line3D.cs
    startLine: 851
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nmerge colinear overlapped segments into single\nresult segments direction and order is not ensured\npre: segs must colinear\n"
  example: []
  syntax:
    content: public static IEnumerable<Line3D> MergeColinearSegments(this IEnumerable<Line3D> _segs, double tol_len)
    parameters:
    - id: _segs
      type: IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol_len
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MergeColinearSegments(_segs As IEnumerable(Of Line3D), tol_len As Double) As IEnumerable(Of Line3D)
  overload: SearchAThing.SciExt.MergeColinearSegments*
  nameWithType.vb: SciExt.MergeColinearSegments(IEnumerable(Of Line3D), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.MergeColinearSegments(IEnumerable(Of SearchAThing.Sci.Line3D), System.Double)
  name.vb: MergeColinearSegments(IEnumerable(Of Line3D), Double)
- uid: SearchAThing.SciExt.AutoIntersect(IReadOnlyList{SearchAThing.Sci.Line3D},System.Double,System.Boolean,IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.AutoIntersect(IReadOnlyList{SearchAThing.Sci.Line3D},System.Double,System.Boolean,IEnumerable{SearchAThing.Sci.Vector3D})
  id: AutoIntersect(IReadOnlyList{SearchAThing.Sci.Line3D},System.Double,System.Boolean,IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: AutoIntersect(IReadOnlyList<Line3D>, Double, Boolean, IEnumerable<Vector3D>)
  nameWithType: SciExt.AutoIntersect(IReadOnlyList<Line3D>, Double, Boolean, IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.AutoIntersect(IReadOnlyList<SearchAThing.Sci.Line3D>, System.Double, System.Boolean, IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: AutoIntersect
    path: Z:\netcore-sci\netcore-sci\Line3D.cs
    startLine: 925
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nautointersect given list of segments\n( duplicates and overlapping are removed )\n\nTODO: dummy function, optimize\n"
  example: []
  syntax:
    content: public static IReadOnlyList<Line3D> AutoIntersect(this IReadOnlyList<Line3D> segs, double tolLen, bool mergeColinearSegments = true, IEnumerable<Vector3D> addictionalSplitPoints = null)
    parameters:
    - id: segs
      type: IReadOnlyList{SearchAThing.Sci.Line3D}
    - id: tolLen
      type: System.Double
    - id: mergeColinearSegments
      type: System.Boolean
    - id: addictionalSplitPoints
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: IReadOnlyList{SearchAThing.Sci.Line3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AutoIntersect(segs As IReadOnlyList(Of Line3D), tolLen As Double, mergeColinearSegments As Boolean = True, addictionalSplitPoints As IEnumerable(Of Vector3D) = Nothing) As IReadOnlyList(Of Line3D)
  overload: SearchAThing.SciExt.AutoIntersect*
  nameWithType.vb: SciExt.AutoIntersect(IReadOnlyList(Of Line3D), Double, Boolean, IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.AutoIntersect(IReadOnlyList(Of SearchAThing.Sci.Line3D), System.Double, System.Boolean, IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: AutoIntersect(IReadOnlyList(Of Line3D), Double, Boolean, IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  id: Convert(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Convert(Nullable<Double>, MeasureUnit, MeasureUnit)
  nameWithType: SciExt.Convert(Nullable<Double>, MeasureUnit, MeasureUnit)
  fullName: SearchAThing.SciExt.Convert(System.Nullable<System.Double>, SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 125
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nconvert nullable double from to measure units\n"
  example: []
  syntax:
    content: public static double? Convert(this double? value, MeasureUnit from, MeasureUnit to)
    parameters:
    - id: value
      type: System.Nullable{System.Double}
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Convert(value As Double?, from As MeasureUnit, to As MeasureUnit) As Double?
  overload: SearchAThing.SciExt.Convert*
  nameWithType.vb: SciExt.Convert(Nullable(Of Double), MeasureUnit, MeasureUnit)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Convert(System.Nullable(Of System.Double), SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit)
  name.vb: Convert(Nullable(Of Double), MeasureUnit, MeasureUnit)
- uid: SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  id: Convert(System.Nullable{System.Double},SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Convert(Nullable<Double>, IMUDomain, MeasureUnit)
  nameWithType: SciExt.Convert(Nullable<Double>, IMUDomain, MeasureUnit)
  fullName: SearchAThing.SciExt.Convert(System.Nullable<System.Double>, SearchAThing.Sci.IMUDomain, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 135
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nconvert nullable double from to measure units\n"
  example: []
  syntax:
    content: public static double? Convert(this double? value, IMUDomain mud, MeasureUnit to)
    parameters:
    - id: value
      type: System.Nullable{System.Double}
    - id: mud
      type: SearchAThing.Sci.IMUDomain
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Convert(value As Double?, mud As IMUDomain, to As MeasureUnit) As Double?
  overload: SearchAThing.SciExt.Convert*
  nameWithType.vb: SciExt.Convert(Nullable(Of Double), IMUDomain, MeasureUnit)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Convert(System.Nullable(Of System.Double), SearchAThing.Sci.IMUDomain, SearchAThing.Sci.MeasureUnit)
  name.vb: Convert(Nullable(Of Double), IMUDomain, MeasureUnit)
- uid: SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  commentId: M:SearchAThing.SciExt.Convert(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  id: Convert(System.Nullable{System.Double},SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Convert(Nullable<Double>, MeasureUnit, IMUDomain)
  nameWithType: SciExt.Convert(Nullable<Double>, MeasureUnit, IMUDomain)
  fullName: SearchAThing.SciExt.Convert(System.Nullable<System.Double>, SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.IMUDomain)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 145
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nconvert nullable double from to measure units\n"
  example: []
  syntax:
    content: public static double? Convert(this double? value, MeasureUnit from, IMUDomain mud)
    parameters:
    - id: value
      type: System.Nullable{System.Double}
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: mud
      type: SearchAThing.Sci.IMUDomain
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Convert(value As Double?, from As MeasureUnit, mud As IMUDomain) As Double?
  overload: SearchAThing.SciExt.Convert*
  nameWithType.vb: SciExt.Convert(Nullable(Of Double), MeasureUnit, IMUDomain)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Convert(System.Nullable(Of System.Double), SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.IMUDomain)
  name.vb: Convert(Nullable(Of Double), MeasureUnit, IMUDomain)
- uid: SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  id: Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Convert(Double, MeasureUnit, MeasureUnit)
  nameWithType: SciExt.Convert(Double, MeasureUnit, MeasureUnit)
  fullName: SearchAThing.SciExt.Convert(System.Double, SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 155
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nconvert given value from to measure units\n"
  example: []
  syntax:
    content: public static double Convert(this double value, MeasureUnit from, MeasureUnit to)
    parameters:
    - id: value
      type: System.Double
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Convert(value As Double, from As MeasureUnit, to As MeasureUnit) As Double
  overload: SearchAThing.SciExt.Convert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  commentId: M:SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  id: Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Convert(Double, MeasureUnit, IMUDomain)
  nameWithType: SciExt.Convert(Double, MeasureUnit, IMUDomain)
  fullName: SearchAThing.SciExt.Convert(System.Double, SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.IMUDomain)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 164
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nconvert given value from to measure units\nto measure unit is given from the correspondent physical quantity measure unit of from mu        \n"
  example: []
  syntax:
    content: public static double Convert(this double value, MeasureUnit from, IMUDomain to)
    parameters:
    - id: value
      type: System.Double
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: to
      type: SearchAThing.Sci.IMUDomain
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Convert(value As Double, from As MeasureUnit, to As IMUDomain) As Double
  overload: SearchAThing.SciExt.Convert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.SciExt.Convert(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  id: Convert(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Convert(Double, IMUDomain, MeasureUnit)
  nameWithType: SciExt.Convert(Double, IMUDomain, MeasureUnit)
  fullName: SearchAThing.SciExt.Convert(System.Double, SearchAThing.Sci.IMUDomain, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 173
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nconvert given value from to measure units\nfrom measure unit is given from the correspondent physical quantity measure unit of to mu\n"
  example: []
  syntax:
    content: public static double Convert(this double value, IMUDomain from, MeasureUnit to)
    parameters:
    - id: value
      type: System.Double
    - id: from
      type: SearchAThing.Sci.IMUDomain
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Convert(value As Double, from As IMUDomain, to As MeasureUnit) As Double
  overload: SearchAThing.SciExt.Convert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ConvertToMeasure(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.SciExt.ConvertToMeasure(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  id: ConvertToMeasure(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ConvertToMeasure(Double, IMUDomain, MeasureUnit)
  nameWithType: SciExt.ConvertToMeasure(Double, IMUDomain, MeasureUnit)
  fullName: SearchAThing.SciExt.ConvertToMeasure(System.Double, SearchAThing.Sci.IMUDomain, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: ConvertToMeasure
    path: Z:\netcore-sci\netcore-sci\MeasureUnit.cs
    startLine: 182
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nconvert given value from the given measure unit in the domain corresponding to the physical quantity of given to\nand build a measure with given to measure unit\n"
  example: []
  syntax:
    content: public static Measure ConvertToMeasure(this double value, IMUDomain from, MeasureUnit to)
    parameters:
    - id: value
      type: System.Double
    - id: from
      type: SearchAThing.Sci.IMUDomain
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: SearchAThing.Sci.Measure
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConvertToMeasure(value As Double, from As IMUDomain, to As MeasureUnit) As Measure
  overload: SearchAThing.SciExt.ConvertToMeasure*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ByPhysicalQuantity(SearchAThing.Sci.IMUDomain,SearchAThing.Sci.PhysicalQuantity)
  commentId: M:SearchAThing.SciExt.ByPhysicalQuantity(SearchAThing.Sci.IMUDomain,SearchAThing.Sci.PhysicalQuantity)
  id: ByPhysicalQuantity(SearchAThing.Sci.IMUDomain,SearchAThing.Sci.PhysicalQuantity)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ByPhysicalQuantity(IMUDomain, PhysicalQuantity)
  nameWithType: SciExt.ByPhysicalQuantity(IMUDomain, PhysicalQuantity)
  fullName: SearchAThing.SciExt.ByPhysicalQuantity(SearchAThing.Sci.IMUDomain, SearchAThing.Sci.PhysicalQuantity)
  type: Method
  source:
    id: ByPhysicalQuantity
    path: Z:\netcore-sci\netcore-sci\MUDomain.cs
    startLine: 365
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static MeasureUnitWithDefaultTolerance ByPhysicalQuantity(this IMUDomain mud, PhysicalQuantity physicalQuantity)
    parameters:
    - id: mud
      type: SearchAThing.Sci.IMUDomain
    - id: physicalQuantity
      type: SearchAThing.Sci.PhysicalQuantity
    return:
      type: SearchAThing.Sci.MeasureUnitWithDefaultTolerance
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ByPhysicalQuantity(mud As IMUDomain, physicalQuantity As PhysicalQuantity) As MeasureUnitWithDefaultTolerance
  overload: SearchAThing.SciExt.ByPhysicalQuantity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.Angle(System.Double,System.Double,System.Double,System.Boolean)
  commentId: M:SearchAThing.SciExt.Angle(System.Double,System.Double,System.Double,System.Boolean)
  id: Angle(System.Double,System.Double,System.Double,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Angle(Double, Double, Double, Boolean)
  nameWithType: SciExt.Angle(Double, Double, Double, Boolean)
  fullName: SearchAThing.SciExt.Angle(System.Double, System.Double, System.Double, System.Boolean)
  type: Method
  source:
    id: Angle
    path: Z:\netcore-sci\netcore-sci\Number.cs
    startLine: 20
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nretrieve angle between from and to given;\nangles will subjected to normalization [0,2pi) and angle from can be greather than to\n"
  example: []
  syntax:
    content: public static double Angle(this double angleFrom, double tol_rad, double angleTo, bool normalizeAngles = true)
    parameters:
    - id: angleFrom
      type: System.Double
      description: angle from
    - id: tol_rad
      type: System.Double
    - id: angleTo
      type: System.Double
      description: angle to
    - id: normalizeAngles
      type: System.Boolean
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Angle(angleFrom As Double, tol_rad As Double, angleTo As Double, normalizeAngles As Boolean = True) As Double
  overload: SearchAThing.SciExt.Angle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.NormalizeAngle2PI(System.Double,System.Double)
  commentId: M:SearchAThing.SciExt.NormalizeAngle2PI(System.Double,System.Double)
  id: NormalizeAngle2PI(System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: NormalizeAngle2PI(Double, Double)
  nameWithType: SciExt.NormalizeAngle2PI(Double, Double)
  fullName: SearchAThing.SciExt.NormalizeAngle2PI(System.Double, System.Double)
  type: Method
  source:
    id: NormalizeAngle2PI
    path: Z:\netcore-sci\netcore-sci\Number.cs
    startLine: 37
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nensure given angle in [0,2*PI] range\n"
  example: []
  syntax:
    content: public static double NormalizeAngle2PI(this double angle_rad, double tol_rad)
    parameters:
    - id: angle_rad
      type: System.Double
    - id: tol_rad
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NormalizeAngle2PI(angle_rad As Double, tol_rad As Double) As Double
  overload: SearchAThing.SciExt.NormalizeAngle2PI*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.MinMax(IEnumerable{System.Double})
  commentId: M:SearchAThing.SciExt.MinMax(IEnumerable{System.Double})
  id: MinMax(IEnumerable{System.Double})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: MinMax(IEnumerable<Double>)
  nameWithType: SciExt.MinMax(IEnumerable<Double>)
  fullName: SearchAThing.SciExt.MinMax(IEnumerable<System.Double>)
  type: Method
  source:
    id: MinMax
    path: Z:\netcore-sci\netcore-sci\Number.cs
    startLine: 49
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nretrieve min,max w/single sweep\n"
  example: []
  syntax:
    content: public static (double min, double max) MinMax(this IEnumerable<double> input)
    parameters:
    - id: input
      type: IEnumerable{System.Double}
    return:
      type: System.ValueTuple{System.Double,System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinMax(input As IEnumerable(Of Double)) As(min As Double, max As Double)
  overload: SearchAThing.SciExt.MinMax*
  nameWithType.vb: SciExt.MinMax(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.MinMax(IEnumerable(Of System.Double))
  name.vb: MinMax(IEnumerable(Of Double))
- uid: SearchAThing.SciExt.Thin(IEnumerable{System.Double},System.Double,System.Boolean,System.Boolean)
  commentId: M:SearchAThing.SciExt.Thin(IEnumerable{System.Double},System.Double,System.Boolean,System.Boolean)
  id: Thin(IEnumerable{System.Double},System.Double,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Thin(IEnumerable<Double>, Double, Boolean, Boolean)
  nameWithType: SciExt.Thin(IEnumerable<Double>, Double, Boolean, Boolean)
  fullName: SearchAThing.SciExt.Thin(IEnumerable<System.Double>, System.Double, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Thin
    path: Z:\netcore-sci\netcore-sci\Number.cs
    startLine: 68
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nretrieve given input set ordered with only distinct values after comparing through tolerance\nin this case result set contains only values from the input set (default) or rounding to given tol if maintain_original_values is false;\nif keep_ends true (default) min and max already exists at begin/end of returned sequence\n"
  example: []
  syntax:
    content: public static List<double> Thin(this IEnumerable<double> input, double tol, bool keep_ends = true, bool maintain_original_values = true)
    parameters:
    - id: input
      type: IEnumerable{System.Double}
    - id: tol
      type: System.Double
    - id: keep_ends
      type: System.Boolean
    - id: maintain_original_values
      type: System.Boolean
    return:
      type: List{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Thin(input As IEnumerable(Of Double), tol As Double, keep_ends As Boolean = True, maintain_original_values As Boolean = True) As List(Of Double)
  overload: SearchAThing.SciExt.Thin*
  nameWithType.vb: SciExt.Thin(IEnumerable(Of Double), Double, Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Thin(IEnumerable(Of System.Double), System.Double, System.Boolean, System.Boolean)
  name.vb: Thin(IEnumerable(Of Double), Double, Boolean, Boolean)
- uid: SearchAThing.SciExt.EqualsTol(IEnumerable{System.ValueTuple{System.Double,System.Double}},IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Double,System.Double)
  commentId: M:SearchAThing.SciExt.EqualsTol(IEnumerable{System.ValueTuple{System.Double,System.Double}},IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Double,System.Double)
  id: EqualsTol(IEnumerable{System.ValueTuple{System.Double,System.Double}},IEnumerable{System.ValueTuple{System.Double,System.Double}},System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: EqualsTol(IEnumerable<(Double, Double)>, IEnumerable<(Double, Double)>, Double, Double)
  nameWithType: SciExt.EqualsTol(IEnumerable<(Double, Double)>, IEnumerable<(Double, Double)>, Double, Double)
  fullName: SearchAThing.SciExt.EqualsTol(IEnumerable<System.ValueTuple<System.Double, System.Double>>, IEnumerable<System.ValueTuple<System.Double, System.Double>>, System.Double, System.Double)
  type: Method
  source:
    id: EqualsTol
    path: Z:\netcore-sci\netcore-sci\Number.cs
    startLine: 90
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ncompares two list tuples\n"
  example: []
  syntax:
    content: public static bool EqualsTol(this IEnumerable<(double, double)> tuple_list1, IEnumerable<(double, double)> tuple_list2, double tol1, double tol2)
    parameters:
    - id: tuple_list1
      type: IEnumerable{System.ValueTuple{System.Double,System.Double}}
    - id: tuple_list2
      type: IEnumerable{System.ValueTuple{System.Double,System.Double}}
    - id: tol1
      type: System.Double
    - id: tol2
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTol(tuple_list1 As IEnumerable(Of(Double, Double)), tuple_list2 As IEnumerable(Of(Double, Double)), tol1 As Double, tol2 As Double) As Boolean
  overload: SearchAThing.SciExt.EqualsTol*
  nameWithType.vb: SciExt.EqualsTol(IEnumerable(Of (Double, Double)), IEnumerable(Of (Double, Double)), Double, Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.EqualsTol(IEnumerable(Of System.ValueTuple(Of System.Double, System.Double)), IEnumerable(Of System.ValueTuple(Of System.Double, System.Double)), System.Double, System.Double)
  name.vb: EqualsTol(IEnumerable(Of (Double, Double)), IEnumerable(Of (Double, Double)), Double, Double)
- uid: SearchAThing.SciExt.WeightedDistribution(IEnumerable{System.Double},System.Int32)
  commentId: M:SearchAThing.SciExt.WeightedDistribution(IEnumerable{System.Double},System.Int32)
  id: WeightedDistribution(IEnumerable{System.Double},System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: WeightedDistribution(IEnumerable<Double>, Int32)
  nameWithType: SciExt.WeightedDistribution(IEnumerable<Double>, Int32)
  fullName: SearchAThing.SciExt.WeightedDistribution(IEnumerable<System.Double>, System.Int32)
  type: Method
  source:
    id: WeightedDistribution
    path: Z:\netcore-sci\netcore-sci\Number.cs
    startLine: 125
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nretrieve a list of N pairs (value,presence)\nwith value between min and max of inputs and presence between 0..1 that represents the percent of presence of the value\n\nexamples:\n\ninputs = ( 1, 2, 3 ), N = 3\nresults: ( (1, .33), (2, .33), (3, .33) )\n\ninputs = ( 1, 2.49, 3), N = 3\nresults: ( (1, .33), (2, .169), (3, .497) )\n\ninputs = ( 1, 2, 3), N = 4\nresults: ( (1, .33), (1.6, .16), (2.3, .16), (3, .33) )\n\n"
  example: []
  syntax:
    content: public static (double off, double weight)[] WeightedDistribution(this IEnumerable<double> inputs, int N)
    parameters:
    - id: inputs
      type: IEnumerable{System.Double}
    - id: N
      type: System.Int32
    return:
      type: System.ValueTuple{System.Double,System.Double}[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WeightedDistribution(inputs As IEnumerable(Of Double), N As Integer) As(off As Double, weight As Double)()
  overload: SearchAThing.SciExt.WeightedDistribution*
  nameWithType.vb: SciExt.WeightedDistribution(IEnumerable(Of Double), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.WeightedDistribution(IEnumerable(Of System.Double), System.Int32)
  name.vb: WeightedDistribution(IEnumerable(Of Double), Int32)
- uid: SearchAThing.SciExt.Area(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.SciExt.Area(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double)
  id: Area(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Area(IReadOnlyList<Vector3D>, Double)
  nameWithType: SciExt.Area(IReadOnlyList<Vector3D>, Double)
  fullName: SearchAThing.SciExt.Area(IReadOnlyList<SearchAThing.Sci.Vector3D>, System.Double)
  type: Method
  source:
    id: Area
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 41
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nArea of a polygon (does not consider z)\nhttps://en.wikipedia.org/wiki/Centroid        \n"
  example: []
  syntax:
    content: public static double Area(this IReadOnlyList<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: IReadOnlyList{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Area(pts As IReadOnlyList(Of Vector3D), tol As Double) As Double
  overload: SearchAThing.SciExt.Area*
  nameWithType.vb: SciExt.Area(IReadOnlyList(Of Vector3D), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Area(IReadOnlyList(Of SearchAThing.Sci.Vector3D), System.Double)
  name.vb: Area(IReadOnlyList(Of Vector3D), Double)
- uid: SearchAThing.SciExt.Centroid(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.SciExt.Centroid(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double)
  id: Centroid(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Centroid(IReadOnlyList<Vector3D>, Double)
  nameWithType: SciExt.Centroid(IReadOnlyList<Vector3D>, Double)
  fullName: SearchAThing.SciExt.Centroid(IReadOnlyList<SearchAThing.Sci.Vector3D>, System.Double)
  type: Method
  source:
    id: Centroid
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 61
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nCentroid of a polygon (does not consider z)\nnote: points must ordered anticlockwise\n( if have area specify the parameter to avoid recomputation )\nhttps://en.wikipedia.org/wiki/Centroid        \n"
  example: []
  syntax:
    content: public static Vector3D Centroid(this IReadOnlyList<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: IReadOnlyList{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Centroid(pts As IReadOnlyList(Of Vector3D), tol As Double) As Vector3D
  overload: SearchAThing.SciExt.Centroid*
  nameWithType.vb: SciExt.Centroid(IReadOnlyList(Of Vector3D), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Centroid(IReadOnlyList(Of SearchAThing.Sci.Vector3D), System.Double)
  name.vb: Centroid(IReadOnlyList(Of Vector3D), Double)
- uid: SearchAThing.SciExt.Centroid(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  commentId: M:SearchAThing.SciExt.Centroid(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  id: Centroid(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Centroid(IReadOnlyList<Vector3D>, Double, Double)
  nameWithType: SciExt.Centroid(IReadOnlyList<Vector3D>, Double, Double)
  fullName: SearchAThing.SciExt.Centroid(IReadOnlyList<SearchAThing.Sci.Vector3D>, System.Double, System.Double)
  type: Method
  source:
    id: Centroid
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 72
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nCentroid of a polygon (does not consider z)\nnote: points must ordered anticlockwise\nhttps://en.wikipedia.org/wiki/Centroid        \n"
  example: []
  syntax:
    content: public static Vector3D Centroid(this IReadOnlyList<Vector3D> pts, double tol, double area)
    parameters:
    - id: pts
      type: IReadOnlyList{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: area
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Centroid(pts As IReadOnlyList(Of Vector3D), tol As Double, area As Double) As Vector3D
  overload: SearchAThing.SciExt.Centroid*
  nameWithType.vb: SciExt.Centroid(IReadOnlyList(Of Vector3D), Double, Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Centroid(IReadOnlyList(Of SearchAThing.Sci.Vector3D), System.Double, System.Double)
  name.vb: Centroid(IReadOnlyList(Of Vector3D), Double, Double)
- uid: SearchAThing.SciExt.Offset(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  commentId: M:SearchAThing.SciExt.Offset(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  id: Offset(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Offset(IReadOnlyList<Vector3D>, Double, Double)
  nameWithType: SciExt.Offset(IReadOnlyList<Vector3D>, Double, Double)
  fullName: SearchAThing.SciExt.Offset(IReadOnlyList<SearchAThing.Sci.Vector3D>, System.Double, System.Double)
  type: Method
  source:
    id: Offset
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 96
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nincrease of decrease polygon points offseting\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Offset(this IReadOnlyList<Vector3D> pts, double tol, double offset)
    parameters:
    - id: pts
      type: IReadOnlyList{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: offset
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Offset(pts As IReadOnlyList(Of Vector3D), tol As Double, offset As Double) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.Offset*
  nameWithType.vb: SciExt.Offset(IReadOnlyList(Of Vector3D), Double, Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Offset(IReadOnlyList(Of SearchAThing.Sci.Vector3D), System.Double, System.Double)
  name.vb: Offset(IReadOnlyList(Of Vector3D), Double, Double)
- uid: SearchAThing.SciExt.PolyPoints(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Boolean)
  commentId: M:SearchAThing.SciExt.PolyPoints(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Boolean)
  id: PolyPoints(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: PolyPoints(IEnumerable<Vector3D>, Double, Boolean)
  nameWithType: SciExt.PolyPoints(IEnumerable<Vector3D>, Double, Boolean)
  fullName: SearchAThing.SciExt.PolyPoints(IEnumerable<SearchAThing.Sci.Vector3D>, System.Double, System.Boolean)
  type: Method
  source:
    id: PolyPoints
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 120
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ngiven a set of polygon pts, returns the enumeation of all pts\nso that the last not attach to the first ( if makeClosed = false ).\nElsewhere it returns a last point equals the first ( makeClosed = true ).\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> PolyPoints(this IEnumerable<Vector3D> pts, double tol, bool makeClosed = false)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: makeClosed
      type: System.Boolean
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PolyPoints(pts As IEnumerable(Of Vector3D), tol As Double, makeClosed As Boolean = False) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.PolyPoints*
  nameWithType.vb: SciExt.PolyPoints(IEnumerable(Of Vector3D), Double, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.PolyPoints(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Double, System.Boolean)
  name.vb: PolyPoints(IEnumerable(Of Vector3D), Double, Boolean)
- uid: SearchAThing.SciExt.PolygonSegments(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.SciExt.PolygonSegments(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: PolygonSegments(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: PolygonSegments(IEnumerable<Vector3D>, Double)
  nameWithType: SciExt.PolygonSegments(IEnumerable<Vector3D>, Double)
  fullName: SearchAThing.SciExt.PolygonSegments(IEnumerable<SearchAThing.Sci.Vector3D>, System.Double)
  type: Method
  source:
    id: PolygonSegments
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 149
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nyields an ienumerable of polygon segments corresponding to the given polygon pts ( z is not considered )\nworks even last point not equals the first one\n"
  example: []
  syntax:
    content: public static IEnumerable<Line3D> PolygonSegments(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PolygonSegments(pts As IEnumerable(Of Vector3D), tol As Double) As IEnumerable(Of Line3D)
  overload: SearchAThing.SciExt.PolygonSegments*
  nameWithType.vb: SciExt.PolygonSegments(IEnumerable(Of Vector3D), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.PolygonSegments(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Double)
  name.vb: PolygonSegments(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.SciExt.ContainsPoint(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,System.Boolean)
  commentId: M:SearchAThing.SciExt.ContainsPoint(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,System.Boolean)
  id: ContainsPoint(IReadOnlyList{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ContainsPoint(IReadOnlyList<Vector3D>, Double, Vector3D, Boolean)
  nameWithType: SciExt.ContainsPoint(IReadOnlyList<Vector3D>, Double, Vector3D, Boolean)
  fullName: SearchAThing.SciExt.ContainsPoint(IReadOnlyList<SearchAThing.Sci.Vector3D>, System.Double, SearchAThing.Sci.Vector3D, System.Boolean)
  type: Method
  source:
    id: ContainsPoint
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 179
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nstates if the given polygon contains the test point ( z not considered )\nhttps://en.wikipedia.org/wiki/Point_in_polygon\nBy default check the point contained in the polygon perimeter.\nOptionally duplicate points are zapped in comparing.\n"
  example: []
  syntax:
    content: public static bool ContainsPoint(this IReadOnlyList<Vector3D> _pts, double tol, Vector3D _pt, bool zapDuplicates = false)
    parameters:
    - id: _pts
      type: IReadOnlyList{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: _pt
      type: SearchAThing.Sci.Vector3D
    - id: zapDuplicates
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsPoint(_pts As IReadOnlyList(Of Vector3D), tol As Double, _pt As Vector3D, zapDuplicates As Boolean = False) As Boolean
  overload: SearchAThing.SciExt.ContainsPoint*
  nameWithType.vb: SciExt.ContainsPoint(IReadOnlyList(Of Vector3D), Double, Vector3D, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ContainsPoint(IReadOnlyList(Of SearchAThing.Sci.Vector3D), System.Double, SearchAThing.Sci.Vector3D, System.Boolean)
  name.vb: ContainsPoint(IReadOnlyList(Of Vector3D), Double, Vector3D, Boolean)
- uid: SearchAThing.SciExt.SortPoly(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.SortPoly(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D)
  id: SortPoly(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: SortPoly(IEnumerable<Vector3D>, Double, Vector3D)
  nameWithType: SciExt.SortPoly(IEnumerable<Vector3D>, Double, Vector3D)
  fullName: SearchAThing.SciExt.SortPoly(IEnumerable<SearchAThing.Sci.Vector3D>, System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: SortPoly
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 243
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<Vector3D> SortPoly(this IEnumerable<Vector3D> pts, double tol, Vector3D refAxis = null)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: refAxis
      type: SearchAThing.Sci.Vector3D
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SortPoly(pts As IEnumerable(Of Vector3D), tol As Double, refAxis As Vector3D = Nothing) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.SortPoly*
  nameWithType.vb: SciExt.SortPoly(IEnumerable(Of Vector3D), Double, Vector3D)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.SortPoly(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Double, SearchAThing.Sci.Vector3D)
  name.vb: SortPoly(IEnumerable(Of Vector3D), Double, Vector3D)
- uid: SearchAThing.SciExt.SortPoly(IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.SortPoly(IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Vector3D)
  id: SortPoly(IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: SortPoly(IEnumerable<Line3D>, Double, Vector3D)
  nameWithType: SciExt.SortPoly(IEnumerable<Line3D>, Double, Vector3D)
  fullName: SearchAThing.SciExt.SortPoly(IEnumerable<SearchAThing.Sci.Line3D>, System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: SortPoly
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 252
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nSort polygon segments so that they can form a polygon ( if they really form one ).\nIt will not check for segment versus adjancency\n"
  example: []
  syntax:
    content: public static IEnumerable<Line3D> SortPoly(this IEnumerable<Line3D> segs, double tol, Vector3D refAxis = null)
    parameters:
    - id: segs
      type: IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    - id: refAxis
      type: SearchAThing.Sci.Vector3D
    return:
      type: IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SortPoly(segs As IEnumerable(Of Line3D), tol As Double, refAxis As Vector3D = Nothing) As IEnumerable(Of Line3D)
  overload: SearchAThing.SciExt.SortPoly*
  nameWithType.vb: SciExt.SortPoly(IEnumerable(Of Line3D), Double, Vector3D)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.SortPoly(IEnumerable(Of SearchAThing.Sci.Line3D), System.Double, SearchAThing.Sci.Vector3D)
  name.vb: SortPoly(IEnumerable(Of Line3D), Double, Vector3D)
- uid: SearchAThing.SciExt.SortPoly``1(IEnumerable{``0},System.Double,Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.SortPoly``1(IEnumerable{``0},System.Double,Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  id: SortPoly``1(IEnumerable{``0},System.Double,Func{``0,SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: SortPoly<T>(IEnumerable<T>, Double, Func<T, Vector3D>, Vector3D)
  nameWithType: SciExt.SortPoly<T>(IEnumerable<T>, Double, Func<T, Vector3D>, Vector3D)
  fullName: SearchAThing.SciExt.SortPoly<T>(IEnumerable<T>, System.Double, Func<T, SearchAThing.Sci.Vector3D>, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: SortPoly
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 257
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static IEnumerable<T> SortPoly<T>(this IEnumerable<T> pts, double tol, Func<T, Vector3D> getPoint, Vector3D refAxis = null)
    parameters:
    - id: pts
      type: IEnumerable{{T}}
    - id: tol
      type: System.Double
    - id: getPoint
      type: Func{{T},SearchAThing.Sci.Vector3D}
    - id: refAxis
      type: SearchAThing.Sci.Vector3D
    typeParameters:
    - id: T
    return:
      type: IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SortPoly(Of T)(pts As IEnumerable(Of T), tol As Double, getPoint As Func(Of T, Vector3D), refAxis As Vector3D = Nothing) As IEnumerable(Of T)
  overload: SearchAThing.SciExt.SortPoly*
  nameWithType.vb: SciExt.SortPoly(Of T)(IEnumerable(Of T), Double, Func(Of T, Vector3D), Vector3D)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.SortPoly(Of T)(IEnumerable(Of T), System.Double, Func(Of T, SearchAThing.Sci.Vector3D), SearchAThing.Sci.Vector3D)
  name.vb: SortPoly(Of T)(IEnumerable(Of T), Double, Func(Of T, Vector3D), Vector3D)
- uid: SearchAThing.SciExt.TakeUntilAdjacent(IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean)
  commentId: M:SearchAThing.SciExt.TakeUntilAdjacent(IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean)
  id: TakeUntilAdjacent(IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: TakeUntilAdjacent(IEnumerable<Line3D>, Double, Boolean)
  nameWithType: SciExt.TakeUntilAdjacent(IEnumerable<Line3D>, Double, Boolean)
  fullName: SearchAThing.SciExt.TakeUntilAdjacent(IEnumerable<SearchAThing.Sci.Line3D>, System.Double, System.Boolean)
  type: Method
  source:
    id: TakeUntilAdjacent
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 293
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nReturn the input set of segments until an adjacency between one and next is found.\nIt can rectify the versus of line (by default) if needed.\nNote: returned set references can be different if rectifyVersus==true\n"
  example: []
  syntax:
    content: public static IEnumerable<Line3D> TakeUntilAdjacent(this IEnumerable<Line3D> segs, double tol, bool rectifyVersus = true)
    parameters:
    - id: segs
      type: IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    - id: rectifyVersus
      type: System.Boolean
    return:
      type: IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeUntilAdjacent(segs As IEnumerable(Of Line3D), tol As Double, rectifyVersus As Boolean = True) As IEnumerable(Of Line3D)
  overload: SearchAThing.SciExt.TakeUntilAdjacent*
  nameWithType.vb: SciExt.TakeUntilAdjacent(IEnumerable(Of Line3D), Double, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.TakeUntilAdjacent(IEnumerable(Of SearchAThing.Sci.Line3D), System.Double, System.Boolean)
  name.vb: TakeUntilAdjacent(IEnumerable(Of Line3D), Double, Boolean)
- uid: SearchAThing.SciExt.IsAClosedPoly(IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  commentId: M:SearchAThing.SciExt.IsAClosedPoly(IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  id: IsAClosedPoly(IEnumerable{SearchAThing.Sci.Line3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: IsAClosedPoly(IEnumerable<Line3D>, Double)
  nameWithType: SciExt.IsAClosedPoly(IEnumerable<Line3D>, Double)
  fullName: SearchAThing.SciExt.IsAClosedPoly(IEnumerable<SearchAThing.Sci.Line3D>, System.Double)
  type: Method
  source:
    id: IsAClosedPoly
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 347
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nPreprocess segs with SortPoly if needed.\nReturn the ordered segments poly or null if not a closed poly.\n"
  example: []
  syntax:
    content: public static IEnumerable<Line3D> IsAClosedPoly(this IEnumerable<Line3D> segs, double tol)
    parameters:
    - id: segs
      type: IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Line3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAClosedPoly(segs As IEnumerable(Of Line3D), tol As Double) As IEnumerable(Of Line3D)
  overload: SearchAThing.SciExt.IsAClosedPoly*
  nameWithType.vb: SciExt.IsAClosedPoly(IEnumerable(Of Line3D), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.IsAClosedPoly(IEnumerable(Of SearchAThing.Sci.Line3D), System.Double)
  name.vb: IsAClosedPoly(IEnumerable(Of Line3D), Double)
- uid: SearchAThing.SciExt.Intersect(IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Line3D,SearchAThing.Sci.Line3DSegmentMode)
  commentId: M:SearchAThing.SciExt.Intersect(IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Line3D,SearchAThing.Sci.Line3DSegmentMode)
  id: Intersect(IEnumerable{SearchAThing.Sci.Line3D},System.Double,SearchAThing.Sci.Line3D,SearchAThing.Sci.Line3DSegmentMode)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Intersect(IEnumerable<Line3D>, Double, Line3D, Line3DSegmentMode)
  nameWithType: SciExt.Intersect(IEnumerable<Line3D>, Double, Line3D, Line3DSegmentMode)
  fullName: SearchAThing.SciExt.Intersect(IEnumerable<SearchAThing.Sci.Line3D>, System.Double, SearchAThing.Sci.Line3D, SearchAThing.Sci.Line3DSegmentMode)
  type: Method
  source:
    id: Intersect
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 362
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nFind intersection points (0,1,2) of the given line with the given polygon\nTODO unit test\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Intersect(this IEnumerable<Line3D> polygonSegments, double tol, Line3D line, Line3DSegmentMode segmentMode)
    parameters:
    - id: polygonSegments
      type: IEnumerable{SearchAThing.Sci.Line3D}
    - id: tol
      type: System.Double
    - id: line
      type: SearchAThing.Sci.Line3D
    - id: segmentMode
      type: SearchAThing.Sci.Line3DSegmentMode
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(polygonSegments As IEnumerable(Of Line3D), tol As Double, line As Line3D, segmentMode As Line3DSegmentMode) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.Intersect*
  nameWithType.vb: SciExt.Intersect(IEnumerable(Of Line3D), Double, Line3D, Line3DSegmentMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Intersect(IEnumerable(Of SearchAThing.Sci.Line3D), System.Double, SearchAThing.Sci.Line3D, SearchAThing.Sci.Line3DSegmentMode)
  name.vb: Intersect(IEnumerable(Of Line3D), Double, Line3D, Line3DSegmentMode)
- uid: SearchAThing.SciExt.ToLwPolyline(IEnumerable{SearchAThing.Sci.Geometry},System.Double,System.Boolean)
  commentId: M:SearchAThing.SciExt.ToLwPolyline(IEnumerable{SearchAThing.Sci.Geometry},System.Double,System.Boolean)
  id: ToLwPolyline(IEnumerable{SearchAThing.Sci.Geometry},System.Double,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToLwPolyline(IEnumerable<Geometry>, Double, Boolean)
  nameWithType: SciExt.ToLwPolyline(IEnumerable<Geometry>, Double, Boolean)
  fullName: SearchAThing.SciExt.ToLwPolyline(IEnumerable<SearchAThing.Sci.Geometry>, System.Double, System.Boolean)
  type: Method
  source:
    id: ToLwPolyline
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 386
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nbuild 2d dxf polyline.\nnote: use RepeatFirstAtEnd extension to build a closed polyline\n"
  example: []
  syntax:
    content: public static netDxf.Entities.LwPolyline ToLwPolyline(this IEnumerable<Geometry> _geom, double tolLen, bool closed = true)
    parameters:
    - id: _geom
      type: IEnumerable{SearchAThing.Sci.Geometry}
    - id: tolLen
      type: System.Double
    - id: closed
      type: System.Boolean
    return:
      type: netDxf.Entities.LwPolyline
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLwPolyline(_geom As IEnumerable(Of Geometry), tolLen As Double, closed As Boolean = True) As netDxf.Entities.LwPolyline
  overload: SearchAThing.SciExt.ToLwPolyline*
  nameWithType.vb: SciExt.ToLwPolyline(IEnumerable(Of Geometry), Double, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ToLwPolyline(IEnumerable(Of SearchAThing.Sci.Geometry), System.Double, System.Boolean)
  name.vb: ToLwPolyline(IEnumerable(Of Geometry), Double, Boolean)
- uid: SearchAThing.SciExt.ToPolyline(IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  commentId: M:SearchAThing.SciExt.ToPolyline(IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  id: ToPolyline(IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToPolyline(IEnumerable<Vector3D>, Boolean)
  nameWithType: SciExt.ToPolyline(IEnumerable<Vector3D>, Boolean)
  fullName: SearchAThing.SciExt.ToPolyline(IEnumerable<SearchAThing.Sci.Vector3D>, System.Boolean)
  type: Method
  source:
    id: ToPolyline
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 504
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nbuild 3d dxf polyline\nnote: use RepeatFirstAtEnd extension to build a closed polyline\n"
  example: []
  syntax:
    content: public static netDxf.Entities.Polyline ToPolyline(this IEnumerable<Vector3D> pts, bool isClosed = true)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: isClosed
      type: System.Boolean
    return:
      type: netDxf.Entities.Polyline
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPolyline(pts As IEnumerable(Of Vector3D), isClosed As Boolean = True) As netDxf.Entities.Polyline
  overload: SearchAThing.SciExt.ToPolyline*
  nameWithType.vb: SciExt.ToPolyline(IEnumerable(Of Vector3D), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ToPolyline(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Boolean)
  name.vb: ToPolyline(IEnumerable(Of Vector3D), Boolean)
- uid: SearchAThing.SciExt.Boolean(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,IEnumerable{SearchAThing.Sci.Vector3D},ClipperLib.ClipType,System.Boolean)
  commentId: M:SearchAThing.SciExt.Boolean(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,IEnumerable{SearchAThing.Sci.Vector3D},ClipperLib.ClipType,System.Boolean)
  id: Boolean(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,IEnumerable{SearchAThing.Sci.Vector3D},ClipperLib.ClipType,System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Boolean(IEnumerable<Vector3D>, Double, IEnumerable<Vector3D>, ClipType, Boolean)
  nameWithType: SciExt.Boolean(IEnumerable<Vector3D>, Double, IEnumerable<Vector3D>, ClipType, Boolean)
  fullName: SearchAThing.SciExt.Boolean(IEnumerable<SearchAThing.Sci.Vector3D>, System.Double, IEnumerable<SearchAThing.Sci.Vector3D>, ClipperLib.ClipType, System.Boolean)
  type: Method
  source:
    id: Boolean
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 514
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ncan generate a Int64MapExceptionRange exception if double values can&apos;t fit into a In64 representation.\nIn that case try with tolerances not too small.\nIt is suggested to use a lenTol/10 to avoid lost of precision during domain conversions.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<Vector3D>> Boolean(this IEnumerable<Vector3D> polyA, double tol, IEnumerable<Vector3D> polyB, ClipType type, bool selfCheckInt64MapTolerance = true)
    parameters:
    - id: polyA
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: polyB
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: type
      type: ClipperLib.ClipType
    - id: selfCheckInt64MapTolerance
      type: System.Boolean
    return:
      type: IEnumerable{IEnumerable{SearchAThing.Sci.Vector3D}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Boolean(polyA As IEnumerable(Of Vector3D), tol As Double, polyB As IEnumerable(Of Vector3D), type As ClipType, selfCheckInt64MapTolerance As Boolean = True) As IEnumerable(Of IEnumerable(Of Vector3D))
  overload: SearchAThing.SciExt.Boolean*
  nameWithType.vb: SciExt.Boolean(IEnumerable(Of Vector3D), Double, IEnumerable(Of Vector3D), ClipType, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Boolean(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Double, IEnumerable(Of SearchAThing.Sci.Vector3D), ClipperLib.ClipType, System.Boolean)
  name.vb: Boolean(IEnumerable(Of Vector3D), Double, IEnumerable(Of Vector3D), ClipType, Boolean)
- uid: SearchAThing.SciExt.ConvexHull2D(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.ConvexHull2D(IEnumerable{SearchAThing.Sci.Vector3D})
  id: ConvexHull2D(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ConvexHull2D(IEnumerable<Vector3D>)
  nameWithType: SciExt.ConvexHull2D(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.ConvexHull2D(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: ConvexHull2D
    path: Z:\netcore-sci\netcore-sci\Polygon.cs
    startLine: 540
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ncompute convex hull using LoycCore\nhttps://github.com/qwertie/LoycCore\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> ConvexHull2D(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConvexHull2D(pts As IEnumerable(Of Vector3D)) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.ConvexHull2D*
  nameWithType.vb: SciExt.ConvexHull2D(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ConvexHull2D(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ConvexHull2D(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.ToCSV(IEnumerable{System.Object})
  commentId: M:SearchAThing.SciExt.ToCSV(IEnumerable{System.Object})
  id: ToCSV(IEnumerable{System.Object})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToCSV(IEnumerable<Object>)
  nameWithType: SciExt.ToCSV(IEnumerable<Object>)
  fullName: SearchAThing.SciExt.ToCSV(IEnumerable<System.Object>)
  type: Method
  source:
    id: ToCSV
    path: Z:\netcore-sci\netcore-sci\Util.cs
    startLine: 16
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nexports to a csv string some known fields\nnote: not really a csv its a tab separated values for debug purpose\njust copy and paste\n"
  example: []
  syntax:
    content: public static string ToCSV(this IEnumerable<object> lst)
    parameters:
    - id: lst
      type: IEnumerable{System.Object}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCSV(lst As IEnumerable(Of Object)) As String
  overload: SearchAThing.SciExt.ToCSV*
  nameWithType.vb: SciExt.ToCSV(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ToCSV(IEnumerable(Of System.Object))
  name.vb: ToCSV(IEnumerable(Of Object))
- uid: SearchAThing.SciExt.DistinctKeepOrder(IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  commentId: M:SearchAThing.SciExt.DistinctKeepOrder(IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  id: DistinctKeepOrder(IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: DistinctKeepOrder(IEnumerable<Vector3D>, Vector3DEqualityComparer)
  nameWithType: SciExt.DistinctKeepOrder(IEnumerable<Vector3D>, Vector3DEqualityComparer)
  fullName: SearchAThing.SciExt.DistinctKeepOrder(IEnumerable<SearchAThing.Sci.Vector3D>, SearchAThing.Sci.Vector3DEqualityComparer)
  type: Method
  source:
    id: DistinctKeepOrder
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1156
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nretrieve distinct of given vector set ensuring to maintain given order\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> DistinctKeepOrder(this IEnumerable<Vector3D> vectors, Vector3DEqualityComparer cmp)
    parameters:
    - id: vectors
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: cmp
      type: SearchAThing.Sci.Vector3DEqualityComparer
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistinctKeepOrder(vectors As IEnumerable(Of Vector3D), cmp As Vector3DEqualityComparer) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.DistinctKeepOrder*
  nameWithType.vb: SciExt.DistinctKeepOrder(IEnumerable(Of Vector3D), Vector3DEqualityComparer)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.DistinctKeepOrder(IEnumerable(Of SearchAThing.Sci.Vector3D), SearchAThing.Sci.Vector3DEqualityComparer)
  name.vb: DistinctKeepOrder(IEnumerable(Of Vector3D), Vector3DEqualityComparer)
- uid: SearchAThing.SciExt.StringRepresentation(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.StringRepresentation(IEnumerable{SearchAThing.Sci.Vector3D})
  id: StringRepresentation(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: StringRepresentation(IEnumerable<Vector3D>)
  nameWithType: SciExt.StringRepresentation(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.StringRepresentation(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: StringRepresentation
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1170
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\narray invariant string vector3d representation &quot;(x1,y1,z2);(x2,y2,z2)&quot;\n"
  example: []
  syntax:
    content: public static string StringRepresentation(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StringRepresentation(pts As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.SciExt.StringRepresentation*
  nameWithType.vb: SciExt.StringRepresentation(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.StringRepresentation(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: StringRepresentation(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.Length(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.Length(IEnumerable{SearchAThing.Sci.Vector3D})
  id: Length(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Length(IEnumerable<Vector3D>)
  nameWithType: SciExt.Length(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.Length(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: Length
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1178
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ncompute length of polyline from given seq_pts\n"
  example: []
  syntax:
    content: public static double Length(this IEnumerable<Vector3D> seq_pts)
    parameters:
    - id: seq_pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Length(seq_pts As IEnumerable(Of Vector3D)) As Double
  overload: SearchAThing.SciExt.Length*
  nameWithType.vb: SciExt.Length(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Length(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: Length(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.ToCoordSequence(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.ToCoordSequence(IEnumerable{SearchAThing.Sci.Vector3D})
  id: ToCoordSequence(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToCoordSequence(IEnumerable<Vector3D>)
  nameWithType: SciExt.ToCoordSequence(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.ToCoordSequence(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: ToCoordSequence
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1196
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nfrom a list of vector3d retrieve x1,y1,z1,x2,y2,z2,... coord sequence\n"
  example: []
  syntax:
    content: public static IEnumerable<double> ToCoordSequence(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: IEnumerable{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCoordSequence(pts As IEnumerable(Of Vector3D)) As IEnumerable(Of Double)
  overload: SearchAThing.SciExt.ToCoordSequence*
  nameWithType.vb: SciExt.ToCoordSequence(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ToCoordSequence(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ToCoordSequence(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.ToCoordString2D(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.ToCoordString2D(IEnumerable{SearchAThing.Sci.Vector3D})
  id: ToCoordString2D(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToCoordString2D(IEnumerable<Vector3D>)
  nameWithType: SciExt.ToCoordString2D(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.ToCoordString2D(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: ToCoordString2D
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1209
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nproduce a string with x1,y1,x2,y2, ...\n"
  example: []
  syntax:
    content: public static string ToCoordString2D(this IEnumerable<Vector3D> points)
    parameters:
    - id: points
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCoordString2D(points As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.SciExt.ToCoordString2D*
  nameWithType.vb: SciExt.ToCoordString2D(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ToCoordString2D(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ToCoordString2D(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.ToCoordString3D(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.ToCoordString3D(IEnumerable{SearchAThing.Sci.Vector3D})
  id: ToCoordString3D(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToCoordString3D(IEnumerable<Vector3D>)
  nameWithType: SciExt.ToCoordString3D(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.ToCoordString3D(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: ToCoordString3D
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1235
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nproduce a string with x1,y1,z1,x2,y2,z2, ...\n"
  example: []
  syntax:
    content: public static string ToCoordString3D(this IEnumerable<Vector3D> points)
    parameters:
    - id: points
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCoordString3D(points As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.SciExt.ToCoordString3D*
  nameWithType.vb: SciExt.ToCoordString3D(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ToCoordString3D(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ToCoordString3D(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.CadScriptPolyline(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.CadScriptPolyline(IEnumerable{SearchAThing.Sci.Vector3D})
  id: CadScriptPolyline(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: CadScriptPolyline(IEnumerable<Vector3D>)
  nameWithType: SciExt.CadScriptPolyline(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.CadScriptPolyline(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: CadScriptPolyline
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1258
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static string CadScriptPolyline(this IEnumerable<Vector3D> points)
    parameters:
    - id: points
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CadScriptPolyline(points As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.SciExt.CadScriptPolyline*
  nameWithType.vb: SciExt.CadScriptPolyline(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.CadScriptPolyline(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: CadScriptPolyline(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.CadScriptPoint(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.CadScriptPoint(IEnumerable{SearchAThing.Sci.Vector3D})
  id: CadScriptPoint(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: CadScriptPoint(IEnumerable<Vector3D>)
  nameWithType: SciExt.CadScriptPoint(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.CadScriptPoint(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: CadScriptPoint
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1271
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static string CadScriptPoint(this IEnumerable<Vector3D> points)
    parameters:
    - id: points
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CadScriptPoint(points As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.SciExt.CadScriptPoint*
  nameWithType.vb: SciExt.CadScriptPoint(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.CadScriptPoint(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: CadScriptPoint(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.EqualsTol(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.EqualsTol(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,IEnumerable{SearchAThing.Sci.Vector3D})
  id: EqualsTol(IEnumerable{SearchAThing.Sci.Vector3D},System.Double,IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: EqualsTol(IEnumerable<Vector3D>, Double, IEnumerable<Vector3D>)
  nameWithType: SciExt.EqualsTol(IEnumerable<Vector3D>, Double, IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.EqualsTol(IEnumerable<SearchAThing.Sci.Vector3D>, System.Double, IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: EqualsTol
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1287
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nchecks two list of vectors are equals and with same order of elements        \n"
  example: []
  syntax:
    content: public static bool EqualsTol(this IEnumerable<Vector3D> lst, double tol, IEnumerable<Vector3D> other)
    parameters:
    - id: lst
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    - id: other
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsTol(lst As IEnumerable(Of Vector3D), tol As Double, other As IEnumerable(Of Vector3D)) As Boolean
  overload: SearchAThing.SciExt.EqualsTol*
  nameWithType.vb: SciExt.EqualsTol(IEnumerable(Of Vector3D), Double, IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.EqualsTol(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Double, IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: EqualsTol(IEnumerable(Of Vector3D), Double, IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.Sum(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.Sum(IEnumerable{SearchAThing.Sci.Vector3D})
  id: Sum(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Vector3D>)
  nameWithType: SciExt.Sum(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.Sum(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: Sum
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1306
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static Vector3D Sum(this IEnumerable<Vector3D> lst)
    parameters:
    - id: lst
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(lst As IEnumerable(Of Vector3D)) As Vector3D
  overload: SearchAThing.SciExt.Sum*
  nameWithType.vb: SciExt.Sum(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Sum(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: Sum(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.Center(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.Center(IEnumerable{SearchAThing.Sci.Vector3D})
  id: Center(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Center(IEnumerable<Vector3D>)
  nameWithType: SciExt.Center(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.Center(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: Center
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1317
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nSame as mean\n"
  example: []
  syntax:
    content: public static Vector3D Center(this IEnumerable<Vector3D> lst)
    parameters:
    - id: lst
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Center(lst As IEnumerable(Of Vector3D)) As Vector3D
  overload: SearchAThing.SciExt.Center*
  nameWithType.vb: SciExt.Center(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Center(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: Center(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.Mean(IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  commentId: M:SearchAThing.SciExt.Mean(IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  id: Mean(IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: Mean(IEnumerable<Vector3D>, Boolean)
  nameWithType: SciExt.Mean(IEnumerable<Vector3D>, Boolean)
  fullName: SearchAThing.SciExt.Mean(IEnumerable<SearchAThing.Sci.Vector3D>, System.Boolean)
  type: Method
  source:
    id: Mean
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1327
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nmean of given vetor3d list\nnote: if used to compute poly center enable skipFirstAtEnd\n"
  example: []
  syntax:
    content: public static Vector3D Mean(this IEnumerable<Vector3D> lst, bool skipFirstAtEnd = false)
    parameters:
    - id: lst
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: skipFirstAtEnd
      type: System.Boolean
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Mean(lst As IEnumerable(Of Vector3D), skipFirstAtEnd As Boolean = False) As Vector3D
  overload: SearchAThing.SciExt.Mean*
  nameWithType.vb: SciExt.Mean(IEnumerable(Of Vector3D), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.Mean(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Boolean)
  name.vb: Mean(IEnumerable(Of Vector3D), Boolean)
- uid: SearchAThing.SciExt.ToVector3D(netDxf.Vector2)
  commentId: M:SearchAThing.SciExt.ToVector3D(netDxf.Vector2)
  id: ToVector3D(netDxf.Vector2)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToVector3D(netDxf.Vector2)
  nameWithType: SciExt.ToVector3D(netDxf.Vector2)
  fullName: SearchAThing.SciExt.ToVector3D(netDxf.Vector2)
  type: Method
  source:
    id: ToVector3D
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1341
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static Vector3D ToVector3D(this netDxf.Vector2 v)
    parameters:
    - id: v
      type: netDxf.Vector2
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector3D(v As netDxf.Vector2) As Vector3D
  overload: SearchAThing.SciExt.ToVector3D*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  id: ToVector2(SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToVector2(Vector3D)
  nameWithType: SciExt.ToVector2(Vector3D)
  fullName: SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: ToVector2
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1351
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  syntax:
    content: public static netDxf.Vector2 ToVector2(this Vector3D v)
    parameters:
    - id: v
      type: SearchAThing.Sci.Vector3D
    return:
      type: netDxf.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector2(v As Vector3D) As netDxf.Vector2
  overload: SearchAThing.SciExt.ToVector2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  id: ToPoint(SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToPoint(Vector3D)
  nameWithType: SciExt.ToPoint(Vector3D)
  fullName: SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: ToPoint
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1359
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nTo point (double x, double y)\n"
  example: []
  syntax:
    content: public static Point ToPoint(this Vector3D v)
    parameters:
    - id: v
      type: SearchAThing.Sci.Vector3D
    return:
      type: Point
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPoint(v As Vector3D) As Point
  overload: SearchAThing.SciExt.ToPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  id: ToPsql(SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToPsql(Vector3D)
  nameWithType: SciExt.ToPsql(Vector3D)
  fullName: SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: ToPsql
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1367
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ncreates a psql double[] string\n"
  example: []
  syntax:
    content: public static string ToPsql(this Vector3D v)
    parameters:
    - id: v
      type: SearchAThing.Sci.Vector3D
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPsql(v As Vector3D) As String
  overload: SearchAThing.SciExt.ToPsql*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.ToPsql(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.ToPsql(IEnumerable{SearchAThing.Sci.Vector3D})
  id: ToPsql(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToPsql(IEnumerable<Vector3D>)
  nameWithType: SciExt.ToPsql(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.ToPsql(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: ToPsql
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1375
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ncreate a psql representation of double[] coord sequence x1,y1,z1,x2,y2,z2, ... of given points\n"
  example: []
  syntax:
    content: public static string ToPsql(this IEnumerable<Vector3D> pts)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToPsql(pts As IEnumerable(Of Vector3D)) As String
  overload: SearchAThing.SciExt.ToPsql*
  nameWithType.vb: SciExt.ToPsql(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ToPsql(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: ToPsql(IEnumerable(Of Vector3D))
- uid: SearchAThing.SciExt.ZapDuplicates(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  commentId: M:SearchAThing.SciExt.ZapDuplicates(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  id: ZapDuplicates(IEnumerable{SearchAThing.Sci.Vector3D},System.Double)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ZapDuplicates(IEnumerable<Vector3D>, Double)
  nameWithType: SciExt.ZapDuplicates(IEnumerable<Vector3D>, Double)
  fullName: SearchAThing.SciExt.ZapDuplicates(IEnumerable<SearchAThing.Sci.Vector3D>, System.Double)
  type: Method
  source:
    id: ZapDuplicates
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1384
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nreturn pts (maintaining order) w/out duplicates\nuse the other overloaded method if already have a vector 3d equality comparer\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> ZapDuplicates(this IEnumerable<Vector3D> pts, double tol)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: tol
      type: System.Double
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ZapDuplicates(pts As IEnumerable(Of Vector3D), tol As Double) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.ZapDuplicates*
  nameWithType.vb: SciExt.ZapDuplicates(IEnumerable(Of Vector3D), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ZapDuplicates(IEnumerable(Of SearchAThing.Sci.Vector3D), System.Double)
  name.vb: ZapDuplicates(IEnumerable(Of Vector3D), Double)
- uid: SearchAThing.SciExt.ZapDuplicates(IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  commentId: M:SearchAThing.SciExt.ZapDuplicates(IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  id: ZapDuplicates(IEnumerable{SearchAThing.Sci.Vector3D},SearchAThing.Sci.Vector3DEqualityComparer)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ZapDuplicates(IEnumerable<Vector3D>, Vector3DEqualityComparer)
  nameWithType: SciExt.ZapDuplicates(IEnumerable<Vector3D>, Vector3DEqualityComparer)
  fullName: SearchAThing.SciExt.ZapDuplicates(IEnumerable<SearchAThing.Sci.Vector3D>, SearchAThing.Sci.Vector3DEqualityComparer)
  type: Method
  source:
    id: ZapDuplicates
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1392
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nreturn pts (maintaining order) w/out duplicates\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> ZapDuplicates(this IEnumerable<Vector3D> pts, Vector3DEqualityComparer cmp)
    parameters:
    - id: pts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    - id: cmp
      type: SearchAThing.Sci.Vector3DEqualityComparer
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ZapDuplicates(pts As IEnumerable(Of Vector3D), cmp As Vector3DEqualityComparer) As IEnumerable(Of Vector3D)
  overload: SearchAThing.SciExt.ZapDuplicates*
  nameWithType.vb: SciExt.ZapDuplicates(IEnumerable(Of Vector3D), Vector3DEqualityComparer)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ZapDuplicates(IEnumerable(Of SearchAThing.Sci.Vector3D), SearchAThing.Sci.Vector3DEqualityComparer)
  name.vb: ZapDuplicates(IEnumerable(Of Vector3D), Vector3DEqualityComparer)
- uid: SearchAThing.SciExt.ClosedPolys2D(IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Int32)
  commentId: M:SearchAThing.SciExt.ClosedPolys2D(IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Int32)
  id: ClosedPolys2D(IEnumerable{SearchAThing.Sci.Line3D},System.Double,System.Int32)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ClosedPolys2D(IEnumerable<Line3D>, Double, Int32)
  nameWithType: SciExt.ClosedPolys2D(IEnumerable<Line3D>, Double, Int32)
  fullName: SearchAThing.SciExt.ClosedPolys2D(IEnumerable<SearchAThing.Sci.Line3D>, System.Double, System.Int32)
  type: Method
  source:
    id: ClosedPolys2D
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1410
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nbuild polygons from given list of segments\nif want to represent arcs, add them as dummy lines to segs\npolys returned are ordered anticlockwise\n"
  example: []
  syntax:
    content: public static IEnumerable<IReadOnlyList<Vector3D>> ClosedPolys2D(this IEnumerable<Line3D> segs, double tolLen, int polyMaxPoints = 0)
    parameters:
    - id: segs
      type: IEnumerable{SearchAThing.Sci.Line3D}
    - id: tolLen
      type: System.Double
    - id: polyMaxPoints
      type: System.Int32
    return:
      type: IEnumerable{IReadOnlyList{SearchAThing.Sci.Vector3D}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClosedPolys2D(segs As IEnumerable(Of Line3D), tolLen As Double, polyMaxPoints As Integer = 0) As IEnumerable(Of IReadOnlyList(Of Vector3D))
  overload: SearchAThing.SciExt.ClosedPolys2D*
  nameWithType.vb: SciExt.ClosedPolys2D(IEnumerable(Of Line3D), Double, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.ClosedPolys2D(IEnumerable(Of SearchAThing.Sci.Line3D), System.Double, System.Int32)
  name.vb: ClosedPolys2D(IEnumerable(Of Line3D), Double, Int32)
- uid: SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  id: ToDxfPoint(SearchAThing.Sci.Vector3D)
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: ToDxfPoint(Vector3D)
  nameWithType: SciExt.ToDxfPoint(Vector3D)
  fullName: SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: ToDxfPoint
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1529
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\ncreate dxf point from given vector3d\n"
  example: []
  syntax:
    content: public static netDxf.Entities.Point ToDxfPoint(this Vector3D pt)
    parameters:
    - id: pt
      type: SearchAThing.Sci.Vector3D
    return:
      type: netDxf.Entities.Point
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDxfPoint(pt As Vector3D) As netDxf.Entities.Point
  overload: SearchAThing.SciExt.ToDxfPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.SciExt.IsLinearIndependent(IEnumerable{SearchAThing.Sci.Vector3D})
  commentId: M:SearchAThing.SciExt.IsLinearIndependent(IEnumerable{SearchAThing.Sci.Vector3D})
  id: IsLinearIndependent(IEnumerable{SearchAThing.Sci.Vector3D})
  isExtensionMethod: true
  parent: SearchAThing.SciExt
  langs:
  - csharp
  - vb
  name: IsLinearIndependent(IEnumerable<Vector3D>)
  nameWithType: SciExt.IsLinearIndependent(IEnumerable<Vector3D>)
  fullName: SearchAThing.SciExt.IsLinearIndependent(IEnumerable<SearchAThing.Sci.Vector3D>)
  type: Method
  source:
    id: IsLinearIndependent
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1541
  assemblies:
  - netcore-sci
  namespace: SearchAThing
  summary: "\nstates if given 3 vectors are linearly independent        \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0001.cs)\n"
  example: []
  syntax:
    content: public static bool IsLinearIndependent(this IEnumerable<Vector3D> vectors)
    parameters:
    - id: vectors
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    return:
      type: System.Boolean
      description: true if given vector are linearly independent
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLinearIndependent(vectors As IEnumerable(Of Vector3D)) As Boolean
  overload: SearchAThing.SciExt.IsLinearIndependent*
  nameWithType.vb: SciExt.IsLinearIndependent(IEnumerable(Of Vector3D))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.SciExt.IsLinearIndependent(IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: IsLinearIndependent(IEnumerable(Of Vector3D))
references:
- uid: SearchAThing
  commentId: N:SearchAThing
  name: SearchAThing
  nameWithType: SearchAThing
  fullName: SearchAThing
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.SciExt.RadTol*
  commentId: Overload:SearchAThing.SciExt.RadTol
  name: RadTol
  nameWithType: SciExt.RadTol
  fullName: SearchAThing.SciExt.RadTol
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SearchAThing.SciExt.ToArc3D*
  commentId: Overload:SearchAThing.SciExt.ToArc3D
  name: ToArc3D
  nameWithType: SciExt.ToArc3D
  fullName: SearchAThing.SciExt.ToArc3D
- uid: netDxf.Entities.Arc
  commentId: '!:netDxf.Entities.Arc'
  isExternal: true
  name: netDxf.Entities.Arc
  nameWithType: netDxf.Entities.Arc
  fullName: netDxf.Entities.Arc
- uid: SearchAThing.Sci.Arc3D
  commentId: T:SearchAThing.Sci.Arc3D
  parent: SearchAThing.Sci
  name: Arc3D
  nameWithType: Arc3D
  fullName: SearchAThing.Sci.Arc3D
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
- uid: SearchAThing.SciExt.AngleInRange*
  commentId: Overload:SearchAThing.SciExt.AngleInRange
  name: AngleInRange
  nameWithType: SciExt.AngleInRange
  fullName: SearchAThing.SciExt.AngleInRange
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SearchAThing.SciExt.BBox*
  commentId: Overload:SearchAThing.SciExt.BBox
  name: BBox
  nameWithType: SciExt.BBox
  fullName: SearchAThing.SciExt.BBox
- uid: IEnumerable{SearchAThing.Sci.Vector3D}
  commentId: '!:IEnumerable{SearchAThing.Sci.Vector3D}'
  definition: IEnumerable`1
  name: IEnumerable<Vector3D>
  nameWithType: IEnumerable<Vector3D>
  fullName: IEnumerable<SearchAThing.Sci.Vector3D>
  nameWithType.vb: IEnumerable(Of Vector3D)
  fullName.vb: IEnumerable(Of SearchAThing.Sci.Vector3D)
  name.vb: IEnumerable(Of Vector3D)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.BBox3D
  commentId: T:SearchAThing.Sci.BBox3D
  parent: SearchAThing.Sci
  name: BBox3D
  nameWithType: BBox3D
  fullName: SearchAThing.Sci.BBox3D
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EntityObject
  isExternal: true
  name: EntityObject
  nameWithType: EntityObject
  fullName: EntityObject
- uid: IEnumerable{EntityObject}
  commentId: '!:IEnumerable{EntityObject}'
  definition: IEnumerable`1
  name: IEnumerable<EntityObject>
  nameWithType: IEnumerable<EntityObject>
  fullName: IEnumerable<EntityObject>
  nameWithType.vb: IEnumerable(Of EntityObject)
  fullName.vb: IEnumerable(Of EntityObject)
  name.vb: IEnumerable(Of EntityObject)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: EntityObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EntityObject
    name: EntityObject
    nameWithType: EntityObject
    fullName: EntityObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.CadScript*
  commentId: Overload:SearchAThing.SciExt.CadScript
  name: CadScript
  nameWithType: SciExt.CadScript
  fullName: SearchAThing.SciExt.CadScript
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SearchAThing.SciExt.ToFace3DList*
  commentId: Overload:SearchAThing.SciExt.ToFace3DList
  name: ToFace3DList
  nameWithType: SciExt.ToFace3DList
  fullName: SearchAThing.SciExt.ToFace3DList
- uid: IEnumerable{Face3d}
  commentId: '!:IEnumerable{Face3d}'
  definition: IEnumerable`1
  name: IEnumerable<Face3d>
  nameWithType: IEnumerable<Face3d>
  fullName: IEnumerable<Face3d>
  nameWithType.vb: IEnumerable(Of Face3d)
  fullName.vb: IEnumerable(Of Face3d)
  name.vb: IEnumerable(Of Face3d)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Face3d
    name: Face3d
    nameWithType: Face3d
    fullName: Face3d
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Face3d
    name: Face3d
    nameWithType: Face3d
    fullName: Face3d
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.DrawCuboid*
  commentId: Overload:SearchAThing.SciExt.DrawCuboid
  name: DrawCuboid
  nameWithType: SciExt.DrawCuboid
  fullName: SearchAThing.SciExt.DrawCuboid
- uid: DxfObject
  isExternal: true
  name: DxfObject
  nameWithType: DxfObject
  fullName: DxfObject
- uid: Layer
  isExternal: true
  name: Layer
  nameWithType: Layer
  fullName: Layer
- uid: SearchAThing.SciExt.Points*
  commentId: Overload:SearchAThing.SciExt.Points
  name: Points
  nameWithType: SciExt.Points
  fullName: SearchAThing.SciExt.Points
- uid: SearchAThing.SciExt.CircleBy3Points*
  commentId: Overload:SearchAThing.SciExt.CircleBy3Points
  name: CircleBy3Points
  nameWithType: SciExt.CircleBy3Points
  fullName: SearchAThing.SciExt.CircleBy3Points
- uid: SearchAThing.Sci.Circle3D
  commentId: T:SearchAThing.Sci.Circle3D
  parent: SearchAThing.Sci
  name: Circle3D
  nameWithType: Circle3D
  fullName: SearchAThing.Sci.Circle3D
- uid: SearchAThing.SciExt.ToCircle3D*
  commentId: Overload:SearchAThing.SciExt.ToCircle3D
  name: ToCircle3D
  nameWithType: SciExt.ToCircle3D
  fullName: SearchAThing.SciExt.ToCircle3D
- uid: netDxf.Entities.Circle
  commentId: '!:netDxf.Entities.Circle'
  isExternal: true
  name: netDxf.Entities.Circle
  nameWithType: netDxf.Entities.Circle
  fullName: netDxf.Entities.Circle
- uid: SearchAThing.SciExt.Project*
  commentId: Overload:SearchAThing.SciExt.Project
  name: Project
  nameWithType: SciExt.Project
  fullName: SearchAThing.SciExt.Project
- uid: SearchAThing.Sci.Vector3D
  commentId: T:SearchAThing.Sci.Vector3D
  parent: SearchAThing.Sci
  name: Vector3D
  nameWithType: Vector3D
  fullName: SearchAThing.Sci.Vector3D
- uid: SearchAThing.Sci.CoordinateSystem3D
  commentId: T:SearchAThing.Sci.CoordinateSystem3D
  parent: SearchAThing.Sci
  name: CoordinateSystem3D
  nameWithType: CoordinateSystem3D
  fullName: SearchAThing.Sci.CoordinateSystem3D
- uid: SearchAThing.SciExt.SetLayer*
  commentId: Overload:SearchAThing.SciExt.SetLayer
  name: SetLayer
  nameWithType: SciExt.SetLayer
  fullName: SearchAThing.SciExt.SetLayer
- uid: SearchAThing.SciExt.MidPoint*
  commentId: Overload:SearchAThing.SciExt.MidPoint
  name: MidPoint
  nameWithType: SciExt.MidPoint
  fullName: SearchAThing.SciExt.MidPoint
- uid: Polyline
  isExternal: true
  name: Polyline
  nameWithType: Polyline
  fullName: Polyline
- uid: SearchAThing.SciExt.Explode*
  commentId: Overload:SearchAThing.SciExt.Explode
  name: Explode
  nameWithType: SciExt.Explode
  fullName: SearchAThing.SciExt.Explode
- uid: Insert
  commentId: '!:Insert'
  isExternal: true
  name: Insert
  nameWithType: Insert
  fullName: Insert
- uid: SearchAThing.SciExt.Vector3DCoords*
  commentId: Overload:SearchAThing.SciExt.Vector3DCoords
  name: Vector3DCoords
  nameWithType: SciExt.Vector3DCoords
  fullName: SearchAThing.SciExt.Vector3DCoords
- uid: LwPolyline
  commentId: '!:LwPolyline'
  isExternal: true
  name: LwPolyline
  nameWithType: LwPolyline
  fullName: LwPolyline
- uid: SearchAThing.SciExt.RepeatFirstAtEnd*
  commentId: Overload:SearchAThing.SciExt.RepeatFirstAtEnd
  name: RepeatFirstAtEnd
  nameWithType: SciExt.RepeatFirstAtEnd
  fullName: SearchAThing.SciExt.RepeatFirstAtEnd
- uid: SearchAThing.SciExt.CoordTransform*
  commentId: Overload:SearchAThing.SciExt.CoordTransform
  name: CoordTransform
  nameWithType: SciExt.CoordTransform
  fullName: SearchAThing.SciExt.CoordTransform
- uid: DxfDocument
  isExternal: true
  name: DxfDocument
  nameWithType: DxfDocument
  fullName: DxfDocument
- uid: Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D}
  commentId: '!:Func{SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D}'
  definition: Func`2
  name: Func<Vector3D, Vector3D>
  nameWithType: Func<Vector3D, Vector3D>
  fullName: Func<SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D>
  nameWithType.vb: Func(Of Vector3D, Vector3D)
  fullName.vb: Func(Of SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  name.vb: Func(Of Vector3D, Vector3D)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.AddEntity*
  commentId: Overload:SearchAThing.SciExt.AddEntity
  name: AddEntity
  nameWithType: SciExt.AddEntity
  fullName: SearchAThing.SciExt.AddEntity
- uid: SearchAThing.SciExt.AddEntities*
  commentId: Overload:SearchAThing.SciExt.AddEntities
  name: AddEntities
  nameWithType: SciExt.AddEntities
  fullName: SearchAThing.SciExt.AddEntities
- uid: SearchAThing.SciExt.DrawStar*
  commentId: Overload:SearchAThing.SciExt.DrawStar
  name: DrawStar
  nameWithType: SciExt.DrawStar
  fullName: SearchAThing.SciExt.DrawStar
- uid: SearchAThing.SciExt.DrawCube*
  commentId: Overload:SearchAThing.SciExt.DrawCube
  name: DrawCube
  nameWithType: SciExt.DrawCube
  fullName: SearchAThing.SciExt.DrawCube
- uid: Face3d
  commentId: '!:Face3d'
  isExternal: true
  name: Face3d
  nameWithType: Face3d
  fullName: Face3d
- uid: SearchAThing.SciExt.AutoZoom*
  commentId: Overload:SearchAThing.SciExt.AutoZoom
  name: AutoZoom
  nameWithType: SciExt.AutoZoom
  fullName: SearchAThing.SciExt.AutoZoom
- uid: SearchAThing.SciExt.ToLine*
  commentId: Overload:SearchAThing.SciExt.ToLine
  name: ToLine
  nameWithType: SciExt.ToLine
  fullName: SearchAThing.SciExt.ToLine
- uid: SearchAThing.Sci.Line3D
  commentId: T:SearchAThing.Sci.Line3D
  parent: SearchAThing.Sci
  name: Line3D
  nameWithType: Line3D
  fullName: SearchAThing.Sci.Line3D
- uid: Line
  commentId: '!:Line'
  isExternal: true
  name: Line
  nameWithType: Line
  fullName: Line
- uid: SearchAThing.SciExt.SetColor*
  commentId: Overload:SearchAThing.SciExt.SetColor
  name: SetColor
  nameWithType: SciExt.SetColor
  fullName: SearchAThing.SciExt.SetColor
- uid: AciColor
  commentId: '!:AciColor'
  isExternal: true
  name: AciColor
  nameWithType: AciColor
  fullName: AciColor
- uid: SearchAThing.SciExt.ToDxfUCS*
  commentId: Overload:SearchAThing.SciExt.ToDxfUCS
  name: ToDxfUCS
  nameWithType: SciExt.ToDxfUCS
  fullName: SearchAThing.SciExt.ToDxfUCS
- uid: UCS
  commentId: '!:UCS'
  isExternal: true
  name: UCS
  nameWithType: UCS
  fullName: UCS
- uid: SearchAThing.SciExt.DrawTimeline*
  commentId: Overload:SearchAThing.SciExt.DrawTimeline
  name: DrawTimeline
  nameWithType: SciExt.DrawTimeline
  fullName: SearchAThing.SciExt.DrawTimeline
- uid: List{System.ValueTuple{DateTime,DateTime}}
  commentId: '!:List{System.ValueTuple{DateTime,DateTime}}'
  definition: List`1
  name: List<ValueTuple<DateTime, DateTime>>
  nameWithType: List<ValueTuple<DateTime, DateTime>>
  fullName: List<System.ValueTuple<DateTime, DateTime>>
  nameWithType.vb: List(Of ValueTuple(Of DateTime, DateTime))
  fullName.vb: List(Of System.ValueTuple(Of DateTime, DateTime))
  name.vb: List(Of ValueTuple(Of DateTime, DateTime))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{DateTime,System.String}
  commentId: '!:Func{DateTime,System.String}'
  definition: Func`2
  name: Func<DateTime, String>
  nameWithType: Func<DateTime, String>
  fullName: Func<DateTime, System.String>
  nameWithType.vb: Func(Of DateTime, String)
  fullName.vb: Func(Of DateTime, System.String)
  name.vb: Func(Of DateTime, String)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.ToGLLinesVertexes*
  commentId: Overload:SearchAThing.SciExt.ToGLLinesVertexes
  name: ToGLLinesVertexes
  nameWithType: SciExt.ToGLLinesVertexes
  fullName: SearchAThing.SciExt.ToGLLinesVertexes
- uid: netDxf.DxfDocument
  commentId: '!:netDxf.DxfDocument'
  isExternal: true
  name: netDxf.DxfDocument
  nameWithType: netDxf.DxfDocument
  fullName: netDxf.DxfDocument
- uid: SearchAThing.Sci.GLLineVertex[]
  isExternal: true
  name: GLLineVertex[]
  nameWithType: GLLineVertex[]
  fullName: SearchAThing.Sci.GLLineVertex[]
  nameWithType.vb: GLLineVertex()
  fullName.vb: SearchAThing.Sci.GLLineVertex()
  name.vb: GLLineVertex()
  spec.csharp:
  - uid: SearchAThing.Sci.GLLineVertex
    name: GLLineVertex
    nameWithType: GLLineVertex
    fullName: SearchAThing.Sci.GLLineVertex
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: SearchAThing.Sci.GLLineVertex
    name: GLLineVertex
    nameWithType: GLLineVertex
    fullName: SearchAThing.Sci.GLLineVertex
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SearchAThing.SciExt.MinDistance*
  commentId: Overload:SearchAThing.SciExt.MinDistance
  name: MinDistance
  nameWithType: SciExt.MinDistance
  fullName: SearchAThing.SciExt.MinDistance
- uid: IEnumerable{System.Double}
  commentId: '!:IEnumerable{System.Double}'
  definition: IEnumerable`1
  name: IEnumerable<Double>
  nameWithType: IEnumerable<Double>
  fullName: IEnumerable<System.Double>
  nameWithType.vb: IEnumerable(Of Double)
  fullName.vb: IEnumerable(Of System.Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.ToGeometryBlock*
  commentId: Overload:SearchAThing.SciExt.ToGeometryBlock
  name: ToGeometryBlock
  nameWithType: SciExt.ToGeometryBlock
  fullName: SearchAThing.SciExt.ToGeometryBlock
- uid: netDxf.Entities.LwPolyline
  isExternal: true
  name: netDxf.Entities.LwPolyline
  nameWithType: netDxf.Entities.LwPolyline
  fullName: netDxf.Entities.LwPolyline
- uid: IEnumerable{SearchAThing.Sci.Geometry}
  commentId: '!:IEnumerable{SearchAThing.Sci.Geometry}'
  definition: IEnumerable`1
  name: IEnumerable<Geometry>
  nameWithType: IEnumerable<Geometry>
  fullName: IEnumerable<SearchAThing.Sci.Geometry>
  nameWithType.vb: IEnumerable(Of Geometry)
  fullName.vb: IEnumerable(Of SearchAThing.Sci.Geometry)
  name.vb: IEnumerable(Of Geometry)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    nameWithType: Geometry
    fullName: SearchAThing.Sci.Geometry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    nameWithType: Geometry
    fullName: SearchAThing.Sci.Geometry
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.Segments*
  commentId: Overload:SearchAThing.SciExt.Segments
  name: Segments
  nameWithType: SciExt.Segments
  fullName: SearchAThing.SciExt.Segments
- uid: IEnumerable{SearchAThing.Sci.Line3D}
  commentId: '!:IEnumerable{SearchAThing.Sci.Line3D}'
  definition: IEnumerable`1
  name: IEnumerable<Line3D>
  nameWithType: IEnumerable<Line3D>
  fullName: IEnumerable<SearchAThing.Sci.Line3D>
  nameWithType.vb: IEnumerable(Of Line3D)
  fullName.vb: IEnumerable(Of SearchAThing.Sci.Line3D)
  name.vb: IEnumerable(Of Line3D)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Line3D
    name: Line3D
    nameWithType: Line3D
    fullName: SearchAThing.Sci.Line3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Line3D
    name: Line3D
    nameWithType: Line3D
    fullName: SearchAThing.Sci.Line3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.Vertexes*
  commentId: Overload:SearchAThing.SciExt.Vertexes
  name: Vertexes
  nameWithType: SciExt.Vertexes
  fullName: SearchAThing.SciExt.Vertexes
- uid: IReadOnlyList{SearchAThing.Sci.Geometry}
  commentId: '!:IReadOnlyList{SearchAThing.Sci.Geometry}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<Geometry>
  nameWithType: IReadOnlyList<Geometry>
  fullName: IReadOnlyList<SearchAThing.Sci.Geometry>
  nameWithType.vb: IReadOnlyList(Of Geometry)
  fullName.vb: IReadOnlyList(Of SearchAThing.Sci.Geometry)
  name.vb: IReadOnlyList(Of Geometry)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    nameWithType: Geometry
    fullName: SearchAThing.Sci.Geometry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Geometry
    name: Geometry
    nameWithType: Geometry
    fullName: SearchAThing.Sci.Geometry
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.GeomCentroid*
  commentId: Overload:SearchAThing.SciExt.GeomCentroid
  name: GeomCentroid
  nameWithType: SciExt.GeomCentroid
  fullName: SearchAThing.SciExt.GeomCentroid
- uid: SearchAThing.SciExt.ToCadScript*
  commentId: Overload:SearchAThing.SciExt.ToCadScript
  name: ToCadScript
  nameWithType: SciExt.ToCadScript
  fullName: SearchAThing.SciExt.ToCadScript
- uid: SearchAThing.SciExt.ToLine3D*
  commentId: Overload:SearchAThing.SciExt.ToLine3D
  name: ToLine3D
  nameWithType: SciExt.ToLine3D
  fullName: SearchAThing.SciExt.ToLine3D
- uid: netDxf.Entities.Line
  commentId: '!:netDxf.Entities.Line'
  isExternal: true
  name: netDxf.Entities.Line
  nameWithType: netDxf.Entities.Line
  fullName: netDxf.Entities.Line
- uid: SearchAThing.SciExt.PolyPoints*
  commentId: Overload:SearchAThing.SciExt.PolyPoints
  name: PolyPoints
  nameWithType: SciExt.PolyPoints
  fullName: SearchAThing.SciExt.PolyPoints
- uid: SearchAThing.SciExt.MergeColinearSegments*
  commentId: Overload:SearchAThing.SciExt.MergeColinearSegments
  name: MergeColinearSegments
  nameWithType: SciExt.MergeColinearSegments
  fullName: SearchAThing.SciExt.MergeColinearSegments
- uid: SearchAThing.SciExt.AutoIntersect*
  commentId: Overload:SearchAThing.SciExt.AutoIntersect
  name: AutoIntersect
  nameWithType: SciExt.AutoIntersect
  fullName: SearchAThing.SciExt.AutoIntersect
- uid: IReadOnlyList{SearchAThing.Sci.Line3D}
  commentId: '!:IReadOnlyList{SearchAThing.Sci.Line3D}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<Line3D>
  nameWithType: IReadOnlyList<Line3D>
  fullName: IReadOnlyList<SearchAThing.Sci.Line3D>
  nameWithType.vb: IReadOnlyList(Of Line3D)
  fullName.vb: IReadOnlyList(Of SearchAThing.Sci.Line3D)
  name.vb: IReadOnlyList(Of Line3D)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Line3D
    name: Line3D
    nameWithType: Line3D
    fullName: SearchAThing.Sci.Line3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Line3D
    name: Line3D
    nameWithType: Line3D
    fullName: SearchAThing.Sci.Line3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.Convert*
  commentId: Overload:SearchAThing.SciExt.Convert
  name: Convert
  nameWithType: SciExt.Convert
  fullName: SearchAThing.SciExt.Convert
- uid: System.Nullable{System.Double}
  commentId: '!:System.Nullable{System.Double}'
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.MeasureUnit
  commentId: T:SearchAThing.Sci.MeasureUnit
  parent: SearchAThing.Sci
  name: MeasureUnit
  nameWithType: MeasureUnit
  fullName: SearchAThing.Sci.MeasureUnit
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.IMUDomain
  commentId: T:SearchAThing.Sci.IMUDomain
  parent: SearchAThing.Sci
  name: IMUDomain
  nameWithType: IMUDomain
  fullName: SearchAThing.Sci.IMUDomain
- uid: SearchAThing.SciExt.ConvertToMeasure*
  commentId: Overload:SearchAThing.SciExt.ConvertToMeasure
  name: ConvertToMeasure
  nameWithType: SciExt.ConvertToMeasure
  fullName: SearchAThing.SciExt.ConvertToMeasure
- uid: SearchAThing.Sci.Measure
  commentId: T:SearchAThing.Sci.Measure
  parent: SearchAThing.Sci
  name: Measure
  nameWithType: Measure
  fullName: SearchAThing.Sci.Measure
- uid: SearchAThing.SciExt.ByPhysicalQuantity*
  commentId: Overload:SearchAThing.SciExt.ByPhysicalQuantity
  name: ByPhysicalQuantity
  nameWithType: SciExt.ByPhysicalQuantity
  fullName: SearchAThing.SciExt.ByPhysicalQuantity
- uid: SearchAThing.Sci.PhysicalQuantity
  commentId: T:SearchAThing.Sci.PhysicalQuantity
  parent: SearchAThing.Sci
  name: PhysicalQuantity
  nameWithType: PhysicalQuantity
  fullName: SearchAThing.Sci.PhysicalQuantity
- uid: SearchAThing.Sci.MeasureUnitWithDefaultTolerance
  commentId: T:SearchAThing.Sci.MeasureUnitWithDefaultTolerance
  parent: SearchAThing.Sci
  name: MeasureUnitWithDefaultTolerance
  nameWithType: MeasureUnitWithDefaultTolerance
  fullName: SearchAThing.Sci.MeasureUnitWithDefaultTolerance
- uid: SearchAThing.SciExt.Angle*
  commentId: Overload:SearchAThing.SciExt.Angle
  name: Angle
  nameWithType: SciExt.Angle
  fullName: SearchAThing.SciExt.Angle
- uid: SearchAThing.SciExt.NormalizeAngle2PI*
  commentId: Overload:SearchAThing.SciExt.NormalizeAngle2PI
  name: NormalizeAngle2PI
  nameWithType: SciExt.NormalizeAngle2PI
  fullName: SearchAThing.SciExt.NormalizeAngle2PI
- uid: SearchAThing.SciExt.MinMax*
  commentId: Overload:SearchAThing.SciExt.MinMax
  name: MinMax
  nameWithType: SciExt.MinMax
  fullName: SearchAThing.SciExt.MinMax
- uid: System.ValueTuple{System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double}
  parent: System
  isExternal: true
  name: ValueTuple<Double, Double>
  nameWithType: ValueTuple<Double, Double>
  fullName: System.ValueTuple<System.Double, System.Double>
  nameWithType.vb: ValueTuple(Of Double, Double)
  fullName.vb: System.ValueTuple(Of System.Double, System.Double)
  name.vb: ValueTuple(Of Double, Double)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SearchAThing.SciExt.Thin*
  commentId: Overload:SearchAThing.SciExt.Thin
  name: Thin
  nameWithType: SciExt.Thin
  fullName: SearchAThing.SciExt.Thin
- uid: List{System.Double}
  commentId: '!:List{System.Double}'
  definition: List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.EqualsTol*
  commentId: Overload:SearchAThing.SciExt.EqualsTol
  name: EqualsTol
  nameWithType: SciExt.EqualsTol
  fullName: SearchAThing.SciExt.EqualsTol
- uid: IEnumerable{System.ValueTuple{System.Double,System.Double}}
  commentId: '!:IEnumerable{System.ValueTuple{System.Double,System.Double}}'
  definition: IEnumerable`1
  name: IEnumerable<ValueTuple<Double, Double>>
  nameWithType: IEnumerable<ValueTuple<Double, Double>>
  fullName: IEnumerable<System.ValueTuple<System.Double, System.Double>>
  nameWithType.vb: IEnumerable(Of ValueTuple(Of Double, Double))
  fullName.vb: IEnumerable(Of System.ValueTuple(Of System.Double, System.Double))
  name.vb: IEnumerable(Of ValueTuple(Of Double, Double))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.WeightedDistribution*
  commentId: Overload:SearchAThing.SciExt.WeightedDistribution
  name: WeightedDistribution
  nameWithType: SciExt.WeightedDistribution
  fullName: SearchAThing.SciExt.WeightedDistribution
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueTuple{System.Double,System.Double}[]
  isExternal: true
  name: ValueTuple<Double, Double>[]
  nameWithType: ValueTuple<Double, Double>[]
  fullName: System.ValueTuple<System.Double, System.Double>[]
  nameWithType.vb: ValueTuple(Of Double, Double)()
  fullName.vb: System.ValueTuple(Of System.Double, System.Double)()
  name.vb: ValueTuple(Of Double, Double)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SearchAThing.SciExt.Area*
  commentId: Overload:SearchAThing.SciExt.Area
  name: Area
  nameWithType: SciExt.Area
  fullName: SearchAThing.SciExt.Area
- uid: IReadOnlyList{SearchAThing.Sci.Vector3D}
  commentId: '!:IReadOnlyList{SearchAThing.Sci.Vector3D}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<Vector3D>
  nameWithType: IReadOnlyList<Vector3D>
  fullName: IReadOnlyList<SearchAThing.Sci.Vector3D>
  nameWithType.vb: IReadOnlyList(Of Vector3D)
  fullName.vb: IReadOnlyList(Of SearchAThing.Sci.Vector3D)
  name.vb: IReadOnlyList(Of Vector3D)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.Centroid*
  commentId: Overload:SearchAThing.SciExt.Centroid
  name: Centroid
  nameWithType: SciExt.Centroid
  fullName: SearchAThing.SciExt.Centroid
- uid: SearchAThing.SciExt.Offset*
  commentId: Overload:SearchAThing.SciExt.Offset
  name: Offset
  nameWithType: SciExt.Offset
  fullName: SearchAThing.SciExt.Offset
- uid: SearchAThing.SciExt.PolygonSegments*
  commentId: Overload:SearchAThing.SciExt.PolygonSegments
  name: PolygonSegments
  nameWithType: SciExt.PolygonSegments
  fullName: SearchAThing.SciExt.PolygonSegments
- uid: SearchAThing.SciExt.ContainsPoint*
  commentId: Overload:SearchAThing.SciExt.ContainsPoint
  name: ContainsPoint
  nameWithType: SciExt.ContainsPoint
  fullName: SearchAThing.SciExt.ContainsPoint
- uid: SearchAThing.SciExt.SortPoly*
  commentId: Overload:SearchAThing.SciExt.SortPoly
  name: SortPoly
  nameWithType: SciExt.SortPoly
  fullName: SearchAThing.SciExt.SortPoly
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{T},SearchAThing.Sci.Vector3D}
  commentId: '!:Func{``0,SearchAThing.Sci.Vector3D}'
  definition: Func`2
  name: Func<T, Vector3D>
  nameWithType: Func<T, Vector3D>
  fullName: Func<T, SearchAThing.Sci.Vector3D>
  nameWithType.vb: Func(Of T, Vector3D)
  fullName.vb: Func(Of T, SearchAThing.Sci.Vector3D)
  name.vb: Func(Of T, Vector3D)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.TakeUntilAdjacent*
  commentId: Overload:SearchAThing.SciExt.TakeUntilAdjacent
  name: TakeUntilAdjacent
  nameWithType: SciExt.TakeUntilAdjacent
  fullName: SearchAThing.SciExt.TakeUntilAdjacent
- uid: SearchAThing.SciExt.IsAClosedPoly*
  commentId: Overload:SearchAThing.SciExt.IsAClosedPoly
  name: IsAClosedPoly
  nameWithType: SciExt.IsAClosedPoly
  fullName: SearchAThing.SciExt.IsAClosedPoly
- uid: SearchAThing.SciExt.Intersect*
  commentId: Overload:SearchAThing.SciExt.Intersect
  name: Intersect
  nameWithType: SciExt.Intersect
  fullName: SearchAThing.SciExt.Intersect
- uid: SearchAThing.Sci.Line3DSegmentMode
  commentId: T:SearchAThing.Sci.Line3DSegmentMode
  parent: SearchAThing.Sci
  name: Line3DSegmentMode
  nameWithType: Line3DSegmentMode
  fullName: SearchAThing.Sci.Line3DSegmentMode
- uid: SearchAThing.SciExt.ToLwPolyline*
  commentId: Overload:SearchAThing.SciExt.ToLwPolyline
  name: ToLwPolyline
  nameWithType: SciExt.ToLwPolyline
  fullName: SearchAThing.SciExt.ToLwPolyline
- uid: SearchAThing.SciExt.ToPolyline*
  commentId: Overload:SearchAThing.SciExt.ToPolyline
  name: ToPolyline
  nameWithType: SciExt.ToPolyline
  fullName: SearchAThing.SciExt.ToPolyline
- uid: netDxf.Entities.Polyline
  commentId: '!:netDxf.Entities.Polyline'
  isExternal: true
  name: netDxf.Entities.Polyline
  nameWithType: netDxf.Entities.Polyline
  fullName: netDxf.Entities.Polyline
- uid: SearchAThing.SciExt.Boolean*
  commentId: Overload:SearchAThing.SciExt.Boolean
  name: Boolean
  nameWithType: SciExt.Boolean
  fullName: SearchAThing.SciExt.Boolean
- uid: ClipperLib.ClipType
  commentId: T:ClipperLib.ClipType
  parent: ClipperLib
  name: ClipType
  nameWithType: ClipType
  fullName: ClipperLib.ClipType
- uid: IEnumerable{IEnumerable{SearchAThing.Sci.Vector3D}}
  commentId: '!:IEnumerable{IEnumerable{SearchAThing.Sci.Vector3D}}'
  definition: IEnumerable`1
  name: IEnumerable<IEnumerable<Vector3D>>
  nameWithType: IEnumerable<IEnumerable<Vector3D>>
  fullName: IEnumerable<IEnumerable<SearchAThing.Sci.Vector3D>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of Vector3D))
  fullName.vb: IEnumerable(Of IEnumerable(Of SearchAThing.Sci.Vector3D))
  name.vb: IEnumerable(Of IEnumerable(Of Vector3D))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ClipperLib
  commentId: N:ClipperLib
  name: ClipperLib
  nameWithType: ClipperLib
  fullName: ClipperLib
- uid: SearchAThing.SciExt.ConvexHull2D*
  commentId: Overload:SearchAThing.SciExt.ConvexHull2D
  name: ConvexHull2D
  nameWithType: SciExt.ConvexHull2D
  fullName: SearchAThing.SciExt.ConvexHull2D
- uid: SearchAThing.SciExt.ToCSV*
  commentId: Overload:SearchAThing.SciExt.ToCSV
  name: ToCSV
  nameWithType: SciExt.ToCSV
  fullName: SearchAThing.SciExt.ToCSV
- uid: IEnumerable{System.Object}
  commentId: '!:IEnumerable{System.Object}'
  definition: IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.DistinctKeepOrder*
  commentId: Overload:SearchAThing.SciExt.DistinctKeepOrder
  name: DistinctKeepOrder
  nameWithType: SciExt.DistinctKeepOrder
  fullName: SearchAThing.SciExt.DistinctKeepOrder
- uid: SearchAThing.Sci.Vector3DEqualityComparer
  commentId: T:SearchAThing.Sci.Vector3DEqualityComparer
  parent: SearchAThing.Sci
  name: Vector3DEqualityComparer
  nameWithType: Vector3DEqualityComparer
  fullName: SearchAThing.Sci.Vector3DEqualityComparer
- uid: SearchAThing.SciExt.StringRepresentation*
  commentId: Overload:SearchAThing.SciExt.StringRepresentation
  name: StringRepresentation
  nameWithType: SciExt.StringRepresentation
  fullName: SearchAThing.SciExt.StringRepresentation
- uid: SearchAThing.SciExt.Length*
  commentId: Overload:SearchAThing.SciExt.Length
  name: Length
  nameWithType: SciExt.Length
  fullName: SearchAThing.SciExt.Length
- uid: SearchAThing.SciExt.ToCoordSequence*
  commentId: Overload:SearchAThing.SciExt.ToCoordSequence
  name: ToCoordSequence
  nameWithType: SciExt.ToCoordSequence
  fullName: SearchAThing.SciExt.ToCoordSequence
- uid: SearchAThing.SciExt.ToCoordString2D*
  commentId: Overload:SearchAThing.SciExt.ToCoordString2D
  name: ToCoordString2D
  nameWithType: SciExt.ToCoordString2D
  fullName: SearchAThing.SciExt.ToCoordString2D
- uid: SearchAThing.SciExt.ToCoordString3D*
  commentId: Overload:SearchAThing.SciExt.ToCoordString3D
  name: ToCoordString3D
  nameWithType: SciExt.ToCoordString3D
  fullName: SearchAThing.SciExt.ToCoordString3D
- uid: SearchAThing.SciExt.CadScriptPolyline*
  commentId: Overload:SearchAThing.SciExt.CadScriptPolyline
  name: CadScriptPolyline
  nameWithType: SciExt.CadScriptPolyline
  fullName: SearchAThing.SciExt.CadScriptPolyline
- uid: SearchAThing.SciExt.CadScriptPoint*
  commentId: Overload:SearchAThing.SciExt.CadScriptPoint
  name: CadScriptPoint
  nameWithType: SciExt.CadScriptPoint
  fullName: SearchAThing.SciExt.CadScriptPoint
- uid: SearchAThing.SciExt.Sum*
  commentId: Overload:SearchAThing.SciExt.Sum
  name: Sum
  nameWithType: SciExt.Sum
  fullName: SearchAThing.SciExt.Sum
- uid: SearchAThing.SciExt.Center*
  commentId: Overload:SearchAThing.SciExt.Center
  name: Center
  nameWithType: SciExt.Center
  fullName: SearchAThing.SciExt.Center
- uid: SearchAThing.SciExt.Mean*
  commentId: Overload:SearchAThing.SciExt.Mean
  name: Mean
  nameWithType: SciExt.Mean
  fullName: SearchAThing.SciExt.Mean
- uid: SearchAThing.SciExt.ToVector3D*
  commentId: Overload:SearchAThing.SciExt.ToVector3D
  name: ToVector3D
  nameWithType: SciExt.ToVector3D
  fullName: SearchAThing.SciExt.ToVector3D
- uid: netDxf.Vector2
  isExternal: true
  name: netDxf.Vector2
  nameWithType: netDxf.Vector2
  fullName: netDxf.Vector2
- uid: SearchAThing.SciExt.ToVector2*
  commentId: Overload:SearchAThing.SciExt.ToVector2
  name: ToVector2
  nameWithType: SciExt.ToVector2
  fullName: SearchAThing.SciExt.ToVector2
- uid: SearchAThing.SciExt.ToPoint*
  commentId: Overload:SearchAThing.SciExt.ToPoint
  name: ToPoint
  nameWithType: SciExt.ToPoint
  fullName: SearchAThing.SciExt.ToPoint
- uid: Point
  commentId: '!:Point'
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Point
- uid: SearchAThing.SciExt.ToPsql*
  commentId: Overload:SearchAThing.SciExt.ToPsql
  name: ToPsql
  nameWithType: SciExt.ToPsql
  fullName: SearchAThing.SciExt.ToPsql
- uid: SearchAThing.SciExt.ZapDuplicates*
  commentId: Overload:SearchAThing.SciExt.ZapDuplicates
  name: ZapDuplicates
  nameWithType: SciExt.ZapDuplicates
  fullName: SearchAThing.SciExt.ZapDuplicates
- uid: SearchAThing.SciExt.ClosedPolys2D*
  commentId: Overload:SearchAThing.SciExt.ClosedPolys2D
  name: ClosedPolys2D
  nameWithType: SciExt.ClosedPolys2D
  fullName: SearchAThing.SciExt.ClosedPolys2D
- uid: IEnumerable{IReadOnlyList{SearchAThing.Sci.Vector3D}}
  commentId: '!:IEnumerable{IReadOnlyList{SearchAThing.Sci.Vector3D}}'
  definition: IEnumerable`1
  name: IEnumerable<IReadOnlyList<Vector3D>>
  nameWithType: IEnumerable<IReadOnlyList<Vector3D>>
  fullName: IEnumerable<IReadOnlyList<SearchAThing.Sci.Vector3D>>
  nameWithType.vb: IEnumerable(Of IReadOnlyList(Of Vector3D))
  fullName.vb: IEnumerable(Of IReadOnlyList(Of SearchAThing.Sci.Vector3D))
  name.vb: IEnumerable(Of IReadOnlyList(Of Vector3D))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.ToDxfPoint*
  commentId: Overload:SearchAThing.SciExt.ToDxfPoint
  name: ToDxfPoint
  nameWithType: SciExt.ToDxfPoint
  fullName: SearchAThing.SciExt.ToDxfPoint
- uid: netDxf.Entities.Point
  commentId: '!:netDxf.Entities.Point'
  isExternal: true
  name: netDxf.Entities.Point
  nameWithType: netDxf.Entities.Point
  fullName: netDxf.Entities.Point
- uid: SearchAThing.SciExt.IsLinearIndependent*
  commentId: Overload:SearchAThing.SciExt.IsLinearIndependent
  name: IsLinearIndependent
  nameWithType: SciExt.IsLinearIndependent
  fullName: SearchAThing.SciExt.IsLinearIndependent

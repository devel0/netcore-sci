### YamlMime:ManagedReference
items:
- uid: SearchAThing.Sci.Arc3D
  commentId: T:SearchAThing.Sci.Arc3D
  id: Arc3D
  parent: SearchAThing.Sci
  children:
  - SearchAThing.Sci.Arc3D.#ctor(System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Double,System.Double,System.Double)
  - SearchAThing.Sci.Arc3D.#ctor(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Arc3D.Angle
  - SearchAThing.Sci.Arc3D.AngleEnd
  - SearchAThing.Sci.Arc3D.AngleStart
  - SearchAThing.Sci.Arc3D.BBox(System.Double)
  - SearchAThing.Sci.Arc3D.Bulge(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Arc3D.Center
  - SearchAThing.Sci.Arc3D.CentreOfMass(System.Double@)
  - SearchAThing.Sci.Arc3D.CircleBy3Points(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Arc3D.Contains(System.Double,SearchAThing.Sci.Vector3D,System.Boolean)
  - SearchAThing.Sci.Arc3D.Contains(System.Double,SearchAThing.Sci.Vector3D,System.Boolean,System.Boolean)
  - SearchAThing.Sci.Arc3D.CS
  - SearchAThing.Sci.Arc3D.Divide(System.Int32,System.Boolean)
  - SearchAThing.Sci.Arc3D.DxfEntity
  - SearchAThing.Sci.Arc3D.EqualsTol(System.Double,SearchAThing.Sci.Arc3D)
  - SearchAThing.Sci.Arc3D.From
  - SearchAThing.Sci.Arc3D.GeomFrom
  - SearchAThing.Sci.Arc3D.GeomTo
  - SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  - SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.Line3D,System.Boolean,System.Boolean)
  - SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.Line3D,System.Boolean,System.Boolean,System.Boolean)
  - SearchAThing.Sci.Arc3D.Length
  - SearchAThing.Sci.Arc3D.MidPoint
  - SearchAThing.Sci.Arc3D.Move(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Arc3D.PtAngle(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Arc3D.PtAtAngle(System.Double)
  - SearchAThing.Sci.Arc3D.Radius
  - SearchAThing.Sci.Arc3D.Segment
  - SearchAThing.Sci.Arc3D.Split(System.Double,IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  - SearchAThing.Sci.Arc3D.To
  - SearchAThing.Sci.Arc3D.ToString
  - SearchAThing.Sci.Arc3D.Vertexes
  langs:
  - csharp
  - vb
  name: Arc3D
  nameWithType: Arc3D
  fullName: SearchAThing.Sci.Arc3D
  type: Class
  source:
    id: Arc3D
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 18
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nbase geometry for arc 3d entities\n"
  example: []
  syntax:
    content: 'public class Arc3D : Geometry'
    content.vb: >-
      Public Class Arc3D
          Inherits Geometry
  inheritance:
  - System.Object
  - SearchAThing.Sci.Geometry
  derivedClasses:
  - SearchAThing.Sci.Circle3D
  inheritedMembers:
  - SearchAThing.Sci.Geometry.Type
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SearchAThing.Sci.Arc3D.CS
  commentId: P:SearchAThing.Sci.Arc3D.CS
  id: CS
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: CS
  nameWithType: Arc3D.CS
  fullName: SearchAThing.Sci.Arc3D.CS
  type: Property
  source:
    id: CS
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 26
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncoordinate system centered in arc center\nangle is 0 at X axis\nangle increase rotating right-hand on Z axis\n"
  example: []
  syntax:
    content: public CoordinateSystem3D CS { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.CoordinateSystem3D
    content.vb: Public ReadOnly Property CS As CoordinateSystem3D
  overload: SearchAThing.Sci.Arc3D.CS*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.Radius
  commentId: P:SearchAThing.Sci.Arc3D.Radius
  id: Radius
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Radius
  nameWithType: Arc3D.Radius
  fullName: SearchAThing.Sci.Arc3D.Radius
  type: Property
  source:
    id: Radius
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 31
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nradius of arc\n"
  example: []
  syntax:
    content: public double Radius { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Radius As Double
  overload: SearchAThing.Sci.Arc3D.Radius*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.#ctor(System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Arc3D.#ctor(System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Double,System.Double,System.Double)'
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Arc3D(Double, CoordinateSystem3D, Double, Double, Double)
  nameWithType: Arc3D.Arc3D(Double, CoordinateSystem3D, Double, Double, Double)
  fullName: SearchAThing.Sci.Arc3D.Arc3D(System.Double, SearchAThing.Sci.CoordinateSystem3D, System.Double, System.Double, System.Double)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 43
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconstruct 3d arc\n"
  example: []
  syntax:
    content: public Arc3D(double tol_len, CoordinateSystem3D cs, double r, double angleRadStart, double angleRadEnd)
    parameters:
    - id: tol_len
      type: System.Double
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
      description: coordinate system with origin at arc center, XY plane of cs contains the arc, angle is 0 at cs x-axis and increase right-hand around cs z-axis
    - id: r
      type: System.Double
      description: arc radius
    - id: angleRadStart
      type: System.Double
      description: arc angle start (rad). is not required that start angle less than end. It will normalized 0-2pi
    - id: angleRadEnd
      type: System.Double
      description: arc angle end (rad). is not require that end angle great than start. It will normalized 0-2pi
    content.vb: Public Sub New(tol_len As Double, cs As CoordinateSystem3D, r As Double, angleRadStart As Double, angleRadEnd As Double)
  overload: SearchAThing.Sci.Arc3D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Arc3D.CircleBy3Points(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Arc3D.CircleBy3Points(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: CircleBy3Points(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: CircleBy3Points(Vector3D, Vector3D, Vector3D)
  nameWithType: Arc3D.CircleBy3Points(Vector3D, Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Arc3D.CircleBy3Points(SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: CircleBy3Points
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 60
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nhelper to build circle by given 3 points\n"
  example: []
  syntax:
    content: public static (CoordinateSystem3D CS, double Radius) CircleBy3Points(Vector3D p1, Vector3D p2, Vector3D p3)
    parameters:
    - id: p1
      type: SearchAThing.Sci.Vector3D
      description: first constraint point
    - id: p2
      type: SearchAThing.Sci.Vector3D
      description: second constraint point
    - id: p3
      type: SearchAThing.Sci.Vector3D
      description: third constraint point
    return:
      type: System.ValueTuple{SearchAThing.Sci.CoordinateSystem3D,System.Double}
      description: cs and radius that describe a 3d circle
    content.vb: Public Shared Function CircleBy3Points(p1 As Vector3D, p2 As Vector3D, p3 As Vector3D) As(CS As CoordinateSystem3D, Radius As Double)
  overload: SearchAThing.Sci.Arc3D.CircleBy3Points*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Arc3D.#ctor(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Arc3D.#ctor(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: '#ctor(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)'
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Arc3D(Double, Vector3D, Vector3D, Vector3D, Vector3D)
  nameWithType: Arc3D.Arc3D(Double, Vector3D, Vector3D, Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Arc3D.Arc3D(System.Double, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 105
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nBuild arc by 3 given points\n( the inside CS will centered in the arc center and Xaxis toward p1 )\n"
  example: []
  syntax:
    content: public Arc3D(double tol_len, Vector3D p1, Vector3D p2, Vector3D p3, Vector3D normal = null)
    parameters:
    - id: tol_len
      type: System.Double
    - id: p1
      type: SearchAThing.Sci.Vector3D
    - id: p2
      type: SearchAThing.Sci.Vector3D
    - id: p3
      type: SearchAThing.Sci.Vector3D
    - id: normal
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Sub New(tol_len As Double, p1 As Vector3D, p2 As Vector3D, p3 As Vector3D, normal As Vector3D = Nothing)
  overload: SearchAThing.Sci.Arc3D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Arc3D.Move(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Arc3D.Move(System.Double,SearchAThing.Sci.Vector3D)
  id: Move(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Move(Double, Vector3D)
  nameWithType: Arc3D.Move(Double, Vector3D)
  fullName: SearchAThing.Sci.Arc3D.Move(System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: Move
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 133
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncreate an arc copy with origin moved\n"
  example: []
  syntax:
    content: public Arc3D Move(double tol_len, Vector3D delta)
    parameters:
    - id: tol_len
      type: System.Double
    - id: delta
      type: SearchAThing.Sci.Vector3D
      description: new arc origin delta
    return:
      type: SearchAThing.Sci.Arc3D
    content.vb: Public Function Move(tol_len As Double, delta As Vector3D) As Arc3D
  overload: SearchAThing.Sci.Arc3D.Move*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Arc3D.AngleStart
  commentId: P:SearchAThing.Sci.Arc3D.AngleStart
  id: AngleStart
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: AngleStart
  nameWithType: Arc3D.AngleStart
  fullName: SearchAThing.Sci.Arc3D.AngleStart
  type: Property
  source:
    id: AngleStart
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 142
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstart angle (rad) [0-2pi) respect cs xaxis rotating around cs zaxis\nnote that start angle can be greather than end angle\n"
  example: []
  syntax:
    content: public double AngleStart { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property AngleStart As Double
  overload: SearchAThing.Sci.Arc3D.AngleStart*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.AngleEnd
  commentId: P:SearchAThing.Sci.Arc3D.AngleEnd
  id: AngleEnd
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: AngleEnd
  nameWithType: Arc3D.AngleEnd
  fullName: SearchAThing.Sci.Arc3D.AngleEnd
  type: Property
  source:
    id: AngleEnd
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 148
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nend angle (rad) [0-2pi) respect cs xaxis rotating around cs zaxis\nnote that start angle can be greather than end angle\n"
  example: []
  syntax:
    content: public double AngleEnd { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property AngleEnd As Double
  overload: SearchAThing.Sci.Arc3D.AngleEnd*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.Angle
  commentId: P:SearchAThing.Sci.Arc3D.Angle
  id: Angle
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Angle
  nameWithType: Arc3D.Angle
  fullName: SearchAThing.Sci.Arc3D.Angle
  type: Property
  source:
    id: Angle
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 154
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nArc (rad) angle length.\nangle between start-end or end-start depending on what start is less than end or not\n"
  example: []
  syntax:
    content: public double Angle { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Angle As Double
  overload: SearchAThing.Sci.Arc3D.Angle*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.Length
  commentId: P:SearchAThing.Sci.Arc3D.Length
  id: Length
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Arc3D.Length
  fullName: SearchAThing.Sci.Arc3D.Length
  type: Property
  source:
    id: Length
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 165
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nLength of Arc from start to end\n"
  example: []
  syntax:
    content: public override double Length { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Overrides ReadOnly Property Length As Double
  overridden: SearchAThing.Sci.Geometry.Length
  overload: SearchAThing.Sci.Arc3D.Length*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.GeomFrom
  commentId: P:SearchAThing.Sci.Arc3D.GeomFrom
  id: GeomFrom
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: GeomFrom
  nameWithType: Arc3D.GeomFrom
  fullName: SearchAThing.Sci.Arc3D.GeomFrom
  type: Property
  source:
    id: GeomFrom
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 173
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public override Vector3D GeomFrom { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Overrides ReadOnly Property GeomFrom As Vector3D
  overridden: SearchAThing.Sci.Geometry.GeomFrom
  overload: SearchAThing.Sci.Arc3D.GeomFrom*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.GeomTo
  commentId: P:SearchAThing.Sci.Arc3D.GeomTo
  id: GeomTo
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: GeomTo
  nameWithType: Arc3D.GeomTo
  fullName: SearchAThing.Sci.Arc3D.GeomTo
  type: Property
  source:
    id: GeomTo
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 175
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public override Vector3D GeomTo { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Overrides ReadOnly Property GeomTo As Vector3D
  overridden: SearchAThing.Sci.Geometry.GeomTo
  overload: SearchAThing.Sci.Arc3D.GeomTo*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.PtAtAngle(System.Double)
  commentId: M:SearchAThing.Sci.Arc3D.PtAtAngle(System.Double)
  id: PtAtAngle(System.Double)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: PtAtAngle(Double)
  nameWithType: Arc3D.PtAtAngle(Double)
  fullName: SearchAThing.Sci.Arc3D.PtAtAngle(System.Double)
  type: Method
  source:
    id: PtAtAngle
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 181
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\npoint on the arc circumnfere at given angle (rotating cs basex around cs basez)\nnote: it start\n"
  example: []
  syntax:
    content: public Vector3D PtAtAngle(double angleRad)
    parameters:
    - id: angleRad
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function PtAtAngle(angleRad As Double) As Vector3D
  overload: SearchAThing.Sci.Arc3D.PtAtAngle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Arc3D.MidPoint
  commentId: P:SearchAThing.Sci.Arc3D.MidPoint
  id: MidPoint
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: MidPoint
  nameWithType: Arc3D.MidPoint
  fullName: SearchAThing.Sci.Arc3D.MidPoint
  type: Property
  source:
    id: MidPoint
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 189
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nmid point eval as arc point at angle start + arc angle/2\n"
  example: []
  syntax:
    content: public Vector3D MidPoint { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public ReadOnly Property MidPoint As Vector3D
  overload: SearchAThing.Sci.Arc3D.MidPoint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.PtAngle(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Arc3D.PtAngle(System.Double,SearchAThing.Sci.Vector3D)
  id: PtAngle(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: PtAngle(Double, Vector3D)
  nameWithType: Arc3D.PtAngle(Double, Vector3D)
  fullName: SearchAThing.Sci.Arc3D.PtAngle(System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: PtAngle
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 201
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nreturn the angle (rad) of the point respect cs x axis rotating around cs z axis\nto reach given point angle alignment\n"
  example: []
  syntax:
    content: public double PtAngle(double tolLen, Vector3D pt)
    parameters:
    - id: tolLen
      type: System.Double
    - id: pt
      type: SearchAThing.Sci.Vector3D
    return:
      type: System.Double
    content.vb: Public Function PtAngle(tolLen As Double, pt As Vector3D) As Double
  overload: SearchAThing.Sci.Arc3D.PtAngle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Arc3D.From
  commentId: P:SearchAThing.Sci.Arc3D.From
  id: From
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: From
  nameWithType: Arc3D.From
  fullName: SearchAThing.Sci.Arc3D.From
  type: Property
  source:
    id: From
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 212
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\npoint at angle start\n"
  example: []
  syntax:
    content: public Vector3D From { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public ReadOnly Property From As Vector3D
  overload: SearchAThing.Sci.Arc3D.From*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.To
  commentId: P:SearchAThing.Sci.Arc3D.To
  id: To
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: To
  nameWithType: Arc3D.To
  fullName: SearchAThing.Sci.Arc3D.To
  type: Property
  source:
    id: To
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 217
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\npoint at angle end\n"
  example: []
  syntax:
    content: public Vector3D To { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public ReadOnly Property To As Vector3D
  overload: SearchAThing.Sci.Arc3D.To*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.Segment
  commentId: P:SearchAThing.Sci.Arc3D.Segment
  id: Segment
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Segment
  nameWithType: Arc3D.Segment
  fullName: SearchAThing.Sci.Arc3D.Segment
  type: Property
  source:
    id: Segment
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 222
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nreturn From,To segment\n"
  example: []
  syntax:
    content: public Line3D Segment { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Line3D
    content.vb: Public ReadOnly Property Segment As Line3D
  overload: SearchAThing.Sci.Arc3D.Segment*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.Vertexes
  commentId: P:SearchAThing.Sci.Arc3D.Vertexes
  id: Vertexes
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Vertexes
  nameWithType: Arc3D.Vertexes
  fullName: SearchAThing.Sci.Arc3D.Vertexes
  type: Property
  source:
    id: Vertexes
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 224
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public override IEnumerable<Vector3D> Vertexes { get; }
    parameters: []
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Overrides ReadOnly Property Vertexes As IEnumerable(Of Vector3D)
  overridden: SearchAThing.Sci.Geometry.Vertexes
  overload: SearchAThing.Sci.Arc3D.Vertexes*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.EqualsTol(System.Double,SearchAThing.Sci.Arc3D)
  commentId: M:SearchAThing.Sci.Arc3D.EqualsTol(System.Double,SearchAThing.Sci.Arc3D)
  id: EqualsTol(System.Double,SearchAThing.Sci.Arc3D)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: EqualsTol(Double, Arc3D)
  nameWithType: Arc3D.EqualsTol(Double, Arc3D)
  fullName: SearchAThing.Sci.Arc3D.EqualsTol(System.Double, SearchAThing.Sci.Arc3D)
  type: Method
  source:
    id: EqualsTol
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 236
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nChecks if two arcs are equals ( it checks agains swapped from-to too )\n"
  example: []
  syntax:
    content: public bool EqualsTol(double tolLen, Arc3D other)
    parameters:
    - id: tolLen
      type: System.Double
    - id: other
      type: SearchAThing.Sci.Arc3D
    return:
      type: System.Boolean
    content.vb: Public Function EqualsTol(tolLen As Double, other As Arc3D) As Boolean
  overload: SearchAThing.Sci.Arc3D.EqualsTol*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Arc3D.Bulge(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Arc3D.Bulge(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: Bulge(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Bulge(Double, Vector3D, Vector3D, Vector3D)
  nameWithType: Arc3D.Bulge(Double, Vector3D, Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Arc3D.Bulge(System.Double, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: Bulge
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 247
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nhttp://www.lee-mac.com/bulgeconversion.html\n"
  example: []
  syntax:
    content: public double Bulge(double tolLen, Vector3D from, Vector3D to, Vector3D N)
    parameters:
    - id: tolLen
      type: System.Double
    - id: from
      type: SearchAThing.Sci.Vector3D
    - id: to
      type: SearchAThing.Sci.Vector3D
    - id: N
      type: SearchAThing.Sci.Vector3D
    return:
      type: System.Double
    content.vb: Public Function Bulge(tolLen As Double, from As Vector3D, to As Vector3D, N As Vector3D) As Double
  overload: SearchAThing.Sci.Arc3D.Bulge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Arc3D.Contains(System.Double,SearchAThing.Sci.Vector3D,System.Boolean,System.Boolean)
  commentId: M:SearchAThing.Sci.Arc3D.Contains(System.Double,SearchAThing.Sci.Vector3D,System.Boolean,System.Boolean)
  id: Contains(System.Double,SearchAThing.Sci.Vector3D,System.Boolean,System.Boolean)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Contains(Double, Vector3D, Boolean, Boolean)
  nameWithType: Arc3D.Contains(Double, Vector3D, Boolean, Boolean)
  fullName: SearchAThing.Sci.Arc3D.Contains(System.Double, SearchAThing.Sci.Vector3D, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Contains
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 267
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstatis if given point contained in arc perimeter/shape or circle perimeter/shape depending on specified mode\n"
  example: []
  syntax:
    content: protected bool Contains(double tol_len, Vector3D pt, bool inArcAngleRange, bool onlyPerimeter)
    parameters:
    - id: tol_len
      type: System.Double
      description: len tolerance
    - id: pt
      type: SearchAThing.Sci.Vector3D
      description: point to test
    - id: inArcAngleRange
      type: System.Boolean
      description: true if point angle must contained in arc angles, false to test like a circle
    - id: onlyPerimeter
      type: System.Boolean
      description: true to test point contained only in perimeter, false to test also contained in area
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function Contains(tol_len As Double, pt As Vector3D, inArcAngleRange As Boolean, onlyPerimeter As Boolean) As Boolean
  overload: SearchAThing.Sci.Arc3D.Contains*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SearchAThing.Sci.Arc3D.Contains(System.Double,SearchAThing.Sci.Vector3D,System.Boolean)
  commentId: M:SearchAThing.Sci.Arc3D.Contains(System.Double,SearchAThing.Sci.Vector3D,System.Boolean)
  id: Contains(System.Double,SearchAThing.Sci.Vector3D,System.Boolean)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Contains(Double, Vector3D, Boolean)
  nameWithType: Arc3D.Contains(Double, Vector3D, Boolean)
  fullName: SearchAThing.Sci.Arc3D.Contains(System.Double, SearchAThing.Sci.Vector3D, System.Boolean)
  type: Method
  source:
    id: Contains
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 293
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstates if given point relies on this arc perimeter or shape depending on arguments\n"
  example: []
  syntax:
    content: public virtual bool Contains(double tol, Vector3D pt, bool onlyPerimeter)
    parameters:
    - id: tol
      type: System.Double
      description: length tolerance
    - id: pt
      type: SearchAThing.Sci.Vector3D
      description: point to check
    - id: onlyPerimeter
      type: System.Boolean
      description: if true it checks if point is on perimeter; if false it will check in area too
    return:
      type: System.Boolean
    content.vb: Public Overridable Function Contains(tol As Double, pt As Vector3D, onlyPerimeter As Boolean) As Boolean
  overload: SearchAThing.Sci.Arc3D.Contains*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SearchAThing.Sci.Arc3D.Center
  commentId: P:SearchAThing.Sci.Arc3D.Center
  id: Center
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: Arc3D.Center
  fullName: SearchAThing.Sci.Arc3D.Center
  type: Property
  source:
    id: Center
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 296
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public Vector3D Center { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public ReadOnly Property Center As Vector3D
  overload: SearchAThing.Sci.Arc3D.Center*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.CentreOfMass(System.Double@)
  commentId: M:SearchAThing.Sci.Arc3D.CentreOfMass(System.Double@)
  id: CentreOfMass(System.Double@)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: CentreOfMass(out Double)
  nameWithType: Arc3D.CentreOfMass(out Double)
  fullName: SearchAThing.Sci.Arc3D.CentreOfMass(out System.Double)
  type: Method
  source:
    id: CentreOfMass
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 301
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncentre of mass of circular segment\n"
  example: []
  syntax:
    content: public Vector3D CentreOfMass(out double A)
    parameters:
    - id: A
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function CentreOfMass(ByRef A As Double) As Vector3D
  overload: SearchAThing.Sci.Arc3D.CentreOfMass*
  nameWithType.vb: Arc3D.CentreOfMass(ByRef Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.Arc3D.CentreOfMass(ByRef System.Double)
  name.vb: CentreOfMass(ByRef Double)
- uid: SearchAThing.Sci.Arc3D.DxfEntity
  commentId: P:SearchAThing.Sci.Arc3D.DxfEntity
  id: DxfEntity
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: DxfEntity
  nameWithType: Arc3D.DxfEntity
  fullName: SearchAThing.Sci.Arc3D.DxfEntity
  type: Property
  source:
    id: DxfEntity
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 313
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public override EntityObject DxfEntity { get; }
    parameters: []
    return:
      type: EntityObject
    content.vb: Public Overrides ReadOnly Property DxfEntity As EntityObject
  overridden: SearchAThing.Sci.Geometry.DxfEntity
  overload: SearchAThing.Sci.Arc3D.DxfEntity*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Arc3D.BBox(System.Double)
  commentId: M:SearchAThing.Sci.Arc3D.BBox(System.Double)
  id: BBox(System.Double)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: BBox(Double)
  nameWithType: Arc3D.BBox(Double)
  fullName: SearchAThing.Sci.Arc3D.BBox(System.Double)
  type: Method
  source:
    id: BBox
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 365
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncompute wcs bbox executing a recursive bisect search of min and max\n"
  example: []
  syntax:
    content: public override BBox3D BBox(double tol_len)
    parameters:
    - id: tol_len
      type: System.Double
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: Public Overrides Function BBox(tol_len As Double) As BBox3D
  overridden: SearchAThing.Sci.Geometry.BBox(System.Double)
  overload: SearchAThing.Sci.Arc3D.BBox*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.Line3D,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.Line3D,System.Boolean,System.Boolean,System.Boolean)
  id: Intersect(System.Double,SearchAThing.Sci.Line3D,System.Boolean,System.Boolean,System.Boolean)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Intersect(Double, Line3D, Boolean, Boolean, Boolean)
  nameWithType: Arc3D.Intersect(Double, Line3D, Boolean, Boolean, Boolean)
  fullName: SearchAThing.Sci.Arc3D.Intersect(System.Double, SearchAThing.Sci.Line3D, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Intersect
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 433
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstates if this arc intersect given line\n"
  example: []
  syntax:
    content: protected IEnumerable<Vector3D> Intersect(double tol, Line3D l, bool only_perimeter, bool segment_mode, bool circle_mode)
    parameters:
    - id: tol
      type: System.Double
      description: arc tolerance
    - id: l
      type: SearchAThing.Sci.Line3D
      description: line to test intersect
    - id: only_perimeter
      type: System.Boolean
    - id: segment_mode
      type: System.Boolean
      description: if true line treat as segment instead of infinite
    - id: circle_mode
      type: System.Boolean
      description: if true arc treat as circle
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Protected Function Intersect(tol As Double, l As Line3D, only_perimeter As Boolean, segment_mode As Boolean, circle_mode As Boolean) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Arc3D.Intersect*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.Line3D,System.Boolean,System.Boolean)
  commentId: M:SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.Line3D,System.Boolean,System.Boolean)
  id: Intersect(System.Double,SearchAThing.Sci.Line3D,System.Boolean,System.Boolean)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Intersect(Double, Line3D, Boolean, Boolean)
  nameWithType: Arc3D.Intersect(Double, Line3D, Boolean, Boolean)
  fullName: SearchAThing.Sci.Arc3D.Intersect(System.Double, SearchAThing.Sci.Line3D, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Intersect
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 478
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nfind ips of intersection between this arc and given line\n"
  example: []
  syntax:
    content: public virtual IEnumerable<Vector3D> Intersect(double tol, Line3D l, bool only_perimeter = true, bool segment_mode = false)
    parameters:
    - id: tol
      type: System.Double
      description: length tolerance
    - id: l
      type: SearchAThing.Sci.Line3D
      description: line
    - id: only_perimeter
      type: System.Boolean
      description: check intersection only along perimeter; if false it will check intersection along arc area shape border too
    - id: segment_mode
      type: System.Boolean
      description: if true treat given line as segment; if false as infinite line
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
      description: intersection points between this arc and given line
    content.vb: Public Overridable Function Intersect(tol As Double, l As Line3D, only_perimeter As Boolean = True, segment_mode As Boolean = False) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Arc3D.Intersect*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  commentId: M:SearchAThing.Sci.Arc3D.Intersect(System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  id: Intersect(System.Double,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Intersect(Double, CoordinateSystem3D, Boolean)
  nameWithType: Arc3D.Intersect(Double, CoordinateSystem3D, Boolean)
  fullName: SearchAThing.Sci.Arc3D.Intersect(System.Double, SearchAThing.Sci.CoordinateSystem3D, System.Boolean)
  type: Method
  source:
    id: Intersect
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 499
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nfind ips of intersect this arc to the given cs plane; \nreturn empty set if arc cs plane parallel to other given cs\n"
  remarks: "\n[unit test](/test/Arc3D/Arc3DTest_0001.cs)\n![](/test/Arc3D/Arc3DTest_0001.png)\n"
  example: []
  syntax:
    content: public IEnumerable<Vector3D> Intersect(double tol, CoordinateSystem3D cs, bool only_perimeter = true)
    parameters:
    - id: tol
      type: System.Double
      description: len tolerance
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
      description: cs xy plane
    - id: only_perimeter
      type: System.Boolean
      description: if false it will check in the arc area too, otherwise only on arc perimeter
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
      description: sample
    content.vb: Public Function Intersect(tol As Double, cs As CoordinateSystem3D, only_perimeter As Boolean = True) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Arc3D.Intersect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Arc3D.ToString
  commentId: M:SearchAThing.Sci.Arc3D.ToString
  id: ToString
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Arc3D.ToString()
  fullName: SearchAThing.Sci.Arc3D.ToString()
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 513
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SearchAThing.Sci.Arc3D.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SearchAThing.Sci.Arc3D.Divide(System.Int32,System.Boolean)
  commentId: M:SearchAThing.Sci.Arc3D.Divide(System.Int32,System.Boolean)
  id: Divide(System.Int32,System.Boolean)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Divide(Int32, Boolean)
  nameWithType: Arc3D.Divide(Int32, Boolean)
  fullName: SearchAThing.Sci.Arc3D.Divide(System.Int32, System.Boolean)
  type: Method
  source:
    id: Divide
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 524
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nsplit arc into pieces and retrieve split points\n"
  example: []
  syntax:
    content: public override IEnumerable<Vector3D> Divide(int cnt, bool include_endpoints = false)
    parameters:
    - id: cnt
      type: System.Int32
      description: nr of piece
    - id: include_endpoints
      type: System.Boolean
      description: if true returns also boundary points
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Overrides Function Divide(cnt As Integer, include_endpoints As Boolean = False) As IEnumerable(Of Vector3D)
  overridden: SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
  overload: SearchAThing.Sci.Arc3D.Divide*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SearchAThing.Sci.Arc3D.Split(System.Double,IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  commentId: M:SearchAThing.Sci.Arc3D.Split(System.Double,IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  id: Split(System.Double,IEnumerable{SearchAThing.Sci.Vector3D},System.Boolean)
  parent: SearchAThing.Sci.Arc3D
  langs:
  - csharp
  - vb
  name: Split(Double, IEnumerable<Vector3D>, Boolean)
  nameWithType: Arc3D.Split(Double, IEnumerable<Vector3D>, Boolean)
  fullName: SearchAThing.Sci.Arc3D.Split(System.Double, IEnumerable<SearchAThing.Sci.Vector3D>, System.Boolean)
  type: Method
  source:
    id: Split
    path: Z:\netcore-sci\netcore-sci\Arc3D.cs
    startLine: 554
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncreate a set of subarc from this by splitting through given split points\nsplit point are not required to be on perimeter of the arc ( a center arc to point line will split )\ngenerated subarcs will start from this arc angleFrom and contiguosly end to angleTo\n"
  example: []
  syntax:
    content: public IEnumerable<Arc3D> Split(double tol_len, IEnumerable<Vector3D> _splitPts, bool validate_pts = false)
    parameters:
    - id: tol_len
      type: System.Double
      description: arc length tolerance
    - id: _splitPts
      type: IEnumerable{SearchAThing.Sci.Vector3D}
      description: point where split arc
    - id: validate_pts
      type: System.Boolean
      description: if true split only for split points on arc perimeter
    return:
      type: IEnumerable{SearchAThing.Sci.Arc3D}
    content.vb: Public Function Split(tol_len As Double, _splitPts As IEnumerable(Of Vector3D), validate_pts As Boolean = False) As IEnumerable(Of Arc3D)
  overload: SearchAThing.Sci.Arc3D.Split*
  nameWithType.vb: Arc3D.Split(Double, IEnumerable(Of Vector3D), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.Arc3D.Split(System.Double, IEnumerable(Of SearchAThing.Sci.Vector3D), System.Boolean)
  name.vb: Split(Double, IEnumerable(Of Vector3D), Boolean)
references:
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.Sci.Geometry
  commentId: T:SearchAThing.Sci.Geometry
  parent: SearchAThing.Sci
  name: Geometry
  nameWithType: Geometry
  fullName: SearchAThing.Sci.Geometry
- uid: SearchAThing.Sci.Geometry.Type
  commentId: P:SearchAThing.Sci.Geometry.Type
  parent: SearchAThing.Sci.Geometry
  name: Type
  nameWithType: Geometry.Type
  fullName: SearchAThing.Sci.Geometry.Type
- uid: SearchAThing.Sci.Arc3D.CS*
  commentId: Overload:SearchAThing.Sci.Arc3D.CS
  name: CS
  nameWithType: Arc3D.CS
  fullName: SearchAThing.Sci.Arc3D.CS
- uid: SearchAThing.Sci.CoordinateSystem3D
  commentId: T:SearchAThing.Sci.CoordinateSystem3D
  parent: SearchAThing.Sci
  name: CoordinateSystem3D
  nameWithType: CoordinateSystem3D
  fullName: SearchAThing.Sci.CoordinateSystem3D
- uid: SearchAThing.Sci.Arc3D.Radius*
  commentId: Overload:SearchAThing.Sci.Arc3D.Radius
  name: Radius
  nameWithType: Arc3D.Radius
  fullName: SearchAThing.Sci.Arc3D.Radius
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SearchAThing.Sci.Arc3D.#ctor*
  commentId: Overload:SearchAThing.Sci.Arc3D.#ctor
  name: Arc3D
  nameWithType: Arc3D.Arc3D
  fullName: SearchAThing.Sci.Arc3D.Arc3D
- uid: SearchAThing.Sci.Arc3D.CircleBy3Points*
  commentId: Overload:SearchAThing.Sci.Arc3D.CircleBy3Points
  name: CircleBy3Points
  nameWithType: Arc3D.CircleBy3Points
  fullName: SearchAThing.Sci.Arc3D.CircleBy3Points
- uid: SearchAThing.Sci.Vector3D
  commentId: T:SearchAThing.Sci.Vector3D
  parent: SearchAThing.Sci
  name: Vector3D
  nameWithType: Vector3D
  fullName: SearchAThing.Sci.Vector3D
- uid: System.ValueTuple{SearchAThing.Sci.CoordinateSystem3D,System.Double}
  commentId: T:System.ValueTuple{SearchAThing.Sci.CoordinateSystem3D,System.Double}
  parent: System
  isExternal: true
  name: ValueTuple<CoordinateSystem3D, Double>
  nameWithType: ValueTuple<CoordinateSystem3D, Double>
  fullName: System.ValueTuple<SearchAThing.Sci.CoordinateSystem3D, System.Double>
  nameWithType.vb: ValueTuple(Of CoordinateSystem3D, Double)
  fullName.vb: System.ValueTuple(Of SearchAThing.Sci.CoordinateSystem3D, System.Double)
  name.vb: ValueTuple(Of CoordinateSystem3D, Double)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.CoordinateSystem3D
    name: CoordinateSystem3D
    nameWithType: CoordinateSystem3D
    fullName: SearchAThing.Sci.CoordinateSystem3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.CoordinateSystem3D
    name: CoordinateSystem3D
    nameWithType: CoordinateSystem3D
    fullName: SearchAThing.Sci.CoordinateSystem3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SearchAThing.Sci.Arc3D.Move*
  commentId: Overload:SearchAThing.Sci.Arc3D.Move
  name: Move
  nameWithType: Arc3D.Move
  fullName: SearchAThing.Sci.Arc3D.Move
- uid: SearchAThing.Sci.Arc3D
  commentId: T:SearchAThing.Sci.Arc3D
  parent: SearchAThing.Sci
  name: Arc3D
  nameWithType: Arc3D
  fullName: SearchAThing.Sci.Arc3D
- uid: SearchAThing.Sci.Arc3D.AngleStart*
  commentId: Overload:SearchAThing.Sci.Arc3D.AngleStart
  name: AngleStart
  nameWithType: Arc3D.AngleStart
  fullName: SearchAThing.Sci.Arc3D.AngleStart
- uid: SearchAThing.Sci.Arc3D.AngleEnd*
  commentId: Overload:SearchAThing.Sci.Arc3D.AngleEnd
  name: AngleEnd
  nameWithType: Arc3D.AngleEnd
  fullName: SearchAThing.Sci.Arc3D.AngleEnd
- uid: SearchAThing.Sci.Arc3D.Angle*
  commentId: Overload:SearchAThing.Sci.Arc3D.Angle
  name: Angle
  nameWithType: Arc3D.Angle
  fullName: SearchAThing.Sci.Arc3D.Angle
- uid: SearchAThing.Sci.Geometry.Length
  commentId: P:SearchAThing.Sci.Geometry.Length
  parent: SearchAThing.Sci.Geometry
  name: Length
  nameWithType: Geometry.Length
  fullName: SearchAThing.Sci.Geometry.Length
- uid: SearchAThing.Sci.Arc3D.Length*
  commentId: Overload:SearchAThing.Sci.Arc3D.Length
  name: Length
  nameWithType: Arc3D.Length
  fullName: SearchAThing.Sci.Arc3D.Length
- uid: SearchAThing.Sci.Geometry.GeomFrom
  commentId: P:SearchAThing.Sci.Geometry.GeomFrom
  parent: SearchAThing.Sci.Geometry
  name: GeomFrom
  nameWithType: Geometry.GeomFrom
  fullName: SearchAThing.Sci.Geometry.GeomFrom
- uid: SearchAThing.Sci.Arc3D.GeomFrom*
  commentId: Overload:SearchAThing.Sci.Arc3D.GeomFrom
  name: GeomFrom
  nameWithType: Arc3D.GeomFrom
  fullName: SearchAThing.Sci.Arc3D.GeomFrom
- uid: SearchAThing.Sci.Geometry.GeomTo
  commentId: P:SearchAThing.Sci.Geometry.GeomTo
  parent: SearchAThing.Sci.Geometry
  name: GeomTo
  nameWithType: Geometry.GeomTo
  fullName: SearchAThing.Sci.Geometry.GeomTo
- uid: SearchAThing.Sci.Arc3D.GeomTo*
  commentId: Overload:SearchAThing.Sci.Arc3D.GeomTo
  name: GeomTo
  nameWithType: Arc3D.GeomTo
  fullName: SearchAThing.Sci.Arc3D.GeomTo
- uid: SearchAThing.Sci.Arc3D.PtAtAngle*
  commentId: Overload:SearchAThing.Sci.Arc3D.PtAtAngle
  name: PtAtAngle
  nameWithType: Arc3D.PtAtAngle
  fullName: SearchAThing.Sci.Arc3D.PtAtAngle
- uid: SearchAThing.Sci.Arc3D.MidPoint*
  commentId: Overload:SearchAThing.Sci.Arc3D.MidPoint
  name: MidPoint
  nameWithType: Arc3D.MidPoint
  fullName: SearchAThing.Sci.Arc3D.MidPoint
- uid: SearchAThing.Sci.Arc3D.PtAngle*
  commentId: Overload:SearchAThing.Sci.Arc3D.PtAngle
  name: PtAngle
  nameWithType: Arc3D.PtAngle
  fullName: SearchAThing.Sci.Arc3D.PtAngle
- uid: SearchAThing.Sci.Arc3D.From*
  commentId: Overload:SearchAThing.Sci.Arc3D.From
  name: From
  nameWithType: Arc3D.From
  fullName: SearchAThing.Sci.Arc3D.From
- uid: SearchAThing.Sci.Arc3D.To*
  commentId: Overload:SearchAThing.Sci.Arc3D.To
  name: To
  nameWithType: Arc3D.To
  fullName: SearchAThing.Sci.Arc3D.To
- uid: SearchAThing.Sci.Arc3D.Segment*
  commentId: Overload:SearchAThing.Sci.Arc3D.Segment
  name: Segment
  nameWithType: Arc3D.Segment
  fullName: SearchAThing.Sci.Arc3D.Segment
- uid: SearchAThing.Sci.Line3D
  commentId: T:SearchAThing.Sci.Line3D
  parent: SearchAThing.Sci
  name: Line3D
  nameWithType: Line3D
  fullName: SearchAThing.Sci.Line3D
- uid: SearchAThing.Sci.Geometry.Vertexes
  commentId: P:SearchAThing.Sci.Geometry.Vertexes
  parent: SearchAThing.Sci.Geometry
  name: Vertexes
  nameWithType: Geometry.Vertexes
  fullName: SearchAThing.Sci.Geometry.Vertexes
- uid: SearchAThing.Sci.Arc3D.Vertexes*
  commentId: Overload:SearchAThing.Sci.Arc3D.Vertexes
  name: Vertexes
  nameWithType: Arc3D.Vertexes
  fullName: SearchAThing.Sci.Arc3D.Vertexes
- uid: IEnumerable{SearchAThing.Sci.Vector3D}
  commentId: '!:IEnumerable{SearchAThing.Sci.Vector3D}'
  definition: IEnumerable`1
  name: IEnumerable<Vector3D>
  nameWithType: IEnumerable<Vector3D>
  fullName: IEnumerable<SearchAThing.Sci.Vector3D>
  nameWithType.vb: IEnumerable(Of Vector3D)
  fullName.vb: IEnumerable(Of SearchAThing.Sci.Vector3D)
  name.vb: IEnumerable(Of Vector3D)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Arc3D.EqualsTol*
  commentId: Overload:SearchAThing.Sci.Arc3D.EqualsTol
  name: EqualsTol
  nameWithType: Arc3D.EqualsTol
  fullName: SearchAThing.Sci.Arc3D.EqualsTol
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SearchAThing.Sci.Arc3D.Bulge*
  commentId: Overload:SearchAThing.Sci.Arc3D.Bulge
  name: Bulge
  nameWithType: Arc3D.Bulge
  fullName: SearchAThing.Sci.Arc3D.Bulge
- uid: SearchAThing.Sci.Arc3D.Contains*
  commentId: Overload:SearchAThing.Sci.Arc3D.Contains
  name: Contains
  nameWithType: Arc3D.Contains
  fullName: SearchAThing.Sci.Arc3D.Contains
- uid: SearchAThing.Sci.Arc3D.Center*
  commentId: Overload:SearchAThing.Sci.Arc3D.Center
  name: Center
  nameWithType: Arc3D.Center
  fullName: SearchAThing.Sci.Arc3D.Center
- uid: SearchAThing.Sci.Arc3D.CentreOfMass*
  commentId: Overload:SearchAThing.Sci.Arc3D.CentreOfMass
  name: CentreOfMass
  nameWithType: Arc3D.CentreOfMass
  fullName: SearchAThing.Sci.Arc3D.CentreOfMass
- uid: SearchAThing.Sci.Geometry.DxfEntity
  commentId: P:SearchAThing.Sci.Geometry.DxfEntity
  parent: SearchAThing.Sci.Geometry
  name: DxfEntity
  nameWithType: Geometry.DxfEntity
  fullName: SearchAThing.Sci.Geometry.DxfEntity
- uid: SearchAThing.Sci.Arc3D.DxfEntity*
  commentId: Overload:SearchAThing.Sci.Arc3D.DxfEntity
  name: DxfEntity
  nameWithType: Arc3D.DxfEntity
  fullName: SearchAThing.Sci.Arc3D.DxfEntity
- uid: EntityObject
  isExternal: true
  name: EntityObject
  nameWithType: EntityObject
  fullName: EntityObject
- uid: SearchAThing.Sci.Geometry.BBox(System.Double)
  commentId: M:SearchAThing.Sci.Geometry.BBox(System.Double)
  parent: SearchAThing.Sci.Geometry
  isExternal: true
  name: BBox(Double)
  nameWithType: Geometry.BBox(Double)
  fullName: SearchAThing.Sci.Geometry.BBox(System.Double)
  spec.csharp:
  - uid: SearchAThing.Sci.Geometry.BBox(System.Double)
    name: BBox
    nameWithType: Geometry.BBox
    fullName: SearchAThing.Sci.Geometry.BBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.Sci.Geometry.BBox(System.Double)
    name: BBox
    nameWithType: Geometry.BBox
    fullName: SearchAThing.Sci.Geometry.BBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Arc3D.BBox*
  commentId: Overload:SearchAThing.Sci.Arc3D.BBox
  name: BBox
  nameWithType: Arc3D.BBox
  fullName: SearchAThing.Sci.Arc3D.BBox
- uid: SearchAThing.Sci.BBox3D
  commentId: T:SearchAThing.Sci.BBox3D
  parent: SearchAThing.Sci
  name: BBox3D
  nameWithType: BBox3D
  fullName: SearchAThing.Sci.BBox3D
- uid: SearchAThing.Sci.Arc3D.Intersect*
  commentId: Overload:SearchAThing.Sci.Arc3D.Intersect
  name: Intersect
  nameWithType: Arc3D.Intersect
  fullName: SearchAThing.Sci.Arc3D.Intersect
- uid: SearchAThing.Sci.Arc3D.ToString*
  commentId: Overload:SearchAThing.Sci.Arc3D.ToString
  name: ToString
  nameWithType: Arc3D.ToString
  fullName: SearchAThing.Sci.Arc3D.ToString
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
  commentId: M:SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
  parent: SearchAThing.Sci.Geometry
  isExternal: true
  name: Divide(Int32, Boolean)
  nameWithType: Geometry.Divide(Int32, Boolean)
  fullName: SearchAThing.Sci.Geometry.Divide(System.Int32, System.Boolean)
  spec.csharp:
  - uid: SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
    name: Divide
    nameWithType: Geometry.Divide
    fullName: SearchAThing.Sci.Geometry.Divide
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
    name: Divide
    nameWithType: Geometry.Divide
    fullName: SearchAThing.Sci.Geometry.Divide
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Arc3D.Divide*
  commentId: Overload:SearchAThing.Sci.Arc3D.Divide
  name: Divide
  nameWithType: Arc3D.Divide
  fullName: SearchAThing.Sci.Arc3D.Divide
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SearchAThing.Sci.Arc3D.Split*
  commentId: Overload:SearchAThing.Sci.Arc3D.Split
  name: Split
  nameWithType: Arc3D.Split
  fullName: SearchAThing.Sci.Arc3D.Split
- uid: IEnumerable{SearchAThing.Sci.Arc3D}
  commentId: '!:IEnumerable{SearchAThing.Sci.Arc3D}'
  definition: IEnumerable`1
  name: IEnumerable<Arc3D>
  nameWithType: IEnumerable<Arc3D>
  fullName: IEnumerable<SearchAThing.Sci.Arc3D>
  nameWithType.vb: IEnumerable(Of Arc3D)
  fullName.vb: IEnumerable(Of SearchAThing.Sci.Arc3D)
  name.vb: IEnumerable(Of Arc3D)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Arc3D
    name: Arc3D
    nameWithType: Arc3D
    fullName: SearchAThing.Sci.Arc3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Arc3D
    name: Arc3D
    nameWithType: Arc3D
    fullName: SearchAThing.Sci.Arc3D
  - name: )
    nameWithType: )
    fullName: )

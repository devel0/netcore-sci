### YamlMime:ManagedReference
items:
- uid: SearchAThing.Sci.Vector3D
  commentId: T:SearchAThing.Sci.Vector3D
  id: Vector3D
  parent: SearchAThing.Sci
  children:
  - SearchAThing.Sci.Vector3D.#ctor
  - SearchAThing.Sci.Vector3D.#ctor(System.Double,System.Double)
  - SearchAThing.Sci.Vector3D.#ctor(System.Double,System.Double,System.Double)
  - SearchAThing.Sci.Vector3D.#ctor(System.Double[])
  - SearchAThing.Sci.Vector3D.#ctor(System.String)
  - SearchAThing.Sci.Vector3D.AngleRad(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.AngleToward(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.Axis(System.Int32)
  - SearchAThing.Sci.Vector3D.BBox(System.Double)
  - SearchAThing.Sci.Vector3D.CadScript
  - SearchAThing.Sci.Vector3D.CadScriptLine
  - SearchAThing.Sci.Vector3D.CadScriptLineFrom
  - SearchAThing.Sci.Vector3D.Colinear(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.Concordant(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.ConcordantColinear(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  - SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.Vector3D.Coordinates
  - SearchAThing.Sci.Vector3D.CrossProduct(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.Distance(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.Distance(System.Double,SearchAThing.Sci.Line3D)
  - SearchAThing.Sci.Vector3D.Distance2D(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.Divide(System.Int32,System.Boolean)
  - SearchAThing.Sci.Vector3D.DotProduct(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.DxfEntity
  - SearchAThing.Sci.Vector3D.EqualsAutoTol(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.EqualsTol(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.EqualsTol(System.Double,System.Double,System.Double)
  - SearchAThing.Sci.Vector3D.EqualsTol(System.Double,System.Double,System.Double,System.Double)
  - SearchAThing.Sci.Vector3D.From2DCoords(System.Double[])
  - SearchAThing.Sci.Vector3D.From3DCoords(System.Double[])
  - SearchAThing.Sci.Vector3D.FromString(System.String)
  - SearchAThing.Sci.Vector3D.FromStringArray(System.String)
  - SearchAThing.Sci.Vector3D.GeomFrom
  - SearchAThing.Sci.Vector3D.GeomTo
  - SearchAThing.Sci.Vector3D.GetOrd(SearchAThing.OrdIdx)
  - SearchAThing.Sci.Vector3D.GetOrd(System.Int32)
  - SearchAThing.Sci.Vector3D.IsParallelTo(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.IsPerpendicular(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.IsZeroLength
  - SearchAThing.Sci.Vector3D.Item(System.Int32)
  - SearchAThing.Sci.Vector3D.Length
  - SearchAThing.Sci.Vector3D.Mirror(SearchAThing.Sci.Line3D)
  - SearchAThing.Sci.Vector3D.Normalized
  - SearchAThing.Sci.Vector3D.op_Addition(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.op_Division(SearchAThing.Sci.Vector3D,System.Double)
  - SearchAThing.Sci.Vector3D.op_Division(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.op_Implicit(SearchAThing.Sci.Vector3D)~Vector3
  - SearchAThing.Sci.Vector3D.op_Implicit(Vector2)~SearchAThing.Sci.Vector3D
  - SearchAThing.Sci.Vector3D.op_Implicit(Vector3)~SearchAThing.Sci.Vector3D
  - SearchAThing.Sci.Vector3D.op_Multiply(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.op_Multiply(SearchAThing.Sci.Vector3D,System.Double)
  - SearchAThing.Sci.Vector3D.op_Multiply(System.Double,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.op_Subtraction(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.op_UnaryNegation(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.Project(SearchAThing.Sci.Line3D)
  - SearchAThing.Sci.Vector3D.Project(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.Random(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,Random)
  - SearchAThing.Sci.Vector3D.Random(System.Int32,System.Double,System.Int32)
  - SearchAThing.Sci.Vector3D.Rel(SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.RotateAboutAxis(SearchAThing.Sci.Line3D,System.Double)
  - SearchAThing.Sci.Vector3D.RotateAboutAxis(SearchAThing.Sci.Vector3D,System.Double)
  - SearchAThing.Sci.Vector3D.RotateAboutXAxis(System.Double)
  - SearchAThing.Sci.Vector3D.RotateAboutYAxis(System.Double)
  - SearchAThing.Sci.Vector3D.RotateAboutZAxis(System.Double)
  - SearchAThing.Sci.Vector3D.RotateAs(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,System.Double,System.Double)
  - SearchAThing.Sci.Vector3D.Scalar(System.Double,System.Double,System.Double)
  - SearchAThing.Sci.Vector3D.ScaleAbout(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  - SearchAThing.Sci.Vector3D.ScaleAbout(SearchAThing.Sci.Vector3D,System.Double)
  - SearchAThing.Sci.Vector3D.Set(SearchAThing.OrdIdx,System.Double)
  - SearchAThing.Sci.Vector3D.StringRepresentation
  - SearchAThing.Sci.Vector3D.ToString
  - SearchAThing.Sci.Vector3D.ToString(System.Double)
  - SearchAThing.Sci.Vector3D.ToString(System.Int32)
  - SearchAThing.Sci.Vector3D.ToUCS(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  - SearchAThing.Sci.Vector3D.ToWCS(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  - SearchAThing.Sci.Vector3D.Vertexes
  - SearchAThing.Sci.Vector3D.X
  - SearchAThing.Sci.Vector3D.XAxis
  - SearchAThing.Sci.Vector3D.Y
  - SearchAThing.Sci.Vector3D.YAxis
  - SearchAThing.Sci.Vector3D.Z
  - SearchAThing.Sci.Vector3D.ZAxis
  - SearchAThing.Sci.Vector3D.Zero
  langs:
  - csharp
  - vb
  name: Vector3D
  nameWithType: Vector3D
  fullName: SearchAThing.Sci.Vector3D
  type: Class
  source:
    id: Vector3D
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 25
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncan be used to describe a wcs point or a vector x,y,z components from some reference origin\n"
  example: []
  syntax:
    content: 'public class Vector3D : Geometry'
    content.vb: >-
      Public Class Vector3D
          Inherits Geometry
  inheritance:
  - System.Object
  - SearchAThing.Sci.Geometry
  inheritedMembers:
  - SearchAThing.Sci.Geometry.Type
  extensionMethods:
  - SearchAThing.Sci.Vector3D.SearchAThing.SciExt.Project(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  - SearchAThing.Sci.Vector3D.SearchAThing.SciExt.ToVector2
  - SearchAThing.Sci.Vector3D.SearchAThing.SciExt.ToPoint
  - SearchAThing.Sci.Vector3D.SearchAThing.SciExt.ToPsql
  - SearchAThing.Sci.Vector3D.SearchAThing.SciExt.ToDxfPoint
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SearchAThing.Sci.Vector3D.Zero
  commentId: F:SearchAThing.Sci.Vector3D.Zero
  id: Zero
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector3D.Zero
  fullName: SearchAThing.Sci.Vector3D.Zero
  type: Field
  source:
    id: Zero
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 34
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nzero vector (0,0,0)            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0001.cs)\n"
  example: []
  syntax:
    content: public static readonly Vector3D Zero
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared ReadOnly Zero As Vector3D
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.XAxis
  commentId: F:SearchAThing.Sci.Vector3D.XAxis
  id: XAxis
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: XAxis
  nameWithType: Vector3D.XAxis
  fullName: SearchAThing.Sci.Vector3D.XAxis
  type: Field
  source:
    id: XAxis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 42
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nxaxis vector (1,0,0)            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0004.cs)\n"
  example: []
  syntax:
    content: public static readonly Vector3D XAxis
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared ReadOnly XAxis As Vector3D
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.YAxis
  commentId: F:SearchAThing.Sci.Vector3D.YAxis
  id: YAxis
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: YAxis
  nameWithType: Vector3D.YAxis
  fullName: SearchAThing.Sci.Vector3D.YAxis
  type: Field
  source:
    id: YAxis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 50
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nyaxis vector (0,1,0)            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0004.cs)\n"
  example: []
  syntax:
    content: public static readonly Vector3D YAxis
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared ReadOnly YAxis As Vector3D
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.ZAxis
  commentId: F:SearchAThing.Sci.Vector3D.ZAxis
  id: ZAxis
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ZAxis
  nameWithType: Vector3D.ZAxis
  fullName: SearchAThing.Sci.Vector3D.ZAxis
  type: Field
  source:
    id: ZAxis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 58
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nzaxis vector (0,0,1)            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0004.cs)\n"
  example: []
  syntax:
    content: public static readonly Vector3D ZAxis
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared ReadOnly ZAxis As Vector3D
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.Axis(System.Int32)
  commentId: M:SearchAThing.Sci.Vector3D.Axis(System.Int32)
  id: Axis(System.Int32)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Axis(Int32)
  nameWithType: Vector3D.Axis(Int32)
  fullName: SearchAThing.Sci.Vector3D.Axis(System.Int32)
  type: Method
  source:
    id: Axis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 67
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nretrieve wcs axis by given index            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0004.cs)\n"
  example: []
  syntax:
    content: public static Vector3D Axis(int ord)
    parameters:
    - id: ord
      type: System.Int32
      description: 0:(1,0,0) 1:(0,1,0) 2:(0,0,1)
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Function Axis(ord As Integer) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Axis*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.GetOrd(System.Int32)
  commentId: M:SearchAThing.Sci.Vector3D.GetOrd(System.Int32)
  id: GetOrd(System.Int32)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: GetOrd(Int32)
  nameWithType: Vector3D.GetOrd(Int32)
  fullName: SearchAThing.Sci.Vector3D.GetOrd(System.Int32)
  type: Method
  source:
    id: GetOrd
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 84
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nretrieve the component (0:X, 1:Y, 2:Z)            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0003.cs)\n"
  example: []
  syntax:
    content: public double GetOrd(int ord)
    parameters:
    - id: ord
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public Function GetOrd(ord As Integer) As Double
  overload: SearchAThing.Sci.Vector3D.GetOrd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.GetOrd(SearchAThing.OrdIdx)
  commentId: M:SearchAThing.Sci.Vector3D.GetOrd(SearchAThing.OrdIdx)
  id: GetOrd(SearchAThing.OrdIdx)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: GetOrd(OrdIdx)
  nameWithType: Vector3D.GetOrd(OrdIdx)
  fullName: SearchAThing.Sci.Vector3D.GetOrd(SearchAThing.OrdIdx)
  type: Method
  source:
    id: GetOrd
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 101
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nretrieve the component (0:X, 1:Y, 2:Z)            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0003.cs)\n"
  example: []
  syntax:
    content: public double GetOrd(OrdIdx ord)
    parameters:
    - id: ord
      type: SearchAThing.OrdIdx
    return:
      type: System.Double
    content.vb: Public Function GetOrd(ord As OrdIdx) As Double
  overload: SearchAThing.Sci.Vector3D.GetOrd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.X
  commentId: P:SearchAThing.Sci.Vector3D.X
  id: X
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector3D.X
  fullName: SearchAThing.Sci.Vector3D.X
  type: Property
  source:
    id: X
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 118
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nX vector component            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0005.cs)\n"
  example: []
  syntax:
    content: public double X { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property X As Double
  overload: SearchAThing.Sci.Vector3D.X*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.Y
  commentId: P:SearchAThing.Sci.Vector3D.Y
  id: Y
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector3D.Y
  fullName: SearchAThing.Sci.Vector3D.Y
  type: Property
  source:
    id: Y
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 126
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nY vector component            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0005.cs)\n"
  example: []
  syntax:
    content: public double Y { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Y As Double
  overload: SearchAThing.Sci.Vector3D.Y*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.Z
  commentId: P:SearchAThing.Sci.Vector3D.Z
  id: Z
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Vector3D.Z
  fullName: SearchAThing.Sci.Vector3D.Z
  type: Property
  source:
    id: Z
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 134
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nZ vector component            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0005.cs)\n"
  example: []
  syntax:
    content: public double Z { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Z As Double
  overload: SearchAThing.Sci.Vector3D.Z*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.#ctor
  commentId: M:SearchAThing.Sci.Vector3D.#ctor
  id: '#ctor'
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Vector3D()
  nameWithType: Vector3D.Vector3D()
  fullName: SearchAThing.Sci.Vector3D.Vector3D()
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 142
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nzero vector            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0006.cs)\n"
  example: []
  syntax:
    content: public Vector3D()
    content.vb: Public Sub New
  overload: SearchAThing.Sci.Vector3D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.#ctor(System.Double[])
  commentId: M:SearchAThing.Sci.Vector3D.#ctor(System.Double[])
  id: '#ctor(System.Double[])'
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Vector3D(Double[])
  nameWithType: Vector3D.Vector3D(Double[])
  fullName: SearchAThing.Sci.Vector3D.Vector3D(System.Double[])
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 152
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nbuild a vector (x,y,0) or (x,y,z) from given 2 or 3 doubles            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0007.cs)\n"
  example: []
  syntax:
    content: public Vector3D(double[] arr)
    parameters:
    - id: arr
      type: System.Double[]
    content.vb: Public Sub New(arr As Double())
  overload: SearchAThing.Sci.Vector3D.#ctor*
  nameWithType.vb: Vector3D.Vector3D(Double())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.Vector3D.Vector3D(System.Double())
  name.vb: Vector3D(Double())
- uid: SearchAThing.Sci.Vector3D.#ctor(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.#ctor(System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double)'
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Vector3D(Double, Double, Double)
  nameWithType: Vector3D.Vector3D(Double, Double, Double)
  fullName: SearchAThing.Sci.Vector3D.Vector3D(System.Double, System.Double, System.Double)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 166
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nbuild a vector by given components            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0008.cs)\n"
  example: []
  syntax:
    content: public Vector3D(double x, double y, double z)
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    - id: z
      type: System.Double
    content.vb: Public Sub New(x As Double, y As Double, z As Double)
  overload: SearchAThing.Sci.Vector3D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.#ctor(System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Vector3D(Double, Double)
  nameWithType: Vector3D.Vector3D(Double, Double)
  fullName: SearchAThing.Sci.Vector3D.Vector3D(System.Double, System.Double)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 177
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nbuild a vector (x,y,0) by given components            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0008.cs)\n"
  example: []
  syntax:
    content: public Vector3D(double x, double y)
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    content.vb: Public Sub New(x As Double, y As Double)
  overload: SearchAThing.Sci.Vector3D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.#ctor(System.String)
  commentId: M:SearchAThing.Sci.Vector3D.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Vector3D(String)
  nameWithType: Vector3D.Vector3D(String)
  fullName: SearchAThing.Sci.Vector3D.Vector3D(System.String)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 205
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nparse cad id string (eg. &quot;X = 4.11641325 Y = 266.06066703 Z = 11.60392802&quot;)\nconstructing a point            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0009.cs)\n"
  example: []
  syntax:
    content: public Vector3D(string cad_id_string)
    parameters:
    - id: cad_id_string
      type: System.String
      description: cad id string
    content.vb: Public Sub New(cad_id_string As String)
  overload: SearchAThing.Sci.Vector3D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Coordinates
  commentId: P:SearchAThing.Sci.Vector3D.Coordinates
  id: Coordinates
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Coordinates
  nameWithType: Vector3D.Coordinates
  fullName: SearchAThing.Sci.Vector3D.Coordinates
  type: Property
  source:
    id: Coordinates
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 224
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nenumerate coordinates            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0010.cs)\n"
  example: []
  syntax:
    content: public IEnumerable<double> Coordinates { get; }
    parameters: []
    return:
      type: IEnumerable{System.Double}
    content.vb: Public ReadOnly Property Coordinates As IEnumerable(Of Double)
  overload: SearchAThing.Sci.Vector3D.Coordinates*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.IsZeroLength
  commentId: P:SearchAThing.Sci.Vector3D.IsZeroLength
  id: IsZeroLength
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: IsZeroLength
  nameWithType: Vector3D.IsZeroLength
  fullName: SearchAThing.Sci.Vector3D.IsZeroLength
  type: Property
  source:
    id: IsZeroLength
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 240
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstates if this is a zero vector            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0011.cs)\n"
  example: []
  syntax:
    content: public bool IsZeroLength { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsZeroLength As Boolean
  overload: SearchAThing.Sci.Vector3D.IsZeroLength*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.EqualsTol(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.EqualsTol(System.Double,SearchAThing.Sci.Vector3D)
  id: EqualsTol(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: EqualsTol(Double, Vector3D)
  nameWithType: Vector3D.EqualsTol(Double, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.EqualsTol(System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: EqualsTol
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 250
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nchecks vector component equality vs other given                       \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0012.cs)\n"
  example: []
  syntax:
    content: public bool EqualsTol(double tol, Vector3D other)
    parameters:
    - id: tol
      type: System.Double
      description: 'geometric tolerance ( note: use Constants.NormalizedLengthTolerance )'
    - id: other
      type: SearchAThing.Sci.Vector3D
      description: vector to compare to this
    return:
      type: System.Boolean
    content.vb: Public Function EqualsTol(tol As Double, other As Vector3D) As Boolean
  overload: SearchAThing.Sci.Vector3D.EqualsTol*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.EqualsAutoTol(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.EqualsAutoTol(SearchAThing.Sci.Vector3D)
  id: EqualsAutoTol(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: EqualsAutoTol(Vector3D)
  nameWithType: Vector3D.EqualsAutoTol(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.EqualsAutoTol(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: EqualsAutoTol
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 264
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncheck if this vector equals the given one component by component using EqualsAutoTol            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0012.cs)\n"
  example: []
  syntax:
    content: public bool EqualsAutoTol(Vector3D other)
    parameters:
    - id: other
      type: SearchAThing.Sci.Vector3D
    return:
      type: System.Boolean
    content.vb: Public Function EqualsAutoTol(other As Vector3D) As Boolean
  overload: SearchAThing.Sci.Vector3D.EqualsAutoTol*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.EqualsTol(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.EqualsTol(System.Double,System.Double,System.Double)
  id: EqualsTol(System.Double,System.Double,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: EqualsTol(Double, Double, Double)
  nameWithType: Vector3D.EqualsTol(Double, Double, Double)
  fullName: SearchAThing.Sci.Vector3D.EqualsTol(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: EqualsTol
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 279
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nchecks only x,y            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0012.cs)\n"
  example: []
  syntax:
    content: public bool EqualsTol(double tol, double x, double y)
    parameters:
    - id: tol
      type: System.Double
      description: 'geometric tolerance ( note: use Constants.NormalizedLengthTolerance )'
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Function EqualsTol(tol As Double, x As Double, y As Double) As Boolean
  overload: SearchAThing.Sci.Vector3D.EqualsTol*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.EqualsTol(System.Double,System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.EqualsTol(System.Double,System.Double,System.Double,System.Double)
  id: EqualsTol(System.Double,System.Double,System.Double,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: EqualsTol(Double, Double, Double, Double)
  nameWithType: Vector3D.EqualsTol(Double, Double, Double, Double)
  fullName: SearchAThing.Sci.Vector3D.EqualsTol(System.Double, System.Double, System.Double, System.Double)
  type: Method
  source:
    id: EqualsTol
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 291
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nchecks vector component equality vs other given                        \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0012.cs)\n"
  example: []
  syntax:
    content: public bool EqualsTol(double tol, double x, double y, double z)
    parameters:
    - id: tol
      type: System.Double
      description: 'geometric tolerance ( note: use Constants.NormalizedLengthTolerance )'
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    - id: z
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Function EqualsTol(tol As Double, x As Double, y As Double, z As Double) As Boolean
  overload: SearchAThing.Sci.Vector3D.EqualsTol*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Normalized
  commentId: M:SearchAThing.Sci.Vector3D.Normalized
  id: Normalized
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Normalized()
  nameWithType: Vector3D.Normalized()
  fullName: SearchAThing.Sci.Vector3D.Normalized()
  type: Method
  source:
    id: Normalized
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 302
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncreate a normalized version of this vector            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0013.cs)\n"
  example: []
  syntax:
    content: public Vector3D Normalized()
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function Normalized As Vector3D
  overload: SearchAThing.Sci.Vector3D.Normalized*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Distance(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.Distance(SearchAThing.Sci.Vector3D)
  id: Distance(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Distance(Vector3D)
  nameWithType: Vector3D.Distance(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Distance(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: Distance
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 314
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncompute distance between this point and the other given                        \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0014.cs)\n"
  example: []
  syntax:
    content: public double Distance(Vector3D other)
    parameters:
    - id: other
      type: SearchAThing.Sci.Vector3D
    return:
      type: System.Double
    content.vb: Public Function Distance(other As Vector3D) As Double
  overload: SearchAThing.Sci.Vector3D.Distance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Distance(System.Double,SearchAThing.Sci.Line3D)
  commentId: M:SearchAThing.Sci.Vector3D.Distance(System.Double,SearchAThing.Sci.Line3D)
  id: Distance(System.Double,SearchAThing.Sci.Line3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Distance(Double, Line3D)
  nameWithType: Vector3D.Distance(Double, Line3D)
  fullName: SearchAThing.Sci.Vector3D.Distance(System.Double, SearchAThing.Sci.Line3D)
  type: Method
  source:
    id: Distance
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 328
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncompute perpendicular(min) distance of this point from given line            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0015.cs)\n![](/test/Vector3D/Vector3DTest_0015.png)\n"
  example: []
  syntax:
    content: public double Distance(double tol, Line3D other)
    parameters:
    - id: tol
      type: System.Double
      description: length tolerance ( used to check if point contained in line )
    - id: other
      type: SearchAThing.Sci.Line3D
      description: line
    return:
      type: System.Double
    content.vb: Public Function Distance(tol As Double, other As Line3D) As Double
  overload: SearchAThing.Sci.Vector3D.Distance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Distance2D(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.Distance2D(SearchAThing.Sci.Vector3D)
  id: Distance2D(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Distance2D(Vector3D)
  nameWithType: Vector3D.Distance2D(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Distance2D(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: Distance2D
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 343
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncompute distance of this point from the given in 2d ( x,y ) without consider z component            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0016.cs)\n![](/test/Vector3D/Vector3DTest_0016.png)\n"
  example: []
  syntax:
    content: public double Distance2D(Vector3D other)
    parameters:
    - id: other
      type: SearchAThing.Sci.Vector3D
      description: other point
    return:
      type: System.Double
    content.vb: Public Function Distance2D(other As Vector3D) As Double
  overload: SearchAThing.Sci.Vector3D.Distance2D*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.DotProduct(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.DotProduct(SearchAThing.Sci.Vector3D)
  id: DotProduct(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: DotProduct(Vector3D)
  nameWithType: Vector3D.DotProduct(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.DotProduct(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: DotProduct
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 356
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncompute dot product of this vector for the given one            \na b = |a| |b| cos(alfa)            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0017.cs)            \n"
  example: []
  syntax:
    content: public double DotProduct(Vector3D other)
    parameters:
    - id: other
      type: SearchAThing.Sci.Vector3D
      description: second vector
    return:
      type: System.Double
    content.vb: Public Function DotProduct(other As Vector3D) As Double
  overload: SearchAThing.Sci.Vector3D.DotProduct*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.IsPerpendicular(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.IsPerpendicular(SearchAThing.Sci.Vector3D)
  id: IsPerpendicular(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: IsPerpendicular(Vector3D)
  nameWithType: Vector3D.IsPerpendicular(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.IsPerpendicular(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: IsPerpendicular
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 368
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstates is this vector is perpendicular to the given one            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0018.cs)\n"
  example: []
  syntax:
    content: public bool IsPerpendicular(Vector3D other)
    parameters:
    - id: other
      type: SearchAThing.Sci.Vector3D
      description: other vector
    return:
      type: System.Boolean
    content.vb: Public Function IsPerpendicular(other As Vector3D) As Boolean
  overload: SearchAThing.Sci.Vector3D.IsPerpendicular*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.CrossProduct(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.CrossProduct(SearchAThing.Sci.Vector3D)
  id: CrossProduct(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: CrossProduct(Vector3D)
  nameWithType: Vector3D.CrossProduct(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.CrossProduct(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: CrossProduct
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 387
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nCross product ( not normalized ) ;            \na x b = |a| |b| sin(alfa) N ;        \na x b = |  x  y  z |\n    | ax ay az |\n    | bx by bz |            \n[reference](https://en.wikipedia.org/wiki/Cross_product) ;            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0019.cs)\n![](/test/Vector3D/Vector3DTest_0019.png)\n"
  example: []
  syntax:
    content: public Vector3D CrossProduct(Vector3D other)
    parameters:
    - id: other
      type: SearchAThing.Sci.Vector3D
      description: other vector
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function CrossProduct(other As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.CrossProduct*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.AngleRad(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.AngleRad(System.Double,SearchAThing.Sci.Vector3D)
  id: AngleRad(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: AngleRad(Double, Vector3D)
  nameWithType: Vector3D.AngleRad(Double, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.AngleRad(System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: AngleRad
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 406
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nangle between this and given vector\n"
  remarks: "\n[unit test](../test/Vector3D/Vector3DTest_0020.cs)\n\n<a href=\"../test/Vector3D/Vector3DTest_0020.png\">![image](../test/Vector3D/Vector3DTest_0020.png)</a>\n"
  example: []
  syntax:
    content: public double AngleRad(double tolLen, Vector3D to)
    parameters:
    - id: tolLen
      type: System.Double
      description: geometric tolerance to test vector equalities ( use Constants.NormalizedLengthTolerance when comparing normalized vectors )
    - id: to
      type: SearchAThing.Sci.Vector3D
      description: other vector
    return:
      type: System.Double
      description: angle between two vectors (rad)
    content.vb: Public Function AngleRad(tolLen As Double, to As Vector3D) As Double
  overload: SearchAThing.Sci.Vector3D.AngleRad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Project(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.Project(SearchAThing.Sci.Vector3D)
  id: Project(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Project(Vector3D)
  nameWithType: Vector3D.Project(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Project(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: Project
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 439
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nproject this vector to the given one\n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0021.cs)\n![](/test/Vector3D/Vector3DTest_0021.png)\n"
  example: []
  syntax:
    content: public Vector3D Project(Vector3D to)
    parameters:
    - id: to
      type: SearchAThing.Sci.Vector3D
      description: other vector
    return:
      type: SearchAThing.Sci.Vector3D
      description: projected vector ( will be colinear to the given one )
    content.vb: Public Function Project(to As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Project*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Project(SearchAThing.Sci.Line3D)
  commentId: M:SearchAThing.Sci.Vector3D.Project(SearchAThing.Sci.Line3D)
  id: Project(SearchAThing.Sci.Line3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Project(Line3D)
  nameWithType: Vector3D.Project(Line3D)
  fullName: SearchAThing.Sci.Vector3D.Project(SearchAThing.Sci.Line3D)
  type: Method
  source:
    id: Project
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 454
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nproject this point to the given line\n"
  example: []
  syntax:
    content: public Vector3D Project(Line3D line)
    parameters:
    - id: line
      type: SearchAThing.Sci.Line3D
      description: line to project the point onto
    return:
      type: SearchAThing.Sci.Vector3D
      description: projected point onto the line ( perpendicularly )
    content.vb: Public Function Project(line As Line3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Project*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Set(SearchAThing.OrdIdx,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.Set(SearchAThing.OrdIdx,System.Double)
  id: Set(SearchAThing.OrdIdx,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Set(OrdIdx, Double)
  nameWithType: Vector3D.Set(OrdIdx, Double)
  fullName: SearchAThing.Sci.Vector3D.Set(SearchAThing.OrdIdx, System.Double)
  type: Method
  source:
    id: Set
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 465
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncreate a point copy of this one with component changed\n"
  example: []
  syntax:
    content: public Vector3D Set(OrdIdx ordIdx, double value)
    parameters:
    - id: ordIdx
      type: SearchAThing.OrdIdx
      description: component to change ( 0:x 1:y 2:z )
    - id: value
      type: System.Double
      description: value to assign to the component
    return:
      type: SearchAThing.Sci.Vector3D
      description: new vector with component changed
    content.vb: Public Function Set(ordIdx As OrdIdx, value As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Set*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Rel(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.Rel(SearchAThing.Sci.Vector3D)
  id: Rel(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Rel(Vector3D)
  nameWithType: Vector3D.Rel(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Rel(SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: Rel
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 487
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncreate a vector relative to given origin from this point and given origin\n"
  example: []
  syntax:
    content: public Vector3D Rel(Vector3D origin)
    parameters:
    - id: origin
      type: SearchAThing.Sci.Vector3D
      description: origin to make this point relative to
    return:
      type: SearchAThing.Sci.Vector3D
      description: vector
    content.vb: Public Function Rel(origin As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Rel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.IsParallelTo(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.IsParallelTo(System.Double,SearchAThing.Sci.Vector3D)
  id: IsParallelTo(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: IsParallelTo(Double, Vector3D)
  nameWithType: Vector3D.IsParallelTo(Double, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.IsParallelTo(System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: IsParallelTo
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 496
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nNote: tol must be Constants.NormalizedLengthTolerance\nif comparing normalized vectors\n"
  example: []
  syntax:
    content: public bool IsParallelTo(double tol, Vector3D other)
    parameters:
    - id: tol
      type: System.Double
    - id: other
      type: SearchAThing.Sci.Vector3D
    return:
      type: System.Boolean
    content.vb: Public Function IsParallelTo(tol As Double, other As Vector3D) As Boolean
  overload: SearchAThing.Sci.Vector3D.IsParallelTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Colinear(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.Colinear(System.Double,SearchAThing.Sci.Vector3D)
  id: Colinear(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Colinear(Double, Vector3D)
  nameWithType: Vector3D.Colinear(Double, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Colinear(System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: Colinear
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 535
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstates if this vector is colinear to the given one\n"
  example: []
  syntax:
    content: public bool Colinear(double tol, Vector3D other)
    parameters:
    - id: tol
      type: System.Double
      description: geometric tolerance
    - id: other
      type: SearchAThing.Sci.Vector3D
      description: other vector
    return:
      type: System.Boolean
    content.vb: Public Function Colinear(tol As Double, other As Vector3D) As Boolean
  overload: SearchAThing.Sci.Vector3D.Colinear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Concordant(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.Concordant(System.Double,SearchAThing.Sci.Vector3D)
  id: Concordant(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Concordant(Double, Vector3D)
  nameWithType: Vector3D.Concordant(Double, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Concordant(System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: Concordant
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 548
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstates if this vector concord to the given one\n\n**NOTE**: it does not test two vectors are parallels ( precondition must meet )\n"
  example: []
  syntax:
    content: public bool Concordant(double tol, Vector3D other)
    parameters:
    - id: tol
      type: System.Double
      description: geometric tolerance ( Constants.NormalizedLengthTolerance if comparing normalized vectors )
    - id: other
      type: SearchAThing.Sci.Vector3D
      description: other vector
    return:
      type: System.Boolean
    content.vb: Public Function Concordant(tol As Double, other As Vector3D) As Boolean
  overload: SearchAThing.Sci.Vector3D.Concordant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.ConcordantColinear(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.ConcordantColinear(System.Double,SearchAThing.Sci.Vector3D)
  id: ConcordantColinear(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ConcordantColinear(Double, Vector3D)
  nameWithType: Vector3D.ConcordantColinear(Double, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.ConcordantColinear(System.Double, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: ConcordantColinear
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 558
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstatis if this vector is concordant and colinear to the given one\n"
  example: []
  syntax:
    content: public bool ConcordantColinear(double tol, Vector3D other)
    parameters:
    - id: tol
      type: System.Double
      description: geometric tolerance ( Constants.NormalizedLengthTolerance if comparing normalized vectors )
    - id: other
      type: SearchAThing.Sci.Vector3D
      description: other vector
    return:
      type: System.Boolean
    content.vb: Public Function ConcordantColinear(tol As Double, other As Vector3D) As Boolean
  overload: SearchAThing.Sci.Vector3D.ConcordantColinear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.AngleToward(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.AngleToward(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: AngleToward(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: AngleToward(Double, Vector3D, Vector3D)
  nameWithType: Vector3D.AngleToward(Double, Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.AngleToward(System.Double, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: AngleToward
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 571
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncompute angle required to make this point go to the given one\nif rotate right-hand around given reference axis\n"
  example: []
  syntax:
    content: public double AngleToward(double tolLen, Vector3D to, Vector3D refAxis)
    parameters:
    - id: tolLen
      type: System.Double
      description: geometric tolerance ( use Constants.NormalizedLengthTolerance if working with normalized vectors )
    - id: to
      type: SearchAThing.Sci.Vector3D
      description: point toward rotate this one
    - id: refAxis
      type: SearchAThing.Sci.Vector3D
      description: reference axis to make right-hand rotation of this point toward given one
    return:
      type: System.Double
      description: angle (rad)
    content.vb: Public Function AngleToward(tolLen As Double, to As Vector3D, refAxis As Vector3D) As Double
  overload: SearchAThing.Sci.Vector3D.AngleToward*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.RotateAboutXAxis(System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.RotateAboutXAxis(System.Double)
  id: RotateAboutXAxis(System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: RotateAboutXAxis(Double)
  nameWithType: Vector3D.RotateAboutXAxis(Double)
  fullName: SearchAThing.Sci.Vector3D.RotateAboutXAxis(System.Double)
  type: Method
  source:
    id: RotateAboutXAxis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 586
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nrotate this point around x-axis using quaternion\n"
  example: []
  syntax:
    content: public Vector3D RotateAboutXAxis(double angleRad)
    parameters:
    - id: angleRad
      type: System.Double
      description: angle (rad) of rotation
    return:
      type: SearchAThing.Sci.Vector3D
      description: rotated point
    content.vb: Public Function RotateAboutXAxis(angleRad As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.RotateAboutXAxis*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.RotateAboutYAxis(System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.RotateAboutYAxis(System.Double)
  id: RotateAboutYAxis(System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: RotateAboutYAxis(Double)
  nameWithType: Vector3D.RotateAboutYAxis(Double)
  fullName: SearchAThing.Sci.Vector3D.RotateAboutYAxis(System.Double)
  type: Method
  source:
    id: RotateAboutYAxis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 598
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nrotate this point around y-axis using quaternion\n"
  example: []
  syntax:
    content: public Vector3D RotateAboutYAxis(double angleRad)
    parameters:
    - id: angleRad
      type: System.Double
      description: angle (rad) of rotation
    return:
      type: SearchAThing.Sci.Vector3D
      description: rotated point
    content.vb: Public Function RotateAboutYAxis(angleRad As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.RotateAboutYAxis*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.RotateAboutZAxis(System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.RotateAboutZAxis(System.Double)
  id: RotateAboutZAxis(System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: RotateAboutZAxis(Double)
  nameWithType: Vector3D.RotateAboutZAxis(Double)
  fullName: SearchAThing.Sci.Vector3D.RotateAboutZAxis(System.Double)
  type: Method
  source:
    id: RotateAboutZAxis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 610
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nrotate this point around z-axis using quaternion\n"
  example: []
  syntax:
    content: public Vector3D RotateAboutZAxis(double angleRad)
    parameters:
    - id: angleRad
      type: System.Double
      description: angle (rad) of rotation
    return:
      type: SearchAThing.Sci.Vector3D
      description: rotated point
    content.vb: Public Function RotateAboutZAxis(angleRad As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.RotateAboutZAxis*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.RotateAboutAxis(SearchAThing.Sci.Vector3D,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.RotateAboutAxis(SearchAThing.Sci.Vector3D,System.Double)
  id: RotateAboutAxis(SearchAThing.Sci.Vector3D,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: RotateAboutAxis(Vector3D, Double)
  nameWithType: Vector3D.RotateAboutAxis(Vector3D, Double)
  fullName: SearchAThing.Sci.Vector3D.RotateAboutAxis(SearchAThing.Sci.Vector3D, System.Double)
  type: Method
  source:
    id: RotateAboutAxis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 623
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nrotate this point right-hand around given axis using quaternion\n"
  example: []
  syntax:
    content: public Vector3D RotateAboutAxis(Vector3D axis, double angleRad)
    parameters:
    - id: axis
      type: SearchAThing.Sci.Vector3D
      description: rotation axis
    - id: angleRad
      type: System.Double
      description: angle (rad) of rotation
    return:
      type: SearchAThing.Sci.Vector3D
      description: rotated point
    content.vb: Public Function RotateAboutAxis(axis As Vector3D, angleRad As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.RotateAboutAxis*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.RotateAboutAxis(SearchAThing.Sci.Line3D,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.RotateAboutAxis(SearchAThing.Sci.Line3D,System.Double)
  id: RotateAboutAxis(SearchAThing.Sci.Line3D,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: RotateAboutAxis(Line3D, Double)
  nameWithType: Vector3D.RotateAboutAxis(Line3D, Double)
  fullName: SearchAThing.Sci.Vector3D.RotateAboutAxis(SearchAThing.Sci.Line3D, System.Double)
  type: Method
  source:
    id: RotateAboutAxis
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 636
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nrotate this point right-hand around given segment using quaternion\n"
  example: []
  syntax:
    content: public Vector3D RotateAboutAxis(Line3D axisSegment, double angleRad)
    parameters:
    - id: axisSegment
      type: SearchAThing.Sci.Line3D
      description: rotation axis segment
    - id: angleRad
      type: System.Double
      description: angle (rad) of rotation
    return:
      type: SearchAThing.Sci.Vector3D
      description: rotated point
    content.vb: Public Function RotateAboutAxis(axisSegment As Line3D, angleRad As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.RotateAboutAxis*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.RotateAs(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.RotateAs(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,System.Double,System.Double)
  id: RotateAs(System.Double,SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D,System.Double,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: RotateAs(Double, Vector3D, Vector3D, Double, Double)
  nameWithType: Vector3D.RotateAs(Double, Vector3D, Vector3D, Double, Double)
  fullName: SearchAThing.Sci.Vector3D.RotateAs(System.Double, SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D, System.Double, System.Double)
  type: Method
  source:
    id: RotateAs
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 658
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nNote: tol must be Constants.NormalizedLengthTolerance\nif comparing normalized vectors\nrotation from-to will be multiplied for given angleFactor ( default 1.0 )\n"
  example: []
  syntax:
    content: public Vector3D RotateAs(double tol, Vector3D from, Vector3D to, double angleFactor = 1, double angleAddictionalRad = null)
    parameters:
    - id: tol
      type: System.Double
      description: geometric tolerance ( use Constants.NormalizedLengthTolerance if vectors are normalized )
    - id: from
      type: SearchAThing.Sci.Vector3D
      description: point from describing rotation path
    - id: to
      type: SearchAThing.Sci.Vector3D
      description: point to describing rotation path
    - id: angleFactor
      type: System.Double
      description: optional angle rotation scaler
    - id: angleAddictionalRad
      type: System.Double
      description: optional angle (rad) component (added after angleFactor scaler)
    return:
      type: SearchAThing.Sci.Vector3D
      description: ''
    content.vb: Public Function RotateAs(tol As Double, from As Vector3D, to As Vector3D, angleFactor As Double = 1, angleAddictionalRad As Double = Nothing) As Vector3D
  overload: SearchAThing.Sci.Vector3D.RotateAs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.ScaleAbout(SearchAThing.Sci.Vector3D,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.ScaleAbout(SearchAThing.Sci.Vector3D,System.Double)
  id: ScaleAbout(SearchAThing.Sci.Vector3D,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ScaleAbout(Vector3D, Double)
  nameWithType: Vector3D.ScaleAbout(Vector3D, Double)
  fullName: SearchAThing.Sci.Vector3D.ScaleAbout(SearchAThing.Sci.Vector3D, System.Double)
  type: Method
  source:
    id: ScaleAbout
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 668
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nScale this point about the given origin with the given factor.\n"
  example: []
  syntax:
    content: public Vector3D ScaleAbout(Vector3D origin, double factor)
    parameters:
    - id: origin
      type: SearchAThing.Sci.Vector3D
    - id: factor
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function ScaleAbout(origin As Vector3D, factor As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.ScaleAbout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.ScaleAbout(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.ScaleAbout(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: ScaleAbout(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ScaleAbout(Vector3D, Vector3D)
  nameWithType: Vector3D.ScaleAbout(Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.ScaleAbout(SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Method
  source:
    id: ScaleAbout
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 678
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nScale this point about the given origin with the given factor as (sx,sy,sz).\n"
  example: []
  syntax:
    content: public Vector3D ScaleAbout(Vector3D origin, Vector3D factor)
    parameters:
    - id: origin
      type: SearchAThing.Sci.Vector3D
    - id: factor
      type: SearchAThing.Sci.Vector3D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function ScaleAbout(origin As Vector3D, factor As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.ScaleAbout*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Mirror(SearchAThing.Sci.Line3D)
  commentId: M:SearchAThing.Sci.Vector3D.Mirror(SearchAThing.Sci.Line3D)
  id: Mirror(SearchAThing.Sci.Line3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Mirror(Line3D)
  nameWithType: Vector3D.Mirror(Line3D)
  fullName: SearchAThing.Sci.Vector3D.Mirror(SearchAThing.Sci.Line3D)
  type: Method
  source:
    id: Mirror
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 688
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nmirror this point about given axis\n"
  example: []
  syntax:
    content: public Vector3D Mirror(Line3D axis)
    parameters:
    - id: axis
      type: SearchAThing.Sci.Line3D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function Mirror(axis As Line3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Mirror*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.ToUCS(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  commentId: M:SearchAThing.Sci.Vector3D.ToUCS(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  id: ToUCS(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ToUCS(CoordinateSystem3D, Boolean)
  nameWithType: Vector3D.ToUCS(CoordinateSystem3D, Boolean)
  fullName: SearchAThing.Sci.Vector3D.ToUCS(SearchAThing.Sci.CoordinateSystem3D, System.Boolean)
  type: Method
  source:
    id: ToUCS
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 698
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nConvert this wcs point to given cs coord\n"
  example: []
  syntax:
    content: public Vector3D ToUCS(CoordinateSystem3D cs, bool evalCSOrigin = true)
    parameters:
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
      description: dest CS
    - id: evalCSOrigin
      type: System.Boolean
      description: if true CS origin will subtracted before transform
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function ToUCS(cs As CoordinateSystem3D, evalCSOrigin As Boolean = True) As Vector3D
  overload: SearchAThing.Sci.Vector3D.ToUCS*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.ToWCS(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  commentId: M:SearchAThing.Sci.Vector3D.ToWCS(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  id: ToWCS(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ToWCS(CoordinateSystem3D, Boolean)
  nameWithType: Vector3D.ToWCS(CoordinateSystem3D, Boolean)
  fullName: SearchAThing.Sci.Vector3D.ToWCS(SearchAThing.Sci.CoordinateSystem3D, System.Boolean)
  type: Method
  source:
    id: ToWCS
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 708
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nConvert this ucs considered vector using given cs to the wcs\n"
  example: []
  syntax:
    content: public Vector3D ToWCS(CoordinateSystem3D cs, bool evalCSOrigin = true)
    parameters:
    - id: cs
      type: SearchAThing.Sci.CoordinateSystem3D
      description: ucs point
    - id: evalCSOrigin
      type: System.Boolean
      description: if true CS origin will added after transform
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function ToWCS(cs As CoordinateSystem3D, evalCSOrigin As Boolean = True) As Vector3D
  overload: SearchAThing.Sci.Vector3D.ToWCS*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Scalar(System.Double,System.Double,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.Scalar(System.Double,System.Double,System.Double)
  id: Scalar(System.Double,System.Double,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Scalar(Double, Double, Double)
  nameWithType: Vector3D.Scalar(Double, Double, Double)
  fullName: SearchAThing.Sci.Vector3D.Scalar(System.Double, System.Double, System.Double)
  type: Method
  source:
    id: Scalar
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 716
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nScalar multiply each components\n"
  example: []
  syntax:
    content: public Vector3D Scalar(double xs, double ys, double zs)
    parameters:
    - id: xs
      type: System.Double
    - id: ys
      type: System.Double
    - id: zs
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function Scalar(xs As Double, ys As Double, zs As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Scalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  id: Convert(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Convert(MeasureUnit, MeasureUnit)
  nameWithType: Vector3D.Convert(MeasureUnit, MeasureUnit)
  fullName: SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 724
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconvert each vector component value from to measure units\n"
  example: []
  syntax:
    content: public Vector3D Convert(MeasureUnit from, MeasureUnit to)
    parameters:
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function Convert(from As MeasureUnit, to As MeasureUnit) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Convert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  commentId: M:SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  id: Convert(SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Convert(MeasureUnit, IMUDomain)
  nameWithType: Vector3D.Convert(MeasureUnit, IMUDomain)
  fullName: SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.IMUDomain)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 733
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconvert each vector component value from to measure units\nto measure unit is given from the correspondent physical quantity measure unit of from mu        \n"
  example: []
  syntax:
    content: public Vector3D Convert(MeasureUnit from, IMUDomain to)
    parameters:
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: to
      type: SearchAThing.Sci.IMUDomain
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function Convert(from As MeasureUnit, to As IMUDomain) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Convert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  id: Convert(SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Convert(IMUDomain, MeasureUnit)
  nameWithType: Vector3D.Convert(IMUDomain, MeasureUnit)
  fullName: SearchAThing.Sci.Vector3D.Convert(SearchAThing.Sci.IMUDomain, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 742
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconvert each vector component value from to measure units\nfrom measure unit is given from the correspondent physical quantity measure unit of to mu\n"
  example: []
  syntax:
    content: public Vector3D Convert(IMUDomain from, MeasureUnit to)
    parameters:
    - id: from
      type: SearchAThing.Sci.IMUDomain
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Function Convert(from As IMUDomain, to As MeasureUnit) As Vector3D
  overload: SearchAThing.Sci.Vector3D.Convert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.Item(System.Int32)
  commentId: P:SearchAThing.Sci.Vector3D.Item(System.Int32)
  id: Item(System.Int32)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: Vector3D.Item[Int32]
  fullName: SearchAThing.Sci.Vector3D.Item[System.Int32]
  type: Property
  source:
    id: this[]
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 752
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nindexed vector component\n"
  example: []
  syntax:
    content: public double this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Item(index As Integer) As Double
  overload: SearchAThing.Sci.Vector3D.Item*
  nameWithType.vb: Vector3D.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SearchAThing.Sci.Vector3D.Item(System.Int32)
  name.vb: Item(Int32)
- uid: SearchAThing.Sci.Vector3D.op_Addition(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.op_Addition(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: op_Addition(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Addition(Vector3D, Vector3D)
  nameWithType: Vector3D.Addition(Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Addition(SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Operator
  source:
    id: op_Addition
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 766
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nsum\n"
  example: []
  syntax:
    content: public static Vector3D operator +(Vector3D a, Vector3D b)
    parameters:
    - id: a
      type: SearchAThing.Sci.Vector3D
    - id: b
      type: SearchAThing.Sci.Vector3D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Operator +(a As Vector3D, b As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.op_UnaryNegation(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.op_UnaryNegation(SearchAThing.Sci.Vector3D)
  id: op_UnaryNegation(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: UnaryNegation(Vector3D)
  nameWithType: Vector3D.UnaryNegation(Vector3D)
  fullName: SearchAThing.Sci.Vector3D.UnaryNegation(SearchAThing.Sci.Vector3D)
  type: Operator
  source:
    id: op_UnaryNegation
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 774
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nnegate\n"
  example: []
  syntax:
    content: public static Vector3D operator -(Vector3D a)
    parameters:
    - id: a
      type: SearchAThing.Sci.Vector3D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Operator -(a As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.op_Subtraction(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.op_Subtraction(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: op_Subtraction(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Subtraction(Vector3D, Vector3D)
  nameWithType: Vector3D.Subtraction(Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Subtraction(SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Operator
  source:
    id: op_Subtraction
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 782
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nsub\n"
  example: []
  syntax:
    content: public static Vector3D operator -(Vector3D a, Vector3D b)
    parameters:
    - id: a
      type: SearchAThing.Sci.Vector3D
    - id: b
      type: SearchAThing.Sci.Vector3D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Operator -(a As Vector3D, b As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.op_Multiply(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.op_Multiply(System.Double,SearchAThing.Sci.Vector3D)
  id: op_Multiply(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Multiply(Double, Vector3D)
  nameWithType: Vector3D.Multiply(Double, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Multiply(System.Double, SearchAThing.Sci.Vector3D)
  type: Operator
  source:
    id: op_Multiply
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 790
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar mul\n"
  example: []
  syntax:
    content: public static Vector3D operator *(double s, Vector3D v)
    parameters:
    - id: s
      type: System.Double
    - id: v
      type: SearchAThing.Sci.Vector3D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Operator *(s As Double, v As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.op_Multiply(SearchAThing.Sci.Vector3D,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.op_Multiply(SearchAThing.Sci.Vector3D,System.Double)
  id: op_Multiply(SearchAThing.Sci.Vector3D,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Multiply(Vector3D, Double)
  nameWithType: Vector3D.Multiply(Vector3D, Double)
  fullName: SearchAThing.Sci.Vector3D.Multiply(SearchAThing.Sci.Vector3D, System.Double)
  type: Operator
  source:
    id: op_Multiply
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 798
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar mul\n"
  example: []
  syntax:
    content: public static Vector3D operator *(Vector3D v, double s)
    parameters:
    - id: v
      type: SearchAThing.Sci.Vector3D
    - id: s
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Operator *(v As Vector3D, s As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.op_Multiply(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.op_Multiply(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  id: op_Multiply(SearchAThing.Sci.Vector3D,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Multiply(Vector3D, Vector3D)
  nameWithType: Vector3D.Multiply(Vector3D, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Multiply(SearchAThing.Sci.Vector3D, SearchAThing.Sci.Vector3D)
  type: Operator
  source:
    id: op_Multiply
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 807
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar multiply vector components V1 * V2 =\n(V1.x * V2.x, V1.y * V2.y, V1.z * V2.z)\n"
  example: []
  syntax:
    content: public static Vector3D operator *(Vector3D v1, Vector3D v2)
    parameters:
    - id: v1
      type: SearchAThing.Sci.Vector3D
    - id: v2
      type: SearchAThing.Sci.Vector3D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Operator *(v1 As Vector3D, v2 As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.op_Division(System.Double,SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.Sci.Vector3D.op_Division(System.Double,SearchAThing.Sci.Vector3D)
  id: op_Division(System.Double,SearchAThing.Sci.Vector3D)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Division(Double, Vector3D)
  nameWithType: Vector3D.Division(Double, Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Division(System.Double, SearchAThing.Sci.Vector3D)
  type: Operator
  source:
    id: op_Division
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 815
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar div\n"
  example: []
  syntax:
    content: public static Vector3D operator /(double s, Vector3D v)
    parameters:
    - id: s
      type: System.Double
    - id: v
      type: SearchAThing.Sci.Vector3D
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Operator /(s As Double, v As Vector3D) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.op_Division(SearchAThing.Sci.Vector3D,System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.op_Division(SearchAThing.Sci.Vector3D,System.Double)
  id: op_Division(SearchAThing.Sci.Vector3D,System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Division(Vector3D, Double)
  nameWithType: Vector3D.Division(Vector3D, Double)
  fullName: SearchAThing.Sci.Vector3D.Division(SearchAThing.Sci.Vector3D, System.Double)
  type: Operator
  source:
    id: op_Division
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 823
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar div\n"
  example: []
  syntax:
    content: public static Vector3D operator /(Vector3D v, double s)
    parameters:
    - id: v
      type: SearchAThing.Sci.Vector3D
    - id: s
      type: System.Double
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Operator /(v As Vector3D, s As Double) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.From2DCoords(System.Double[])
  commentId: M:SearchAThing.Sci.Vector3D.From2DCoords(System.Double[])
  id: From2DCoords(System.Double[])
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: From2DCoords(Double[])
  nameWithType: Vector3D.From2DCoords(Double[])
  fullName: SearchAThing.Sci.Vector3D.From2DCoords(System.Double[])
  type: Method
  source:
    id: From2DCoords
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 834
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nCreate an array of Vector3D from given list of 2d coords ( eg. { 100, 200, 300, 400 }\nwill create follow list of vector3d = { (100,200,0), (300,400,0) }\n"
  example: []
  syntax:
    content: public static List<Vector3D> From2DCoords(params double[] coords)
    parameters:
    - id: coords
      type: System.Double[]
    return:
      type: List{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function From2DCoords(ParamArray coords As Double()) As List(Of Vector3D)
  overload: SearchAThing.Sci.Vector3D.From2DCoords*
  nameWithType.vb: Vector3D.From2DCoords(Double())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.Sci.Vector3D.From2DCoords(System.Double())
  name.vb: From2DCoords(Double())
- uid: SearchAThing.Sci.Vector3D.From3DCoords(System.Double[])
  commentId: M:SearchAThing.Sci.Vector3D.From3DCoords(System.Double[])
  id: From3DCoords(System.Double[])
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: From3DCoords(Double[])
  nameWithType: Vector3D.From3DCoords(Double[])
  fullName: SearchAThing.Sci.Vector3D.From3DCoords(System.Double[])
  type: Method
  source:
    id: From3DCoords
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 848
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nCreate an array of Vector3D from given list of 3d coords ( eg. { 100, 200, 10, 300, 400, 20 }\nwill create follow list of vector3d = { (100,200,10), (300,400,20) }            \n"
  example: []
  syntax:
    content: public static List<Vector3D> From3DCoords(params double[] coords)
    parameters:
    - id: coords
      type: System.Double[]
    return:
      type: List{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function From3DCoords(ParamArray coords As Double()) As List(Of Vector3D)
  overload: SearchAThing.Sci.Vector3D.From3DCoords*
  nameWithType.vb: Vector3D.From3DCoords(Double())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.Sci.Vector3D.From3DCoords(System.Double())
  name.vb: From3DCoords(Double())
- uid: SearchAThing.Sci.Vector3D.Random(System.Int32,System.Double,System.Int32)
  commentId: M:SearchAThing.Sci.Vector3D.Random(System.Int32,System.Double,System.Int32)
  id: Random(System.Int32,System.Double,System.Int32)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Random(Int32, Double, Int32)
  nameWithType: Vector3D.Random(Int32, Double, Int32)
  fullName: SearchAThing.Sci.Vector3D.Random(System.Int32, System.Double, System.Int32)
  type: Method
  source:
    id: Random
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 858
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static IEnumerable<Vector3D> Random(int N, double L, int seed = 0)
    parameters:
    - id: N
      type: System.Int32
    - id: L
      type: System.Double
    - id: seed
      type: System.Int32
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Random(N As Integer, L As Double, seed As Integer = 0) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Vector3D.Random*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.Random(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,Random)
  commentId: M:SearchAThing.Sci.Vector3D.Random(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,Random)
  id: Random(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,Random)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Random(Int32, Double, Double, Double, Double, Double, Double, Int32, Random)
  nameWithType: Vector3D.Random(Int32, Double, Double, Double, Double, Double, Double, Int32, Random)
  fullName: SearchAThing.Sci.Vector3D.Random(System.Int32, System.Double, System.Double, System.Double, System.Double, System.Double, System.Double, System.Int32, Random)
  type: Method
  source:
    id: Random
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 867
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nSpan a set of qty vector3d with random coord between given range.\nOptionally a seed can be specified for rand or Random obj directly ( in latter case seed aren&apos;t used )\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> Random(int qty, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax, int seed = 0, Random random = null)
    parameters:
    - id: qty
      type: System.Int32
    - id: xmin
      type: System.Double
    - id: xmax
      type: System.Double
    - id: ymin
      type: System.Double
    - id: ymax
      type: System.Double
    - id: zmin
      type: System.Double
    - id: zmax
      type: System.Double
    - id: seed
      type: System.Int32
    - id: random
      type: Random
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function Random(qty As Integer, xmin As Double, xmax As Double, ymin As Double, ymax As Double, zmin As Double, zmax As Double, seed As Integer = 0, random As Random = Nothing) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Vector3D.Random*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.FromString(System.String)
  commentId: M:SearchAThing.Sci.Vector3D.FromString(System.String)
  id: FromString(System.String)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: FromString(String)
  nameWithType: Vector3D.FromString(String)
  fullName: SearchAThing.Sci.Vector3D.FromString(System.String)
  type: Method
  source:
    id: FromString
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 892
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nparse vector3d from string format &quot;(x y z)&quot; or &quot;(x,y,z)&quot; invariant type\n"
  example: []
  syntax:
    content: public static Vector3D FromString(string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Function FromString(str As String) As Vector3D
  overload: SearchAThing.Sci.Vector3D.FromString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.FromStringArray(System.String)
  commentId: M:SearchAThing.Sci.Vector3D.FromStringArray(System.String)
  id: FromStringArray(System.String)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: FromStringArray(String)
  nameWithType: Vector3D.FromStringArray(String)
  fullName: SearchAThing.Sci.Vector3D.FromStringArray(System.String)
  type: Method
  source:
    id: FromStringArray
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 906
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nparse vector3d from array &quot;(x1,y1,z1);(x2,y2,z2)&quot;\n"
  example: []
  syntax:
    content: public static IEnumerable<Vector3D> FromStringArray(string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Shared Function FromStringArray(str As String) As IEnumerable(Of Vector3D)
  overload: SearchAThing.Sci.Vector3D.FromStringArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Vector3D.ToString
  commentId: M:SearchAThing.Sci.Vector3D.ToString
  id: ToString
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector3D.ToString()
  fullName: SearchAThing.Sci.Vector3D.ToString()
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 915
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstring invariant representation &quot;(x,y,z)&quot;\nw/3 decimal places\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SearchAThing.Sci.Vector3D.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SearchAThing.Sci.Vector3D.ToString(System.Int32)
  commentId: M:SearchAThing.Sci.Vector3D.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ToString(Int32)
  nameWithType: Vector3D.ToString(Int32)
  fullName: SearchAThing.Sci.Vector3D.ToString(System.Int32)
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 923
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstring invariant representation &quot;(x,y,z)&quot; w/given digits\n"
  example: []
  syntax:
    content: public string ToString(int digits = 3)
    parameters:
    - id: digits
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Function ToString(digits As Integer = 3) As String
  overload: SearchAThing.Sci.Vector3D.ToString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.ToString(System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.ToString(System.Double)
  id: ToString(System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: ToString(Double)
  nameWithType: Vector3D.ToString(Double)
  fullName: SearchAThing.Sci.Vector3D.ToString(System.Double)
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 931
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nhash string with given tolerance\n"
  example: []
  syntax:
    content: public string ToString(double tol)
    parameters:
    - id: tol
      type: System.Double
    return:
      type: System.String
    content.vb: Public Function ToString(tol As Double) As String
  overload: SearchAThing.Sci.Vector3D.ToString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.StringRepresentation
  commentId: M:SearchAThing.Sci.Vector3D.StringRepresentation
  id: StringRepresentation
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: StringRepresentation()
  nameWithType: Vector3D.StringRepresentation()
  fullName: SearchAThing.Sci.Vector3D.StringRepresentation()
  type: Method
  source:
    id: StringRepresentation
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 940
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nstring invariant representation &quot;(x,y,z)&quot;\n"
  example: []
  syntax:
    content: public string StringRepresentation()
    return:
      type: System.String
    content.vb: Public Function StringRepresentation As String
  overload: SearchAThing.Sci.Vector3D.StringRepresentation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Vector3D.CadScript
  commentId: P:SearchAThing.Sci.Vector3D.CadScript
  id: CadScript
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: CadScript
  nameWithType: Vector3D.CadScript
  fullName: SearchAThing.Sci.Vector3D.CadScript
  type: Property
  source:
    id: CadScript
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 948
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncad script for this vector as wcs point\n"
  example: []
  syntax:
    content: public string CadScript { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property CadScript As String
  overload: SearchAThing.Sci.Vector3D.CadScript*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.CadScriptLine
  commentId: P:SearchAThing.Sci.Vector3D.CadScriptLine
  id: CadScriptLine
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: CadScriptLine
  nameWithType: Vector3D.CadScriptLine
  fullName: SearchAThing.Sci.Vector3D.CadScriptLine
  type: Property
  source:
    id: CadScriptLine
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 959
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncad script for a line (0,0,0) to this vector\n"
  example: []
  syntax:
    content: public string CadScriptLine { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property CadScriptLine As String
  overload: SearchAThing.Sci.Vector3D.CadScriptLine*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.CadScriptLineFrom
  commentId: P:SearchAThing.Sci.Vector3D.CadScriptLineFrom
  id: CadScriptLineFrom
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: CadScriptLineFrom
  nameWithType: Vector3D.CadScriptLineFrom
  fullName: SearchAThing.Sci.Vector3D.CadScriptLineFrom
  type: Property
  source:
    id: CadScriptLineFrom
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 964
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\ncad script for a line departing from this wcs point\n"
  example: []
  syntax:
    content: public string CadScriptLineFrom { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property CadScriptLineFrom As String
  overload: SearchAThing.Sci.Vector3D.CadScriptLineFrom*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.GeomFrom
  commentId: P:SearchAThing.Sci.Vector3D.GeomFrom
  id: GeomFrom
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: GeomFrom
  nameWithType: Vector3D.GeomFrom
  fullName: SearchAThing.Sci.Vector3D.GeomFrom
  type: Property
  source:
    id: GeomFrom
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 981
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nThis vector.\n( Geometry GeomFrom implementation )            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0002.cs)\n"
  example: []
  syntax:
    content: public override Vector3D GeomFrom { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Overrides ReadOnly Property GeomFrom As Vector3D
  overridden: SearchAThing.Sci.Geometry.GeomFrom
  overload: SearchAThing.Sci.Vector3D.GeomFrom*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.GeomTo
  commentId: P:SearchAThing.Sci.Vector3D.GeomTo
  id: GeomTo
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: GeomTo
  nameWithType: Vector3D.GeomTo
  fullName: SearchAThing.Sci.Vector3D.GeomTo
  type: Property
  source:
    id: GeomTo
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 991
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nThis vector.\n( Geometry GeomTo implementation)             \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0002.cs)\n"
  example: []
  syntax:
    content: public override Vector3D GeomTo { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Overrides ReadOnly Property GeomTo As Vector3D
  overridden: SearchAThing.Sci.Geometry.GeomTo
  overload: SearchAThing.Sci.Vector3D.GeomTo*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.Vertexes
  commentId: P:SearchAThing.Sci.Vector3D.Vertexes
  id: Vertexes
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Vertexes
  nameWithType: Vector3D.Vertexes
  fullName: SearchAThing.Sci.Vector3D.Vertexes
  type: Property
  source:
    id: Vertexes
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1001
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nEnumerable with only this vector.\n( Geometry Vertexes implementation )            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0002.cs)\n"
  example: []
  syntax:
    content: public override IEnumerable<Vector3D> Vertexes { get; }
    parameters: []
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Overrides ReadOnly Property Vertexes As IEnumerable(Of Vector3D)
  overridden: SearchAThing.Sci.Geometry.Vertexes
  overload: SearchAThing.Sci.Vector3D.Vertexes*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.Length
  commentId: P:SearchAThing.Sci.Vector3D.Length
  id: Length
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Vector3D.Length
  fullName: SearchAThing.Sci.Vector3D.Length
  type: Property
  source:
    id: Length
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1017
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nLength of this vector.\n( Geometry Length implementation )            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0002.cs)\n"
  example: []
  syntax:
    content: public override double Length { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Overrides ReadOnly Property Length As Double
  overridden: SearchAThing.Sci.Geometry.Length
  overload: SearchAThing.Sci.Vector3D.Length*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.DxfEntity
  commentId: P:SearchAThing.Sci.Vector3D.DxfEntity
  id: DxfEntity
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: DxfEntity
  nameWithType: Vector3D.DxfEntity
  fullName: SearchAThing.Sci.Vector3D.DxfEntity
  type: Property
  source:
    id: DxfEntity
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1026
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nCreate dxf point entity suitable for netDxf addEntity.\n( Geometry DxfEntity implementation )            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0002.cs)\n"
  example: []
  syntax:
    content: public override netDxf.Entities.EntityObject DxfEntity { get; }
    parameters: []
    return:
      type: netDxf.Entities.EntityObject
    content.vb: Public Overrides ReadOnly Property DxfEntity As netDxf.Entities.EntityObject
  overridden: SearchAThing.Sci.Geometry.DxfEntity
  overload: SearchAThing.Sci.Vector3D.DxfEntity*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: SearchAThing.Sci.Vector3D.Divide(System.Int32,System.Boolean)
  commentId: M:SearchAThing.Sci.Vector3D.Divide(System.Int32,System.Boolean)
  id: Divide(System.Int32,System.Boolean)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Divide(Int32, Boolean)
  nameWithType: Vector3D.Divide(Int32, Boolean)
  fullName: SearchAThing.Sci.Vector3D.Divide(System.Int32, System.Boolean)
  type: Method
  source:
    id: Divide
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1041
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nDivide this point returning itself.\n( Geometry Divide implementation )            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0002.cs)\n"
  example: []
  syntax:
    content: public override IEnumerable<Vector3D> Divide(int cnt, bool include_endpoints = false)
    parameters:
    - id: cnt
      type: System.Int32
    - id: include_endpoints
      type: System.Boolean
    return:
      type: IEnumerable{SearchAThing.Sci.Vector3D}
    content.vb: Public Overrides Function Divide(cnt As Integer, include_endpoints As Boolean = False) As IEnumerable(Of Vector3D)
  overridden: SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
  overload: SearchAThing.Sci.Vector3D.Divide*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SearchAThing.Sci.Vector3D.BBox(System.Double)
  commentId: M:SearchAThing.Sci.Vector3D.BBox(System.Double)
  id: BBox(System.Double)
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: BBox(Double)
  nameWithType: Vector3D.BBox(Double)
  fullName: SearchAThing.Sci.Vector3D.BBox(System.Double)
  type: Method
  source:
    id: BBox
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1054
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nCompute bbox of this point.\n( Geometry BBox implementation ).            \n"
  remarks: "\n[unit test](/test/Vector3D/Vector3DTest_0002.cs)\n"
  example: []
  syntax:
    content: public override BBox3D BBox(double tol_len)
    parameters:
    - id: tol_len
      type: System.Double
      description: length tolerance
    return:
      type: SearchAThing.Sci.BBox3D
    content.vb: Public Overrides Function BBox(tol_len As Double) As BBox3D
  overridden: SearchAThing.Sci.Geometry.BBox(System.Double)
  overload: SearchAThing.Sci.Vector3D.BBox*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SearchAThing.Sci.Vector3D.op_Implicit(Vector2)~SearchAThing.Sci.Vector3D
  commentId: M:SearchAThing.Sci.Vector3D.op_Implicit(Vector2)~SearchAThing.Sci.Vector3D
  id: op_Implicit(Vector2)~SearchAThing.Sci.Vector3D
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Implicit(Vector2 to Vector3D)
  nameWithType: Vector3D.Implicit(Vector2 to Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Implicit(Vector2 to SearchAThing.Sci.Vector3D)
  type: Operator
  source:
    id: op_Implicit
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1064
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconvert given Vector2 to a Vector3D ( with z=0 )\n"
  example: []
  syntax:
    content: public static implicit operator Vector3D(Vector2 v)
    parameters:
    - id: v
      type: Vector2
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Widening Operator CType(v As Vector2) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Implicit*
  nameWithType.vb: Vector3D.Widening(Vector2 to Vector3D)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.Sci.Vector3D.Widening(Vector2 to SearchAThing.Sci.Vector3D)
  name.vb: Widening(Vector2 to Vector3D)
- uid: SearchAThing.Sci.Vector3D.op_Implicit(Vector3)~SearchAThing.Sci.Vector3D
  commentId: M:SearchAThing.Sci.Vector3D.op_Implicit(Vector3)~SearchAThing.Sci.Vector3D
  id: op_Implicit(Vector3)~SearchAThing.Sci.Vector3D
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Implicit(Vector3 to Vector3D)
  nameWithType: Vector3D.Implicit(Vector3 to Vector3D)
  fullName: SearchAThing.Sci.Vector3D.Implicit(Vector3 to SearchAThing.Sci.Vector3D)
  type: Operator
  source:
    id: op_Implicit
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1072
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nConvert given Vector3 to Vector3D\n"
  example: []
  syntax:
    content: public static implicit operator Vector3D(Vector3 v)
    parameters:
    - id: v
      type: Vector3
    return:
      type: SearchAThing.Sci.Vector3D
    content.vb: Public Shared Widening Operator CType(v As Vector3) As Vector3D
  overload: SearchAThing.Sci.Vector3D.op_Implicit*
  nameWithType.vb: Vector3D.Widening(Vector3 to Vector3D)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.Sci.Vector3D.Widening(Vector3 to SearchAThing.Sci.Vector3D)
  name.vb: Widening(Vector3 to Vector3D)
- uid: SearchAThing.Sci.Vector3D.op_Implicit(SearchAThing.Sci.Vector3D)~Vector3
  commentId: M:SearchAThing.Sci.Vector3D.op_Implicit(SearchAThing.Sci.Vector3D)~Vector3
  id: op_Implicit(SearchAThing.Sci.Vector3D)~Vector3
  parent: SearchAThing.Sci.Vector3D
  langs:
  - csharp
  - vb
  name: Implicit(Vector3D to Vector3)
  nameWithType: Vector3D.Implicit(Vector3D to Vector3)
  fullName: SearchAThing.Sci.Vector3D.Implicit(SearchAThing.Sci.Vector3D to Vector3)
  type: Operator
  source:
    id: op_Implicit
    path: Z:\netcore-sci\netcore-sci\Vector3D.cs
    startLine: 1080
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nConvert given Vector3D to Vector3\n"
  example: []
  syntax:
    content: public static implicit operator Vector3(Vector3D v)
    parameters:
    - id: v
      type: SearchAThing.Sci.Vector3D
    return:
      type: Vector3
    content.vb: Public Shared Widening Operator CType(v As Vector3D) As Vector3
  overload: SearchAThing.Sci.Vector3D.op_Implicit*
  nameWithType.vb: Vector3D.Widening(Vector3D to Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.Sci.Vector3D.Widening(SearchAThing.Sci.Vector3D to Vector3)
  name.vb: Widening(Vector3D to Vector3)
references:
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.Sci.Geometry
  commentId: T:SearchAThing.Sci.Geometry
  parent: SearchAThing.Sci
  name: Geometry
  nameWithType: Geometry
  fullName: SearchAThing.Sci.Geometry
- uid: SearchAThing.Sci.Geometry.Type
  commentId: P:SearchAThing.Sci.Geometry.Type
  parent: SearchAThing.Sci.Geometry
  name: Type
  nameWithType: Geometry.Type
  fullName: SearchAThing.Sci.Geometry.Type
- uid: SearchAThing.Sci.Vector3D.SearchAThing.SciExt.Project(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  commentId: M:SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  parent: SearchAThing.SciExt
  definition: SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  name: Project(CoordinateSystem3D, Boolean)
  nameWithType: SciExt.Project(CoordinateSystem3D, Boolean)
  fullName: SearchAThing.SciExt.Project(SearchAThing.Sci.CoordinateSystem3D, System.Boolean)
  spec.csharp:
  - uid: SearchAThing.SciExt.Project(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
    name: Project
    nameWithType: SciExt.Project
    fullName: SearchAThing.SciExt.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.CoordinateSystem3D
    name: CoordinateSystem3D
    nameWithType: CoordinateSystem3D
    fullName: SearchAThing.Sci.CoordinateSystem3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.Project(SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
    name: Project
    nameWithType: SciExt.Project
    fullName: SearchAThing.SciExt.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.CoordinateSystem3D
    name: CoordinateSystem3D
    nameWithType: CoordinateSystem3D
    fullName: SearchAThing.Sci.CoordinateSystem3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Vector3D.SearchAThing.SciExt.ToVector2
  commentId: M:SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.SciExt
  definition: SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  name: ToVector2()
  nameWithType: SciExt.ToVector2()
  fullName: SearchAThing.SciExt.ToVector2()
  spec.csharp:
  - uid: SearchAThing.SciExt.ToVector2
    name: ToVector2
    nameWithType: SciExt.ToVector2
    fullName: SearchAThing.SciExt.ToVector2
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.ToVector2
    name: ToVector2
    nameWithType: SciExt.ToVector2
    fullName: SearchAThing.SciExt.ToVector2
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Vector3D.SearchAThing.SciExt.ToPoint
  commentId: M:SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.SciExt
  definition: SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  name: ToPoint()
  nameWithType: SciExt.ToPoint()
  fullName: SearchAThing.SciExt.ToPoint()
  spec.csharp:
  - uid: SearchAThing.SciExt.ToPoint
    name: ToPoint
    nameWithType: SciExt.ToPoint
    fullName: SearchAThing.SciExt.ToPoint
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.ToPoint
    name: ToPoint
    nameWithType: SciExt.ToPoint
    fullName: SearchAThing.SciExt.ToPoint
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Vector3D.SearchAThing.SciExt.ToPsql
  commentId: M:SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.SciExt
  definition: SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  name: ToPsql()
  nameWithType: SciExt.ToPsql()
  fullName: SearchAThing.SciExt.ToPsql()
  spec.csharp:
  - uid: SearchAThing.SciExt.ToPsql
    name: ToPsql
    nameWithType: SciExt.ToPsql
    fullName: SearchAThing.SciExt.ToPsql
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.ToPsql
    name: ToPsql
    nameWithType: SciExt.ToPsql
    fullName: SearchAThing.SciExt.ToPsql
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Vector3D.SearchAThing.SciExt.ToDxfPoint
  commentId: M:SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  parent: SearchAThing.SciExt
  definition: SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  name: ToDxfPoint()
  nameWithType: SciExt.ToDxfPoint()
  fullName: SearchAThing.SciExt.ToDxfPoint()
  spec.csharp:
  - uid: SearchAThing.SciExt.ToDxfPoint
    name: ToDxfPoint
    nameWithType: SciExt.ToDxfPoint
    fullName: SearchAThing.SciExt.ToDxfPoint
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.ToDxfPoint
    name: ToDxfPoint
    nameWithType: SciExt.ToDxfPoint
    fullName: SearchAThing.SciExt.ToDxfPoint
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  commentId: M:SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
  isExternal: true
  name: Project(Vector3D, CoordinateSystem3D, Boolean)
  nameWithType: SciExt.Project(Vector3D, CoordinateSystem3D, Boolean)
  fullName: SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D, SearchAThing.Sci.CoordinateSystem3D, System.Boolean)
  spec.csharp:
  - uid: SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
    name: Project
    nameWithType: SciExt.Project
    fullName: SearchAThing.SciExt.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.CoordinateSystem3D
    name: CoordinateSystem3D
    nameWithType: CoordinateSystem3D
    fullName: SearchAThing.Sci.CoordinateSystem3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.Project(SearchAThing.Sci.Vector3D,SearchAThing.Sci.CoordinateSystem3D,System.Boolean)
    name: Project
    nameWithType: SciExt.Project
    fullName: SearchAThing.SciExt.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchAThing.Sci.CoordinateSystem3D
    name: CoordinateSystem3D
    nameWithType: CoordinateSystem3D
    fullName: SearchAThing.Sci.CoordinateSystem3D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt
  commentId: T:SearchAThing.SciExt
  parent: SearchAThing
  name: SciExt
  nameWithType: SciExt
  fullName: SearchAThing.SciExt
- uid: SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  name: ToVector2(Vector3D)
  nameWithType: SciExt.ToVector2(Vector3D)
  fullName: SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
  spec.csharp:
  - uid: SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
    name: ToVector2
    nameWithType: SciExt.ToVector2
    fullName: SearchAThing.SciExt.ToVector2
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.ToVector2(SearchAThing.Sci.Vector3D)
    name: ToVector2
    nameWithType: SciExt.ToVector2
    fullName: SearchAThing.SciExt.ToVector2
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  name: ToPoint(Vector3D)
  nameWithType: SciExt.ToPoint(Vector3D)
  fullName: SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
  spec.csharp:
  - uid: SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
    name: ToPoint
    nameWithType: SciExt.ToPoint
    fullName: SearchAThing.SciExt.ToPoint
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.ToPoint(SearchAThing.Sci.Vector3D)
    name: ToPoint
    nameWithType: SciExt.ToPoint
    fullName: SearchAThing.SciExt.ToPoint
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  name: ToPsql(Vector3D)
  nameWithType: SciExt.ToPsql(Vector3D)
  fullName: SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
  spec.csharp:
  - uid: SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
    name: ToPsql
    nameWithType: SciExt.ToPsql
    fullName: SearchAThing.SciExt.ToPsql
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.ToPsql(SearchAThing.Sci.Vector3D)
    name: ToPsql
    nameWithType: SciExt.ToPsql
    fullName: SearchAThing.SciExt.ToPsql
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  commentId: M:SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  name: ToDxfPoint(Vector3D)
  nameWithType: SciExt.ToDxfPoint(Vector3D)
  fullName: SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
  spec.csharp:
  - uid: SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
    name: ToDxfPoint
    nameWithType: SciExt.ToDxfPoint
    fullName: SearchAThing.SciExt.ToDxfPoint
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.SciExt.ToDxfPoint(SearchAThing.Sci.Vector3D)
    name: ToDxfPoint
    nameWithType: SciExt.ToDxfPoint
    fullName: SearchAThing.SciExt.ToDxfPoint
  - name: (
    nameWithType: (
    fullName: (
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing
  commentId: N:SearchAThing
  name: SearchAThing
  nameWithType: SearchAThing
  fullName: SearchAThing
- uid: SearchAThing.Sci.Vector3D
  commentId: T:SearchAThing.Sci.Vector3D
  parent: SearchAThing.Sci
  name: Vector3D
  nameWithType: Vector3D
  fullName: SearchAThing.Sci.Vector3D
- uid: SearchAThing.Sci.Vector3D.Axis*
  commentId: Overload:SearchAThing.Sci.Vector3D.Axis
  name: Axis
  nameWithType: Vector3D.Axis
  fullName: SearchAThing.Sci.Vector3D.Axis
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SearchAThing.Sci.Vector3D.GetOrd*
  commentId: Overload:SearchAThing.Sci.Vector3D.GetOrd
  name: GetOrd
  nameWithType: Vector3D.GetOrd
  fullName: SearchAThing.Sci.Vector3D.GetOrd
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SearchAThing.OrdIdx
  commentId: T:SearchAThing.OrdIdx
  parent: SearchAThing
  name: OrdIdx
  nameWithType: OrdIdx
  fullName: SearchAThing.OrdIdx
- uid: SearchAThing.Sci.Vector3D.X*
  commentId: Overload:SearchAThing.Sci.Vector3D.X
  name: X
  nameWithType: Vector3D.X
  fullName: SearchAThing.Sci.Vector3D.X
- uid: SearchAThing.Sci.Vector3D.Y*
  commentId: Overload:SearchAThing.Sci.Vector3D.Y
  name: Y
  nameWithType: Vector3D.Y
  fullName: SearchAThing.Sci.Vector3D.Y
- uid: SearchAThing.Sci.Vector3D.Z*
  commentId: Overload:SearchAThing.Sci.Vector3D.Z
  name: Z
  nameWithType: Vector3D.Z
  fullName: SearchAThing.Sci.Vector3D.Z
- uid: SearchAThing.Sci.Vector3D.#ctor*
  commentId: Overload:SearchAThing.Sci.Vector3D.#ctor
  name: Vector3D
  nameWithType: Vector3D.Vector3D
  fullName: SearchAThing.Sci.Vector3D.Vector3D
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SearchAThing.Sci.Vector3D.Coordinates*
  commentId: Overload:SearchAThing.Sci.Vector3D.Coordinates
  name: Coordinates
  nameWithType: Vector3D.Coordinates
  fullName: SearchAThing.Sci.Vector3D.Coordinates
- uid: IEnumerable{System.Double}
  commentId: '!:IEnumerable{System.Double}'
  definition: IEnumerable`1
  name: IEnumerable<Double>
  nameWithType: IEnumerable<Double>
  fullName: IEnumerable<System.Double>
  nameWithType.vb: IEnumerable(Of Double)
  fullName.vb: IEnumerable(Of System.Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Vector3D.IsZeroLength*
  commentId: Overload:SearchAThing.Sci.Vector3D.IsZeroLength
  name: IsZeroLength
  nameWithType: Vector3D.IsZeroLength
  fullName: SearchAThing.Sci.Vector3D.IsZeroLength
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SearchAThing.Sci.Vector3D.EqualsTol*
  commentId: Overload:SearchAThing.Sci.Vector3D.EqualsTol
  name: EqualsTol
  nameWithType: Vector3D.EqualsTol
  fullName: SearchAThing.Sci.Vector3D.EqualsTol
- uid: SearchAThing.Sci.Vector3D.EqualsAutoTol*
  commentId: Overload:SearchAThing.Sci.Vector3D.EqualsAutoTol
  name: EqualsAutoTol
  nameWithType: Vector3D.EqualsAutoTol
  fullName: SearchAThing.Sci.Vector3D.EqualsAutoTol
- uid: SearchAThing.Sci.Vector3D.Normalized*
  commentId: Overload:SearchAThing.Sci.Vector3D.Normalized
  name: Normalized
  nameWithType: Vector3D.Normalized
  fullName: SearchAThing.Sci.Vector3D.Normalized
- uid: SearchAThing.Sci.Vector3D.Distance*
  commentId: Overload:SearchAThing.Sci.Vector3D.Distance
  name: Distance
  nameWithType: Vector3D.Distance
  fullName: SearchAThing.Sci.Vector3D.Distance
- uid: SearchAThing.Sci.Line3D
  commentId: T:SearchAThing.Sci.Line3D
  parent: SearchAThing.Sci
  name: Line3D
  nameWithType: Line3D
  fullName: SearchAThing.Sci.Line3D
- uid: SearchAThing.Sci.Vector3D.Distance2D*
  commentId: Overload:SearchAThing.Sci.Vector3D.Distance2D
  name: Distance2D
  nameWithType: Vector3D.Distance2D
  fullName: SearchAThing.Sci.Vector3D.Distance2D
- uid: SearchAThing.Sci.Vector3D.DotProduct*
  commentId: Overload:SearchAThing.Sci.Vector3D.DotProduct
  name: DotProduct
  nameWithType: Vector3D.DotProduct
  fullName: SearchAThing.Sci.Vector3D.DotProduct
- uid: SearchAThing.Sci.Vector3D.IsPerpendicular*
  commentId: Overload:SearchAThing.Sci.Vector3D.IsPerpendicular
  name: IsPerpendicular
  nameWithType: Vector3D.IsPerpendicular
  fullName: SearchAThing.Sci.Vector3D.IsPerpendicular
- uid: SearchAThing.Sci.Vector3D.CrossProduct*
  commentId: Overload:SearchAThing.Sci.Vector3D.CrossProduct
  name: CrossProduct
  nameWithType: Vector3D.CrossProduct
  fullName: SearchAThing.Sci.Vector3D.CrossProduct
- uid: SearchAThing.Sci.Vector3D.AngleRad*
  commentId: Overload:SearchAThing.Sci.Vector3D.AngleRad
  name: AngleRad
  nameWithType: Vector3D.AngleRad
  fullName: SearchAThing.Sci.Vector3D.AngleRad
- uid: SearchAThing.Sci.Vector3D.Project*
  commentId: Overload:SearchAThing.Sci.Vector3D.Project
  name: Project
  nameWithType: Vector3D.Project
  fullName: SearchAThing.Sci.Vector3D.Project
- uid: SearchAThing.Sci.Vector3D.Set*
  commentId: Overload:SearchAThing.Sci.Vector3D.Set
  name: Set
  nameWithType: Vector3D.Set
  fullName: SearchAThing.Sci.Vector3D.Set
- uid: SearchAThing.Sci.Vector3D.Rel*
  commentId: Overload:SearchAThing.Sci.Vector3D.Rel
  name: Rel
  nameWithType: Vector3D.Rel
  fullName: SearchAThing.Sci.Vector3D.Rel
- uid: SearchAThing.Sci.Vector3D.IsParallelTo*
  commentId: Overload:SearchAThing.Sci.Vector3D.IsParallelTo
  name: IsParallelTo
  nameWithType: Vector3D.IsParallelTo
  fullName: SearchAThing.Sci.Vector3D.IsParallelTo
- uid: SearchAThing.Sci.Vector3D.Colinear*
  commentId: Overload:SearchAThing.Sci.Vector3D.Colinear
  name: Colinear
  nameWithType: Vector3D.Colinear
  fullName: SearchAThing.Sci.Vector3D.Colinear
- uid: SearchAThing.Sci.Vector3D.Concordant*
  commentId: Overload:SearchAThing.Sci.Vector3D.Concordant
  name: Concordant
  nameWithType: Vector3D.Concordant
  fullName: SearchAThing.Sci.Vector3D.Concordant
- uid: SearchAThing.Sci.Vector3D.ConcordantColinear*
  commentId: Overload:SearchAThing.Sci.Vector3D.ConcordantColinear
  name: ConcordantColinear
  nameWithType: Vector3D.ConcordantColinear
  fullName: SearchAThing.Sci.Vector3D.ConcordantColinear
- uid: SearchAThing.Sci.Vector3D.AngleToward*
  commentId: Overload:SearchAThing.Sci.Vector3D.AngleToward
  name: AngleToward
  nameWithType: Vector3D.AngleToward
  fullName: SearchAThing.Sci.Vector3D.AngleToward
- uid: SearchAThing.Sci.Vector3D.RotateAboutXAxis*
  commentId: Overload:SearchAThing.Sci.Vector3D.RotateAboutXAxis
  name: RotateAboutXAxis
  nameWithType: Vector3D.RotateAboutXAxis
  fullName: SearchAThing.Sci.Vector3D.RotateAboutXAxis
- uid: SearchAThing.Sci.Vector3D.RotateAboutYAxis*
  commentId: Overload:SearchAThing.Sci.Vector3D.RotateAboutYAxis
  name: RotateAboutYAxis
  nameWithType: Vector3D.RotateAboutYAxis
  fullName: SearchAThing.Sci.Vector3D.RotateAboutYAxis
- uid: SearchAThing.Sci.Vector3D.RotateAboutZAxis*
  commentId: Overload:SearchAThing.Sci.Vector3D.RotateAboutZAxis
  name: RotateAboutZAxis
  nameWithType: Vector3D.RotateAboutZAxis
  fullName: SearchAThing.Sci.Vector3D.RotateAboutZAxis
- uid: SearchAThing.Sci.Vector3D.RotateAboutAxis*
  commentId: Overload:SearchAThing.Sci.Vector3D.RotateAboutAxis
  name: RotateAboutAxis
  nameWithType: Vector3D.RotateAboutAxis
  fullName: SearchAThing.Sci.Vector3D.RotateAboutAxis
- uid: SearchAThing.Sci.Vector3D.RotateAs*
  commentId: Overload:SearchAThing.Sci.Vector3D.RotateAs
  name: RotateAs
  nameWithType: Vector3D.RotateAs
  fullName: SearchAThing.Sci.Vector3D.RotateAs
- uid: SearchAThing.Sci.Vector3D.ScaleAbout*
  commentId: Overload:SearchAThing.Sci.Vector3D.ScaleAbout
  name: ScaleAbout
  nameWithType: Vector3D.ScaleAbout
  fullName: SearchAThing.Sci.Vector3D.ScaleAbout
- uid: SearchAThing.Sci.Vector3D.Mirror*
  commentId: Overload:SearchAThing.Sci.Vector3D.Mirror
  name: Mirror
  nameWithType: Vector3D.Mirror
  fullName: SearchAThing.Sci.Vector3D.Mirror
- uid: SearchAThing.Sci.Vector3D.ToUCS*
  commentId: Overload:SearchAThing.Sci.Vector3D.ToUCS
  name: ToUCS
  nameWithType: Vector3D.ToUCS
  fullName: SearchAThing.Sci.Vector3D.ToUCS
- uid: SearchAThing.Sci.CoordinateSystem3D
  commentId: T:SearchAThing.Sci.CoordinateSystem3D
  parent: SearchAThing.Sci
  name: CoordinateSystem3D
  nameWithType: CoordinateSystem3D
  fullName: SearchAThing.Sci.CoordinateSystem3D
- uid: SearchAThing.Sci.Vector3D.ToWCS*
  commentId: Overload:SearchAThing.Sci.Vector3D.ToWCS
  name: ToWCS
  nameWithType: Vector3D.ToWCS
  fullName: SearchAThing.Sci.Vector3D.ToWCS
- uid: SearchAThing.Sci.Vector3D.Scalar*
  commentId: Overload:SearchAThing.Sci.Vector3D.Scalar
  name: Scalar
  nameWithType: Vector3D.Scalar
  fullName: SearchAThing.Sci.Vector3D.Scalar
- uid: SearchAThing.Sci.Vector3D.Convert*
  commentId: Overload:SearchAThing.Sci.Vector3D.Convert
  name: Convert
  nameWithType: Vector3D.Convert
  fullName: SearchAThing.Sci.Vector3D.Convert
- uid: SearchAThing.Sci.MeasureUnit
  commentId: T:SearchAThing.Sci.MeasureUnit
  parent: SearchAThing.Sci
  name: MeasureUnit
  nameWithType: MeasureUnit
  fullName: SearchAThing.Sci.MeasureUnit
- uid: SearchAThing.Sci.IMUDomain
  commentId: T:SearchAThing.Sci.IMUDomain
  parent: SearchAThing.Sci
  name: IMUDomain
  nameWithType: IMUDomain
  fullName: SearchAThing.Sci.IMUDomain
- uid: SearchAThing.Sci.Vector3D.Item*
  commentId: Overload:SearchAThing.Sci.Vector3D.Item
  name: Item
  nameWithType: Vector3D.Item
  fullName: SearchAThing.Sci.Vector3D.Item
- uid: SearchAThing.Sci.Vector3D.op_Addition*
  commentId: Overload:SearchAThing.Sci.Vector3D.op_Addition
  name: Addition
  nameWithType: Vector3D.Addition
  fullName: SearchAThing.Sci.Vector3D.Addition
- uid: SearchAThing.Sci.Vector3D.op_UnaryNegation*
  commentId: Overload:SearchAThing.Sci.Vector3D.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Vector3D.UnaryNegation
  fullName: SearchAThing.Sci.Vector3D.UnaryNegation
- uid: SearchAThing.Sci.Vector3D.op_Subtraction*
  commentId: Overload:SearchAThing.Sci.Vector3D.op_Subtraction
  name: Subtraction
  nameWithType: Vector3D.Subtraction
  fullName: SearchAThing.Sci.Vector3D.Subtraction
- uid: SearchAThing.Sci.Vector3D.op_Multiply*
  commentId: Overload:SearchAThing.Sci.Vector3D.op_Multiply
  name: Multiply
  nameWithType: Vector3D.Multiply
  fullName: SearchAThing.Sci.Vector3D.Multiply
- uid: SearchAThing.Sci.Vector3D.op_Division*
  commentId: Overload:SearchAThing.Sci.Vector3D.op_Division
  name: Division
  nameWithType: Vector3D.Division
  fullName: SearchAThing.Sci.Vector3D.Division
- uid: SearchAThing.Sci.Vector3D.From2DCoords*
  commentId: Overload:SearchAThing.Sci.Vector3D.From2DCoords
  name: From2DCoords
  nameWithType: Vector3D.From2DCoords
  fullName: SearchAThing.Sci.Vector3D.From2DCoords
- uid: List{SearchAThing.Sci.Vector3D}
  commentId: '!:List{SearchAThing.Sci.Vector3D}'
  definition: List`1
  name: List<Vector3D>
  nameWithType: List<Vector3D>
  fullName: List<SearchAThing.Sci.Vector3D>
  nameWithType.vb: List(Of Vector3D)
  fullName.vb: List(Of SearchAThing.Sci.Vector3D)
  name.vb: List(Of Vector3D)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Vector3D.From3DCoords*
  commentId: Overload:SearchAThing.Sci.Vector3D.From3DCoords
  name: From3DCoords
  nameWithType: Vector3D.From3DCoords
  fullName: SearchAThing.Sci.Vector3D.From3DCoords
- uid: SearchAThing.Sci.Vector3D.Random*
  commentId: Overload:SearchAThing.Sci.Vector3D.Random
  name: Random
  nameWithType: Vector3D.Random
  fullName: SearchAThing.Sci.Vector3D.Random
- uid: IEnumerable{SearchAThing.Sci.Vector3D}
  commentId: '!:IEnumerable{SearchAThing.Sci.Vector3D}'
  definition: IEnumerable`1
  name: IEnumerable<Vector3D>
  nameWithType: IEnumerable<Vector3D>
  fullName: IEnumerable<SearchAThing.Sci.Vector3D>
  nameWithType.vb: IEnumerable(Of Vector3D)
  fullName.vb: IEnumerable(Of SearchAThing.Sci.Vector3D)
  name.vb: IEnumerable(Of Vector3D)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchAThing.Sci.Vector3D
    name: Vector3D
    nameWithType: Vector3D
    fullName: SearchAThing.Sci.Vector3D
  - name: )
    nameWithType: )
    fullName: )
- uid: Random
  commentId: '!:Random'
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: Random
- uid: SearchAThing.Sci.Vector3D.FromString*
  commentId: Overload:SearchAThing.Sci.Vector3D.FromString
  name: FromString
  nameWithType: Vector3D.FromString
  fullName: SearchAThing.Sci.Vector3D.FromString
- uid: SearchAThing.Sci.Vector3D.FromStringArray*
  commentId: Overload:SearchAThing.Sci.Vector3D.FromStringArray
  name: FromStringArray
  nameWithType: Vector3D.FromStringArray
  fullName: SearchAThing.Sci.Vector3D.FromStringArray
- uid: SearchAThing.Sci.Vector3D.ToString*
  commentId: Overload:SearchAThing.Sci.Vector3D.ToString
  name: ToString
  nameWithType: Vector3D.ToString
  fullName: SearchAThing.Sci.Vector3D.ToString
- uid: SearchAThing.Sci.Vector3D.StringRepresentation*
  commentId: Overload:SearchAThing.Sci.Vector3D.StringRepresentation
  name: StringRepresentation
  nameWithType: Vector3D.StringRepresentation
  fullName: SearchAThing.Sci.Vector3D.StringRepresentation
- uid: SearchAThing.Sci.Vector3D.CadScript*
  commentId: Overload:SearchAThing.Sci.Vector3D.CadScript
  name: CadScript
  nameWithType: Vector3D.CadScript
  fullName: SearchAThing.Sci.Vector3D.CadScript
- uid: SearchAThing.Sci.Vector3D.CadScriptLine*
  commentId: Overload:SearchAThing.Sci.Vector3D.CadScriptLine
  name: CadScriptLine
  nameWithType: Vector3D.CadScriptLine
  fullName: SearchAThing.Sci.Vector3D.CadScriptLine
- uid: SearchAThing.Sci.Vector3D.CadScriptLineFrom*
  commentId: Overload:SearchAThing.Sci.Vector3D.CadScriptLineFrom
  name: CadScriptLineFrom
  nameWithType: Vector3D.CadScriptLineFrom
  fullName: SearchAThing.Sci.Vector3D.CadScriptLineFrom
- uid: SearchAThing.Sci.Geometry.GeomFrom
  commentId: P:SearchAThing.Sci.Geometry.GeomFrom
  parent: SearchAThing.Sci.Geometry
  name: GeomFrom
  nameWithType: Geometry.GeomFrom
  fullName: SearchAThing.Sci.Geometry.GeomFrom
- uid: SearchAThing.Sci.Vector3D.GeomFrom*
  commentId: Overload:SearchAThing.Sci.Vector3D.GeomFrom
  name: GeomFrom
  nameWithType: Vector3D.GeomFrom
  fullName: SearchAThing.Sci.Vector3D.GeomFrom
- uid: SearchAThing.Sci.Geometry.GeomTo
  commentId: P:SearchAThing.Sci.Geometry.GeomTo
  parent: SearchAThing.Sci.Geometry
  name: GeomTo
  nameWithType: Geometry.GeomTo
  fullName: SearchAThing.Sci.Geometry.GeomTo
- uid: SearchAThing.Sci.Vector3D.GeomTo*
  commentId: Overload:SearchAThing.Sci.Vector3D.GeomTo
  name: GeomTo
  nameWithType: Vector3D.GeomTo
  fullName: SearchAThing.Sci.Vector3D.GeomTo
- uid: SearchAThing.Sci.Geometry.Vertexes
  commentId: P:SearchAThing.Sci.Geometry.Vertexes
  parent: SearchAThing.Sci.Geometry
  name: Vertexes
  nameWithType: Geometry.Vertexes
  fullName: SearchAThing.Sci.Geometry.Vertexes
- uid: SearchAThing.Sci.Vector3D.Vertexes*
  commentId: Overload:SearchAThing.Sci.Vector3D.Vertexes
  name: Vertexes
  nameWithType: Vector3D.Vertexes
  fullName: SearchAThing.Sci.Vector3D.Vertexes
- uid: SearchAThing.Sci.Geometry.Length
  commentId: P:SearchAThing.Sci.Geometry.Length
  parent: SearchAThing.Sci.Geometry
  name: Length
  nameWithType: Geometry.Length
  fullName: SearchAThing.Sci.Geometry.Length
- uid: SearchAThing.Sci.Vector3D.Length*
  commentId: Overload:SearchAThing.Sci.Vector3D.Length
  name: Length
  nameWithType: Vector3D.Length
  fullName: SearchAThing.Sci.Vector3D.Length
- uid: SearchAThing.Sci.Geometry.DxfEntity
  commentId: P:SearchAThing.Sci.Geometry.DxfEntity
  parent: SearchAThing.Sci.Geometry
  name: DxfEntity
  nameWithType: Geometry.DxfEntity
  fullName: SearchAThing.Sci.Geometry.DxfEntity
- uid: SearchAThing.Sci.Vector3D.DxfEntity*
  commentId: Overload:SearchAThing.Sci.Vector3D.DxfEntity
  name: DxfEntity
  nameWithType: Vector3D.DxfEntity
  fullName: SearchAThing.Sci.Vector3D.DxfEntity
- uid: netDxf.Entities.EntityObject
  isExternal: true
  name: netDxf.Entities.EntityObject
  nameWithType: netDxf.Entities.EntityObject
  fullName: netDxf.Entities.EntityObject
- uid: SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
  commentId: M:SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
  parent: SearchAThing.Sci.Geometry
  isExternal: true
  name: Divide(Int32, Boolean)
  nameWithType: Geometry.Divide(Int32, Boolean)
  fullName: SearchAThing.Sci.Geometry.Divide(System.Int32, System.Boolean)
  spec.csharp:
  - uid: SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
    name: Divide
    nameWithType: Geometry.Divide
    fullName: SearchAThing.Sci.Geometry.Divide
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.Sci.Geometry.Divide(System.Int32,System.Boolean)
    name: Divide
    nameWithType: Geometry.Divide
    fullName: SearchAThing.Sci.Geometry.Divide
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Vector3D.Divide*
  commentId: Overload:SearchAThing.Sci.Vector3D.Divide
  name: Divide
  nameWithType: Vector3D.Divide
  fullName: SearchAThing.Sci.Vector3D.Divide
- uid: SearchAThing.Sci.Geometry.BBox(System.Double)
  commentId: M:SearchAThing.Sci.Geometry.BBox(System.Double)
  parent: SearchAThing.Sci.Geometry
  isExternal: true
  name: BBox(Double)
  nameWithType: Geometry.BBox(Double)
  fullName: SearchAThing.Sci.Geometry.BBox(System.Double)
  spec.csharp:
  - uid: SearchAThing.Sci.Geometry.BBox(System.Double)
    name: BBox
    nameWithType: Geometry.BBox
    fullName: SearchAThing.Sci.Geometry.BBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchAThing.Sci.Geometry.BBox(System.Double)
    name: BBox
    nameWithType: Geometry.BBox
    fullName: SearchAThing.Sci.Geometry.BBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Vector3D.BBox*
  commentId: Overload:SearchAThing.Sci.Vector3D.BBox
  name: BBox
  nameWithType: Vector3D.BBox
  fullName: SearchAThing.Sci.Vector3D.BBox
- uid: SearchAThing.Sci.BBox3D
  commentId: T:SearchAThing.Sci.BBox3D
  parent: SearchAThing.Sci
  name: BBox3D
  nameWithType: BBox3D
  fullName: SearchAThing.Sci.BBox3D
- uid: SearchAThing.Sci.Vector3D.op_Implicit*
  commentId: Overload:SearchAThing.Sci.Vector3D.op_Implicit
  name: Implicit
  nameWithType: Vector3D.Implicit
  fullName: SearchAThing.Sci.Vector3D.Implicit
  nameWithType.vb: Vector3D.Widening
  fullName.vb: SearchAThing.Sci.Vector3D.Widening
  name.vb: Widening
- uid: Vector2
  commentId: '!:Vector2'
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2
- uid: Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: Vector3

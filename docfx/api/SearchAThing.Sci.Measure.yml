### YamlMime:ManagedReference
items:
- uid: SearchAThing.Sci.Measure
  commentId: T:SearchAThing.Sci.Measure
  id: Measure
  parent: SearchAThing.Sci
  children:
  - SearchAThing.Sci.Measure.#ctor(System.Double,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  - SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.Measure.ConvertTo(SearchAThing.Sci.IMUDomain)
  - SearchAThing.Sci.Measure.ConvertTo(SearchAThing.Sci.MeasureUnit)
  - SearchAThing.Sci.Measure.ExpPref
  - SearchAThing.Sci.Measure.MRound(SearchAThing.Sci.Measure)
  - SearchAThing.Sci.Measure.MU
  - SearchAThing.Sci.Measure.op_Division(SearchAThing.Sci.Measure,System.Double)
  - SearchAThing.Sci.Measure.op_Implicit(System.String)~SearchAThing.Sci.Measure
  - SearchAThing.Sci.Measure.op_Multiply(SearchAThing.Sci.Measure,System.Double)
  - SearchAThing.Sci.Measure.op_Multiply(System.Double,SearchAThing.Sci.Measure)
  - SearchAThing.Sci.Measure.op_UnaryNegation(SearchAThing.Sci.Measure)
  - SearchAThing.Sci.Measure.ToString
  - SearchAThing.Sci.Measure.ToString(System.Boolean,System.Nullable{System.Int32},CultureInfo)
  - SearchAThing.Sci.Measure.ToString(System.Int32)
  - SearchAThing.Sci.Measure.TryParse(System.String,SearchAThing.Sci.PhysicalQuantity,CultureInfo)
  - SearchAThing.Sci.Measure.Value
  langs:
  - csharp
  - vb
  name: Measure
  nameWithType: Measure
  fullName: SearchAThing.Sci.Measure
  type: Class
  source:
    id: Measure
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 14
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: 'public class Measure : object'
    content.vb: >-
      Public Class Measure
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SearchAThing.Sci.Measure.Value
  commentId: P:SearchAThing.Sci.Measure.Value
  id: Value
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Measure.Value
  fullName: SearchAThing.Sci.Measure.Value
  type: Property
  source:
    id: Value
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 18
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public double Value { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Value As Double
  overload: SearchAThing.Sci.Measure.Value*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Measure.MU
  commentId: P:SearchAThing.Sci.Measure.MU
  id: MU
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: MU
  nameWithType: Measure.MU
  fullName: SearchAThing.Sci.Measure.MU
  type: Property
  source:
    id: MU
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 20
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public MeasureUnit MU { get; }
    parameters: []
    return:
      type: SearchAThing.Sci.MeasureUnit
    content.vb: Public ReadOnly Property MU As MeasureUnit
  overload: SearchAThing.Sci.Measure.MU*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SearchAThing.Sci.Measure.#ctor(System.Double,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.Measure.#ctor(System.Double,SearchAThing.Sci.MeasureUnit)
  id: '#ctor(System.Double,SearchAThing.Sci.MeasureUnit)'
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Measure(Double, MeasureUnit)
  nameWithType: Measure.Measure(Double, MeasureUnit)
  fullName: SearchAThing.Sci.Measure.Measure(System.Double, SearchAThing.Sci.MeasureUnit)
  type: Constructor
  source:
    id: .ctor
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 23
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public Measure(double value, MeasureUnit mu)
    parameters:
    - id: value
      type: System.Double
    - id: mu
      type: SearchAThing.Sci.MeasureUnit
    content.vb: Public Sub New(value As Double, mu As MeasureUnit)
  overload: SearchAThing.Sci.Measure.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Measure.ExpPref
  commentId: P:SearchAThing.Sci.Measure.ExpPref
  id: ExpPref
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: ExpPref
  nameWithType: Measure.ExpPref
  fullName: SearchAThing.Sci.Measure.ExpPref
  type: Property
  source:
    id: ExpPref
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 35
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nuse of exponential pref\neg. \n120 with ExpPref=2 -> 1.2e2\n120 with ExpPref=-1 -> 1200e-1\n"
  example: []
  syntax:
    content: public int? ExpPref { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property ExpPref As Integer?
  overload: SearchAThing.Sci.Measure.ExpPref*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Measure.op_Multiply(System.Double,SearchAThing.Sci.Measure)
  commentId: M:SearchAThing.Sci.Measure.op_Multiply(System.Double,SearchAThing.Sci.Measure)
  id: op_Multiply(System.Double,SearchAThing.Sci.Measure)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Multiply(Double, Measure)
  nameWithType: Measure.Multiply(Double, Measure)
  fullName: SearchAThing.Sci.Measure.Multiply(System.Double, SearchAThing.Sci.Measure)
  type: Operator
  source:
    id: op_Multiply
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 42
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar mul\n"
  example: []
  syntax:
    content: public static Measure operator *(double s, Measure v)
    parameters:
    - id: s
      type: System.Double
    - id: v
      type: SearchAThing.Sci.Measure
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Shared Operator *(s As Double, v As Measure) As Measure
  overload: SearchAThing.Sci.Measure.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Measure.op_Multiply(SearchAThing.Sci.Measure,System.Double)
  commentId: M:SearchAThing.Sci.Measure.op_Multiply(SearchAThing.Sci.Measure,System.Double)
  id: op_Multiply(SearchAThing.Sci.Measure,System.Double)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Multiply(Measure, Double)
  nameWithType: Measure.Multiply(Measure, Double)
  fullName: SearchAThing.Sci.Measure.Multiply(SearchAThing.Sci.Measure, System.Double)
  type: Operator
  source:
    id: op_Multiply
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 50
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar mul\n"
  example: []
  syntax:
    content: public static Measure operator *(Measure v, double s)
    parameters:
    - id: v
      type: SearchAThing.Sci.Measure
    - id: s
      type: System.Double
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Shared Operator *(v As Measure, s As Double) As Measure
  overload: SearchAThing.Sci.Measure.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Measure.op_Division(SearchAThing.Sci.Measure,System.Double)
  commentId: M:SearchAThing.Sci.Measure.op_Division(SearchAThing.Sci.Measure,System.Double)
  id: op_Division(SearchAThing.Sci.Measure,System.Double)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Division(Measure, Double)
  nameWithType: Measure.Division(Measure, Double)
  fullName: SearchAThing.Sci.Measure.Division(SearchAThing.Sci.Measure, System.Double)
  type: Operator
  source:
    id: op_Division
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 58
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar mul\n"
  example: []
  syntax:
    content: public static Measure operator /(Measure v, double s)
    parameters:
    - id: v
      type: SearchAThing.Sci.Measure
    - id: s
      type: System.Double
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Shared Operator /(v As Measure, s As Double) As Measure
  overload: SearchAThing.Sci.Measure.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Measure.op_UnaryNegation(SearchAThing.Sci.Measure)
  commentId: M:SearchAThing.Sci.Measure.op_UnaryNegation(SearchAThing.Sci.Measure)
  id: op_UnaryNegation(SearchAThing.Sci.Measure)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: UnaryNegation(Measure)
  nameWithType: Measure.UnaryNegation(Measure)
  fullName: SearchAThing.Sci.Measure.UnaryNegation(SearchAThing.Sci.Measure)
  type: Operator
  source:
    id: op_UnaryNegation
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 66
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nscalar mul\n"
  example: []
  syntax:
    content: public static Measure operator -(Measure a)
    parameters:
    - id: a
      type: SearchAThing.Sci.Measure
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Shared Operator -(a As Measure) As Measure
  overload: SearchAThing.Sci.Measure.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Measure.op_Implicit(System.String)~SearchAThing.Sci.Measure
  commentId: M:SearchAThing.Sci.Measure.op_Implicit(System.String)~SearchAThing.Sci.Measure
  id: op_Implicit(System.String)~SearchAThing.Sci.Measure
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Implicit(String to Measure)
  nameWithType: Measure.Implicit(String to Measure)
  fullName: SearchAThing.Sci.Measure.Implicit(System.String to SearchAThing.Sci.Measure)
  type: Operator
  source:
    id: op_Implicit
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 73
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public static implicit operator Measure(string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Shared Widening Operator CType(str As String) As Measure
  overload: SearchAThing.Sci.Measure.op_Implicit*
  nameWithType.vb: Measure.Widening(String to Measure)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SearchAThing.Sci.Measure.Widening(System.String to SearchAThing.Sci.Measure)
  name.vb: Widening(String to Measure)
- uid: SearchAThing.Sci.Measure.ConvertTo(SearchAThing.Sci.IMUDomain)
  commentId: M:SearchAThing.Sci.Measure.ConvertTo(SearchAThing.Sci.IMUDomain)
  id: ConvertTo(SearchAThing.Sci.IMUDomain)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: ConvertTo(IMUDomain)
  nameWithType: Measure.ConvertTo(IMUDomain)
  fullName: SearchAThing.Sci.Measure.ConvertTo(SearchAThing.Sci.IMUDomain)
  type: Method
  source:
    id: ConvertTo
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 81
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nConvert to the implicit measure of the given mu domain\n"
  example: []
  syntax:
    content: public Measure ConvertTo(IMUDomain mud)
    parameters:
    - id: mud
      type: SearchAThing.Sci.IMUDomain
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Function ConvertTo(mud As IMUDomain) As Measure
  overload: SearchAThing.Sci.Measure.ConvertTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Measure.ConvertTo(SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.Measure.ConvertTo(SearchAThing.Sci.MeasureUnit)
  id: ConvertTo(SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: ConvertTo(MeasureUnit)
  nameWithType: Measure.ConvertTo(MeasureUnit)
  fullName: SearchAThing.Sci.Measure.ConvertTo(SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: ConvertTo
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 88
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public Measure ConvertTo(MeasureUnit toMU)
    parameters:
    - id: toMU
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Function ConvertTo(toMU As MeasureUnit) As Measure
  overload: SearchAThing.Sci.Measure.ConvertTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  id: Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Convert(Double, MeasureUnit, MeasureUnit)
  nameWithType: Measure.Convert(Double, MeasureUnit, MeasureUnit)
  fullName: SearchAThing.Sci.Measure.Convert(System.Double, SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 96
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconvert given value from to measure units\n"
  example: []
  syntax:
    content: public static double Convert(double value, MeasureUnit from, MeasureUnit to)
    parameters:
    - id: value
      type: System.Double
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: System.Double
    content.vb: Public Shared Function Convert(value As Double, from As MeasureUnit, to As MeasureUnit) As Double
  overload: SearchAThing.Sci.Measure.Convert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  commentId: M:SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  id: Convert(System.Double,SearchAThing.Sci.MeasureUnit,SearchAThing.Sci.IMUDomain)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Convert(Double, MeasureUnit, IMUDomain)
  nameWithType: Measure.Convert(Double, MeasureUnit, IMUDomain)
  fullName: SearchAThing.Sci.Measure.Convert(System.Double, SearchAThing.Sci.MeasureUnit, SearchAThing.Sci.IMUDomain)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 108
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconvert given value from to measure units\nto measure unit is given from the correspondent physical quantity measure unit in the given domain\n"
  example: []
  syntax:
    content: public static double Convert(double value, MeasureUnit from, IMUDomain to)
    parameters:
    - id: value
      type: System.Double
    - id: from
      type: SearchAThing.Sci.MeasureUnit
    - id: to
      type: SearchAThing.Sci.IMUDomain
    return:
      type: System.Double
    content.vb: Public Shared Function Convert(value As Double, from As MeasureUnit, to As IMUDomain) As Double
  overload: SearchAThing.Sci.Measure.Convert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  commentId: M:SearchAThing.Sci.Measure.Convert(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  id: Convert(System.Double,SearchAThing.Sci.IMUDomain,SearchAThing.Sci.MeasureUnit)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: Convert(Double, IMUDomain, MeasureUnit)
  nameWithType: Measure.Convert(Double, IMUDomain, MeasureUnit)
  fullName: SearchAThing.Sci.Measure.Convert(System.Double, SearchAThing.Sci.IMUDomain, SearchAThing.Sci.MeasureUnit)
  type: Method
  source:
    id: Convert
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 119
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nconvert given value from to measure units\nfrom measure unit is given from the correspondent physical quantity measure unit in the given domain\n"
  example: []
  syntax:
    content: public static double Convert(double value, IMUDomain from, MeasureUnit to)
    parameters:
    - id: value
      type: System.Double
    - id: from
      type: SearchAThing.Sci.IMUDomain
    - id: to
      type: SearchAThing.Sci.MeasureUnit
    return:
      type: System.Double
    content.vb: Public Shared Function Convert(value As Double, from As IMUDomain, to As MeasureUnit) As Double
  overload: SearchAThing.Sci.Measure.Convert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Measure.ToString(System.Boolean,System.Nullable{System.Int32},CultureInfo)
  commentId: M:SearchAThing.Sci.Measure.ToString(System.Boolean,System.Nullable{System.Int32},CultureInfo)
  id: ToString(System.Boolean,System.Nullable{System.Int32},CultureInfo)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: ToString(Boolean, Nullable<Int32>, CultureInfo)
  nameWithType: Measure.ToString(Boolean, Nullable<Int32>, CultureInfo)
  fullName: SearchAThing.Sci.Measure.ToString(System.Boolean, System.Nullable<System.Int32>, CultureInfo)
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 129
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nif specify culture use the given on or Invariant if not specified\n"
  example: []
  syntax:
    content: public string ToString(bool includePQ = false, int? digits = null, CultureInfo culture = null)
    parameters:
    - id: includePQ
      type: System.Boolean
    - id: digits
      type: System.Nullable{System.Int32}
    - id: culture
      type: CultureInfo
    return:
      type: System.String
    content.vb: Public Function ToString(includePQ As Boolean = False, digits As Integer? = Nothing, culture As CultureInfo = Nothing) As String
  overload: SearchAThing.Sci.Measure.ToString*
  nameWithType.vb: Measure.ToString(Boolean, Nullable(Of Int32), CultureInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SearchAThing.Sci.Measure.ToString(System.Boolean, System.Nullable(Of System.Int32), CultureInfo)
  name.vb: ToString(Boolean, Nullable(Of Int32), CultureInfo)
- uid: SearchAThing.Sci.Measure.ToString
  commentId: M:SearchAThing.Sci.Measure.ToString
  id: ToString
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Measure.ToString()
  fullName: SearchAThing.Sci.Measure.ToString()
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 163
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SearchAThing.Sci.Measure.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SearchAThing.Sci.Measure.ToString(System.Int32)
  commentId: M:SearchAThing.Sci.Measure.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: ToString(Int32)
  nameWithType: Measure.ToString(Int32)
  fullName: SearchAThing.Sci.Measure.ToString(System.Int32)
  type: Method
  source:
    id: ToString
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 168
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  syntax:
    content: public string ToString(int digits)
    parameters:
    - id: digits
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Function ToString(digits As Integer) As String
  overload: SearchAThing.Sci.Measure.ToString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SearchAThing.Sci.Measure.TryParse(System.String,SearchAThing.Sci.PhysicalQuantity,CultureInfo)
  commentId: M:SearchAThing.Sci.Measure.TryParse(System.String,SearchAThing.Sci.PhysicalQuantity,CultureInfo)
  id: TryParse(System.String,SearchAThing.Sci.PhysicalQuantity,CultureInfo)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: TryParse(String, PhysicalQuantity, CultureInfo)
  nameWithType: Measure.TryParse(String, PhysicalQuantity, CultureInfo)
  fullName: SearchAThing.Sci.Measure.TryParse(System.String, SearchAThing.Sci.PhysicalQuantity, CultureInfo)
  type: Method
  source:
    id: TryParse
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 176
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nif specify culture use the given on or Invariant if not specified\n"
  example: []
  syntax:
    content: public static Measure TryParse(string text, PhysicalQuantity pq = null, CultureInfo culture = null)
    parameters:
    - id: text
      type: System.String
    - id: pq
      type: SearchAThing.Sci.PhysicalQuantity
    - id: culture
      type: CultureInfo
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Shared Function TryParse(text As String, pq As PhysicalQuantity = Nothing, culture As CultureInfo = Nothing) As Measure
  overload: SearchAThing.Sci.Measure.TryParse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SearchAThing.Sci.Measure.MRound(SearchAThing.Sci.Measure)
  commentId: M:SearchAThing.Sci.Measure.MRound(SearchAThing.Sci.Measure)
  id: MRound(SearchAThing.Sci.Measure)
  parent: SearchAThing.Sci.Measure
  langs:
  - csharp
  - vb
  name: MRound(Measure)
  nameWithType: Measure.MRound(Measure)
  fullName: SearchAThing.Sci.Measure.MRound(SearchAThing.Sci.Measure)
  type: Method
  source:
    id: MRound
    path: Z:\netcore-sci\netcore-sci\Measure.cs
    startLine: 267
  assemblies:
  - netcore-sci
  namespace: SearchAThing.Sci
  summary: "\nreturn this measure rounded by the given tol\nthis will not change current MU\n"
  example: []
  syntax:
    content: public Measure MRound(Measure tol)
    parameters:
    - id: tol
      type: SearchAThing.Sci.Measure
    return:
      type: SearchAThing.Sci.Measure
    content.vb: Public Function MRound(tol As Measure) As Measure
  overload: SearchAThing.Sci.Measure.MRound*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SearchAThing.Sci
  commentId: N:SearchAThing.Sci
  name: SearchAThing.Sci
  nameWithType: SearchAThing.Sci
  fullName: SearchAThing.Sci
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchAThing.Sci.Measure.Value*
  commentId: Overload:SearchAThing.Sci.Measure.Value
  name: Value
  nameWithType: Measure.Value
  fullName: SearchAThing.Sci.Measure.Value
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: SearchAThing.Sci.Measure.MU*
  commentId: Overload:SearchAThing.Sci.Measure.MU
  name: MU
  nameWithType: Measure.MU
  fullName: SearchAThing.Sci.Measure.MU
- uid: SearchAThing.Sci.MeasureUnit
  commentId: T:SearchAThing.Sci.MeasureUnit
  parent: SearchAThing.Sci
  name: MeasureUnit
  nameWithType: MeasureUnit
  fullName: SearchAThing.Sci.MeasureUnit
- uid: SearchAThing.Sci.Measure.#ctor*
  commentId: Overload:SearchAThing.Sci.Measure.#ctor
  name: Measure
  nameWithType: Measure.Measure
  fullName: SearchAThing.Sci.Measure.Measure
- uid: SearchAThing.Sci.Measure.ExpPref*
  commentId: Overload:SearchAThing.Sci.Measure.ExpPref
  name: ExpPref
  nameWithType: Measure.ExpPref
  fullName: SearchAThing.Sci.Measure.ExpPref
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchAThing.Sci.Measure.op_Multiply*
  commentId: Overload:SearchAThing.Sci.Measure.op_Multiply
  name: Multiply
  nameWithType: Measure.Multiply
  fullName: SearchAThing.Sci.Measure.Multiply
- uid: SearchAThing.Sci.Measure
  commentId: T:SearchAThing.Sci.Measure
  parent: SearchAThing.Sci
  name: Measure
  nameWithType: Measure
  fullName: SearchAThing.Sci.Measure
- uid: SearchAThing.Sci.Measure.op_Division*
  commentId: Overload:SearchAThing.Sci.Measure.op_Division
  name: Division
  nameWithType: Measure.Division
  fullName: SearchAThing.Sci.Measure.Division
- uid: SearchAThing.Sci.Measure.op_UnaryNegation*
  commentId: Overload:SearchAThing.Sci.Measure.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Measure.UnaryNegation
  fullName: SearchAThing.Sci.Measure.UnaryNegation
- uid: SearchAThing.Sci.Measure.op_Implicit*
  commentId: Overload:SearchAThing.Sci.Measure.op_Implicit
  name: Implicit
  nameWithType: Measure.Implicit
  fullName: SearchAThing.Sci.Measure.Implicit
  nameWithType.vb: Measure.Widening
  fullName.vb: SearchAThing.Sci.Measure.Widening
  name.vb: Widening
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SearchAThing.Sci.Measure.ConvertTo*
  commentId: Overload:SearchAThing.Sci.Measure.ConvertTo
  name: ConvertTo
  nameWithType: Measure.ConvertTo
  fullName: SearchAThing.Sci.Measure.ConvertTo
- uid: SearchAThing.Sci.IMUDomain
  commentId: T:SearchAThing.Sci.IMUDomain
  parent: SearchAThing.Sci
  name: IMUDomain
  nameWithType: IMUDomain
  fullName: SearchAThing.Sci.IMUDomain
- uid: SearchAThing.Sci.Measure.Convert*
  commentId: Overload:SearchAThing.Sci.Measure.Convert
  name: Convert
  nameWithType: Measure.Convert
  fullName: SearchAThing.Sci.Measure.Convert
- uid: SearchAThing.Sci.Measure.ToString*
  commentId: Overload:SearchAThing.Sci.Measure.ToString
  name: ToString
  nameWithType: Measure.ToString
  fullName: SearchAThing.Sci.Measure.ToString
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CultureInfo
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: CultureInfo
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SearchAThing.Sci.Measure.TryParse*
  commentId: Overload:SearchAThing.Sci.Measure.TryParse
  name: TryParse
  nameWithType: Measure.TryParse
  fullName: SearchAThing.Sci.Measure.TryParse
- uid: SearchAThing.Sci.PhysicalQuantity
  commentId: T:SearchAThing.Sci.PhysicalQuantity
  parent: SearchAThing.Sci
  name: PhysicalQuantity
  nameWithType: PhysicalQuantity
  fullName: SearchAThing.Sci.PhysicalQuantity
- uid: SearchAThing.Sci.Measure.MRound*
  commentId: Overload:SearchAThing.Sci.Measure.MRound
  name: MRound
  nameWithType: Measure.MRound
  fullName: SearchAThing.Sci.Measure.MRound
